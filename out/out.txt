Compute Free(2, 0)
If select 2 in Tree A #Subproblem: 10 Direction: LeftCompute Free(2, 1)
If select 2 in Tree A #Subproblem: 5 Direction: LeftCompute Free(2, 2)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[2][2] freeSumA = 0 freeSumB = 0
Free[2][2] = 1
FreeS(2, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(2, 3)
If select 2 in Tree A #Subproblem: 3 Direction: LeftCompute Free(2, 4)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[2][4] freeSumA = 0 freeSumB = 0
Free[2][4] = 1
FreeS(2, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(2, 5)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[2][5] freeSumA = 0 freeSumB = 0
Free[2][5] = 1
FreeS(2, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[2][3] freeSumA = 0 freeSumB = 2
LeftB[2, 4] = 1
Compute Free(2, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(2, 5) = 1
brightmost = 4
Compute Free(2, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[2][3] = 3
FreeS(2, 3)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
free[2][1] freeSumA = 0 freeSumB = 4
LeftB[2, 2] = 1
Compute Free(2, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(2, 3) = 4
brightmost = 7
Compute Free(2, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[2][1] = 5
FreeS(2, 1)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
Compute Free(2, 6)
If select 2 in Tree A #Subproblem: 4 Direction: LeftCompute Free(2, 7)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[2][7] freeSumA = 0 freeSumB = 0
Free[2][7] = 1
FreeS(2, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(2, 8)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[2][8] freeSumA = 0 freeSumB = 0
Free[2][8] = 1
FreeS(2, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(2, 9)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[2][9] freeSumA = 0 freeSumB = 0
Free[2][9] = 1
FreeS(2, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[2][6] freeSumA = 0 freeSumB = 3
LeftB[2, 7] = 1
Compute Free(2, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(2, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(2, 9) = 1
brightmost = 6
Compute Free(2, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[2][6] = 4
FreeS(2, 6)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
free[2][0] freeSumA = 0 freeSumB = 9
LeftB[2, 1] = 7
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(2, 6) = 6
brightmost = 17
Compute Free(2, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[2][0] = 10
FreeS(2, 0)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
Compute Free(4, 0)
If select 4 in Tree A #Subproblem: 10 Direction: LeftCompute Free(4, 1)
If select 4 in Tree A #Subproblem: 5 Direction: LeftCompute Free(4, 2)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[4][2] freeSumA = 0 freeSumB = 0
Free[4][2] = 1
FreeS(4, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(4, 3)
If select 4 in Tree A #Subproblem: 3 Direction: LeftCompute Free(4, 4)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[4][4] freeSumA = 0 freeSumB = 0
Free[4][4] = 1
FreeS(4, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(4, 5)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[4][5] freeSumA = 0 freeSumB = 0
Free[4][5] = 1
FreeS(4, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[4][3] freeSumA = 0 freeSumB = 2
LeftB[4, 4] = 1
Compute Free(4, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(4, 5) = 1
brightmost = 4
Compute Free(4, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[4][3] = 3
FreeS(4, 3)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
free[4][1] freeSumA = 0 freeSumB = 4
LeftB[4, 2] = 1
Compute Free(4, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(4, 3) = 4
brightmost = 7
Compute Free(4, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[4][1] = 5
FreeS(4, 1)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(4, 6)
If select 4 in Tree A #Subproblem: 4 Direction: LeftCompute Free(4, 7)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[4][7] freeSumA = 0 freeSumB = 0
Free[4][7] = 1
FreeS(4, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(4, 8)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[4][8] freeSumA = 0 freeSumB = 0
Free[4][8] = 1
FreeS(4, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(4, 9)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[4][9] freeSumA = 0 freeSumB = 0
Free[4][9] = 1
FreeS(4, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[4][6] freeSumA = 0 freeSumB = 3
LeftB[4, 7] = 1
Compute Free(4, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(4, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(4, 9) = 1
brightmost = 6
Compute Free(4, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[4][6] = 4
FreeS(4, 6)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
free[4][0] freeSumA = 0 freeSumB = 9
LeftB[4, 1] = 7
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(4, 6) = 6
brightmost = 17
Compute Free(4, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[4][0] = 10
FreeS(4, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(5, 0)
If select 5 in Tree A #Subproblem: 10 Direction: LeftCompute Free(5, 1)
If select 5 in Tree A #Subproblem: 5 Direction: LeftCompute Free(5, 2)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[5][2] freeSumA = 0 freeSumB = 0
Free[5][2] = 1
FreeS(5, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(5, 3)
If select 5 in Tree A #Subproblem: 3 Direction: LeftCompute Free(5, 4)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[5][4] freeSumA = 0 freeSumB = 0
Free[5][4] = 1
FreeS(5, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(5, 5)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[5][5] freeSumA = 0 freeSumB = 0
Free[5][5] = 1
FreeS(5, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[5][3] freeSumA = 0 freeSumB = 2
LeftB[5, 4] = 1
Compute Free(5, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(5, 5) = 1
brightmost = 4
Compute Free(5, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[5][3] = 3
FreeS(5, 3)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
free[5][1] freeSumA = 0 freeSumB = 4
LeftB[5, 2] = 1
Compute Free(5, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(5, 3) = 4
brightmost = 7
Compute Free(5, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[5][1] = 5
FreeS(5, 1)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
Compute Free(5, 6)
If select 5 in Tree A #Subproblem: 4 Direction: LeftCompute Free(5, 7)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[5][7] freeSumA = 0 freeSumB = 0
Free[5][7] = 1
FreeS(5, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(5, 8)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[5][8] freeSumA = 0 freeSumB = 0
Free[5][8] = 1
FreeS(5, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(5, 9)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[5][9] freeSumA = 0 freeSumB = 0
Free[5][9] = 1
FreeS(5, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[5][6] freeSumA = 0 freeSumB = 3
LeftB[5, 7] = 1
Compute Free(5, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(5, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(5, 9) = 1
brightmost = 6
Compute Free(5, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[5][6] = 4
FreeS(5, 6)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
free[5][0] freeSumA = 0 freeSumB = 9
LeftB[5, 1] = 7
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(5, 6) = 6
brightmost = 17
Compute Free(5, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[5][0] = 10
FreeS(5, 0)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
Compute Free(3, 2)
If select 2 in Tree B #Subproblem: 3 Direction: Leftfree[3][2] freeSumA = 2 freeSumB = 0
LeftA[4, 2] = 1
Compute Free(3, 2)
If select 4(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(4, 2)(1) leftA(4, 2)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[5, 2] set to 5
arightmost = 4
Compute Free(3, 2)
If select 5(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[3][2] = 3
FreeS(3, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(3, 4)
If select 4 in Tree B #Subproblem: 3 Direction: Leftfree[3][4] freeSumA = 2 freeSumB = 0
LeftA[4, 4] = 1
Compute Free(3, 4)
If select 4(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(4, 4)(1) leftA(4, 4)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[5, 4] set to 5
arightmost = 4
Compute Free(3, 4)
If select 5(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[3][4] = 3
FreeS(3, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(3, 5)
If select 5 in Tree B #Subproblem: 3 Direction: Leftfree[3][5] freeSumA = 2 freeSumB = 0
LeftA[4, 5] = 1
Compute Free(3, 5)
If select 4(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(4, 5)(1) leftA(4, 5)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[5, 5] set to 5
arightmost = 4
Compute Free(3, 5)
If select 5(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[3][5] = 3
FreeS(3, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[3][3] freeSumA = 6 freeSumB = 6
LeftA[4, 3] = 4
Compute Free(3, 3)
If select 4(leftmost) in Tree A #Subproblem: 15 Direction: Right
free(4, 3)(3) leftA(4, 3)(4)  b->getLeftmostForestNum() = 4 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 15
RightA[5, 3] set to 5
arightmost = 15
Compute Free(3, 3)
If select 5(rightmost) in Tree A #Subproblem: 15 Direction: Left
LeftB[3, 4] = 4
Compute Free(3, 3)
If select 4(leftmost) in Tree B #Subproblem: 15 Direction: Right
bleftmost = 15
RightB(3, 5) = 4
brightmost = 15
Compute Free(3, 3)
If select 5(rightmost) in Tree B #Subproblem: 15 Direction: Left
Free[3][3] = 15
FreeS(3, 3)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
free[3][1] freeSumA = 10 freeSumB = 18
LeftA[4, 1] = 9
Compute Free(3, 1)
If select 4(leftmost) in Tree A #Subproblem: 32 Direction: Right
free(4, 1)(5) leftA(4, 1)(9)  b->getLeftmostForestNum() = 9 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 32
RightA[5, 1] set to 5
arightmost = 26
Compute Free(3, 1)
If select 5(rightmost) in Tree A #Subproblem: 26 Direction: Left
LeftB[3, 2] = 4
Compute Free(3, 1)
If select 2(leftmost) in Tree B #Subproblem: 35 Direction: Right
bleftmost = 35
bleftmost = 15
brightmost = 7 + 8 = 15
RightB(3, 3) = 15
brightmost = 26
Compute Free(3, 1)
If select 3(rightmost) in Tree B #Subproblem: 26 Direction: Left
Free[3][1] = 26
FreeS(3, 1)
Keynode: 5 in Tree A
Direction: left
Leaf: 5
Compute Free(3, 7)
If select 7 in Tree B #Subproblem: 3 Direction: Leftfree[3][7] freeSumA = 2 freeSumB = 0
LeftA[4, 7] = 1
Compute Free(3, 7)
If select 4(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(4, 7)(1) leftA(4, 7)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[5, 7] set to 5
arightmost = 4
Compute Free(3, 7)
If select 5(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[3][7] = 3
FreeS(3, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(3, 8)
If select 8 in Tree B #Subproblem: 3 Direction: Leftfree[3][8] freeSumA = 2 freeSumB = 0
LeftA[4, 8] = 1
Compute Free(3, 8)
If select 4(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(4, 8)(1) leftA(4, 8)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[5, 8] set to 5
arightmost = 4
Compute Free(3, 8)
If select 5(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[3][8] = 3
FreeS(3, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(3, 9)
If select 9 in Tree B #Subproblem: 3 Direction: Leftfree[3][9] freeSumA = 2 freeSumB = 0
LeftA[4, 9] = 1
Compute Free(3, 9)
If select 4(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(4, 9)(1) leftA(4, 9)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[5, 9] set to 5
arightmost = 4
Compute Free(3, 9)
If select 5(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[3][9] = 3
FreeS(3, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[3][6] freeSumA = 8 freeSumB = 9
LeftA[4, 6] = 6
Compute Free(3, 6)
If select 4(leftmost) in Tree A #Subproblem: 22 Direction: Right
free(4, 6)(4) leftA(4, 6)(6)  b->getLeftmostForestNum() = 6 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 22
RightA[5, 6] set to 5
arightmost = 22
Compute Free(3, 6)
If select 5(rightmost) in Tree A #Subproblem: 22 Direction: Left
LeftB[3, 7] = 4
Compute Free(3, 6)
If select 7(leftmost) in Tree B #Subproblem: 22 Direction: Right
bleftmost = 22
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 12
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = 1 childrenSizeSumB[0] = 1
right = 12
Compute Free(3, 6)
If select 8 in Tree B #Subproblem: 22 Direction: Left
RightB(3, 9) = 4
brightmost = 22
Compute Free(3, 6)
If select 9(rightmost) in Tree B #Subproblem: 22 Direction: Left
Free[3][6] = 22
FreeS(3, 6)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
free[3][0] freeSumA = 20 freeSumB = 48
LeftA[4, 0] = 20
Compute Free(3, 0)
If select 4(leftmost) in Tree A #Subproblem: 70 Direction: Right
free(4, 0)(10) leftA(4, 0)(20)  b->getLeftmostForestNum() = 20 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 70
RightA[5, 0] set to 5
arightmost = 67
Compute Free(3, 0)
If select 5(rightmost) in Tree A #Subproblem: 67 Direction: Left
LeftB[3, 1] = 26
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 68 Direction: Right
bleftmost = 68
bleftmost = 22
childrenB 8 = 22
brightmost = 10 + 12 = 22
RightB(3, 6) = 22
brightmost = 72
Compute Free(3, 0)
If select 6(rightmost) in Tree B #Subproblem: 72 Direction: Left
Free[3][0] = 67
FreeS(3, 0)
Keynode: 5 in Tree A
Direction: left
Leaf: 5
Compute Free(1, 2)
If select 2 in Tree B #Subproblem: 5 Direction: Leftfree[1][2] freeSumA = 4 freeSumB = 0
LeftA[2, 2] = 1
Compute Free(1, 2)
If select 2(leftmost) in Tree A #Subproblem: 8 Direction: Right
free(2, 2)(1) leftA(2, 2)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 8
RightA[3, 2] set to 5
arightmost = 7
Compute Free(1, 2)
If select 3(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[1][2] = 5
FreeS(1, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(1, 4)
If select 4 in Tree B #Subproblem: 5 Direction: Leftfree[1][4] freeSumA = 4 freeSumB = 0
LeftA[2, 4] = 1
Compute Free(1, 4)
If select 2(leftmost) in Tree A #Subproblem: 8 Direction: Right
free(2, 4)(1) leftA(2, 4)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 8
RightA[3, 4] set to 5
arightmost = 7
Compute Free(1, 4)
If select 3(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[1][4] = 5
FreeS(1, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(1, 5)
If select 5 in Tree B #Subproblem: 5 Direction: Leftfree[1][5] freeSumA = 4 freeSumB = 0
LeftA[2, 5] = 1
Compute Free(1, 5)
If select 2(leftmost) in Tree A #Subproblem: 8 Direction: Right
free(2, 5)(1) leftA(2, 5)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 8
RightA[3, 5] set to 5
arightmost = 7
Compute Free(1, 5)
If select 3(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[1][5] = 5
FreeS(1, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[1][3] freeSumA = 18 freeSumB = 10
LeftA[2, 3] = 4
Compute Free(1, 3)
If select 2(leftmost) in Tree A #Subproblem: 35 Direction: Right
free(2, 3)(3) leftA(2, 3)(4)  b->getLeftmostForestNum() = 4 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 35
RightA[3, 3] set to 5
arightmost = 26
Compute Free(1, 3)
If select 3(rightmost) in Tree A #Subproblem: 26 Direction: Left
LeftB[1, 4] = 9
Compute Free(1, 3)
If select 4(leftmost) in Tree B #Subproblem: 32 Direction: Right
bleftmost = 32
RightB(1, 5) = 7
brightmost = 26
Compute Free(1, 3)
If select 5(rightmost) in Tree B #Subproblem: 26 Direction: Left
Free[1][3] = 26
FreeS(1, 3)
Keynode: 3 in Tree A
Direction: left
Leaf: 5
free[1][1] freeSumA = 31 freeSumB = 31
LeftA[2, 1] = 9
Compute Free(1, 1)
If select 2(leftmost) in Tree A #Subproblem: 71 Direction: Right
free(2, 1)(5) leftA(2, 1)(9)  b->getLeftmostForestNum() = 9 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 71
RightA[3, 1] set to 5
arightmost = 45
Compute Free(1, 1)
If select 3(rightmost) in Tree A #Subproblem: 45 Direction: Left
LeftB[1, 2] = 9
Compute Free(1, 1)
If select 2(leftmost) in Tree B #Subproblem: 71 Direction: Right
bleftmost = 71
bleftmost = 32
brightmost = 12 + 14 = 26
RightB(1, 3) = 26
brightmost = 45
Compute Free(1, 1)
If select 3(rightmost) in Tree B #Subproblem: 45 Direction: Left
Free[1][1] = 45
FreeS(1, 1)
Keynode: 3 in Tree A
Direction: left
Leaf: 5
Compute Free(1, 7)
If select 7 in Tree B #Subproblem: 5 Direction: Leftfree[1][7] freeSumA = 4 freeSumB = 0
LeftA[2, 7] = 1
Compute Free(1, 7)
If select 2(leftmost) in Tree A #Subproblem: 8 Direction: Right
free(2, 7)(1) leftA(2, 7)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 8
RightA[3, 7] set to 5
arightmost = 7
Compute Free(1, 7)
If select 3(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[1][7] = 5
FreeS(1, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(1, 8)
If select 8 in Tree B #Subproblem: 5 Direction: Leftfree[1][8] freeSumA = 4 freeSumB = 0
LeftA[2, 8] = 1
Compute Free(1, 8)
If select 2(leftmost) in Tree A #Subproblem: 8 Direction: Right
free(2, 8)(1) leftA(2, 8)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 8
RightA[3, 8] set to 5
arightmost = 7
Compute Free(1, 8)
If select 3(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[1][8] = 5
FreeS(1, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(1, 9)
If select 9 in Tree B #Subproblem: 5 Direction: Leftfree[1][9] freeSumA = 4 freeSumB = 0
LeftA[2, 9] = 1
Compute Free(1, 9)
If select 2(leftmost) in Tree A #Subproblem: 8 Direction: Right
free(2, 9)(1) leftA(2, 9)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 8
RightA[3, 9] set to 5
arightmost = 7
Compute Free(1, 9)
If select 3(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[1][9] = 5
FreeS(1, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[1][6] freeSumA = 26 freeSumB = 15
LeftA[2, 6] = 6
Compute Free(1, 6)
If select 2(leftmost) in Tree A #Subproblem: 52 Direction: Right
free(2, 6)(4) leftA(2, 6)(6)  b->getLeftmostForestNum() = 6 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 52
RightA[3, 6] set to 5
arightmost = 38
Compute Free(1, 6)
If select 3(rightmost) in Tree A #Subproblem: 38 Direction: Left
LeftB[1, 7] = 9
Compute Free(1, 6)
If select 7(leftmost) in Tree B #Subproblem: 46 Direction: Right
bleftmost = 46
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 23
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = 1 childrenSizeSumB[0] = 1
right = 27
Compute Free(1, 6)
If select 8 in Tree B #Subproblem: 42 Direction: Left
RightB(1, 9) = 7
brightmost = 38
Compute Free(1, 6)
If select 9(rightmost) in Tree B #Subproblem: 38 Direction: Left
Free[1][6] = 38
FreeS(1, 6)
Keynode: 3 in Tree A
Direction: left
Leaf: 5
free[1][0] freeSumA = 77 freeSumB = 83
LeftA[2, 0] = 20
Compute Free(1, 0)
If select 2(leftmost) in Tree A #Subproblem: 167 Direction: Right
free(2, 0)(10) leftA(2, 0)(20)  b->getLeftmostForestNum() = 20 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()4
aleftmost = 167
RightA[3, 0] set to 5
arightmost = 115
Compute Free(1, 0)
If select 3(rightmost) in Tree A #Subproblem: 115 Direction: Left
LeftB[1, 1] = 55
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 138 Direction: Right
bleftmost = 138
bleftmost = 46
childrenB 8 = 42
brightmost = 17 + 21 = 38
RightB(1, 6) = 38
brightmost = 125
Compute Free(1, 0)
If select 6(rightmost) in Tree B #Subproblem: 125 Direction: Left
Free[1][0] = 115
FreeS(1, 0)
Keynode: 3 in Tree A
Direction: left
Leaf: 5
Compute Free(7, 0)
If select 7 in Tree A #Subproblem: 10 Direction: LeftCompute Free(7, 1)
If select 7 in Tree A #Subproblem: 5 Direction: LeftCompute Free(7, 2)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[7][2] freeSumA = 0 freeSumB = 0
Free[7][2] = 1
FreeS(7, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(7, 3)
If select 7 in Tree A #Subproblem: 3 Direction: LeftCompute Free(7, 4)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[7][4] freeSumA = 0 freeSumB = 0
Free[7][4] = 1
FreeS(7, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(7, 5)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[7][5] freeSumA = 0 freeSumB = 0
Free[7][5] = 1
FreeS(7, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[7][3] freeSumA = 0 freeSumB = 2
LeftB[7, 4] = 1
Compute Free(7, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(7, 5) = 1
brightmost = 4
Compute Free(7, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[7][3] = 3
FreeS(7, 3)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
free[7][1] freeSumA = 0 freeSumB = 4
LeftB[7, 2] = 1
Compute Free(7, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(7, 3) = 4
brightmost = 7
Compute Free(7, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[7][1] = 5
FreeS(7, 1)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 6)
If select 7 in Tree A #Subproblem: 4 Direction: LeftCompute Free(7, 7)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[7][7] freeSumA = 0 freeSumB = 0
Free[7][7] = 1
FreeS(7, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(7, 8)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[7][8] freeSumA = 0 freeSumB = 0
Free[7][8] = 1
FreeS(7, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(7, 9)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[7][9] freeSumA = 0 freeSumB = 0
Free[7][9] = 1
FreeS(7, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[7][6] freeSumA = 0 freeSumB = 3
LeftB[7, 7] = 1
Compute Free(7, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(7, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(7, 9) = 1
brightmost = 6
Compute Free(7, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[7][6] = 4
FreeS(7, 6)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
free[7][0] freeSumA = 0 freeSumB = 9
LeftB[7, 1] = 7
Compute Free(7, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(7, 6) = 6
brightmost = 17
Compute Free(7, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[7][0] = 10
FreeS(7, 0)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(8, 0)
If select 8 in Tree A #Subproblem: 10 Direction: LeftCompute Free(8, 1)
If select 8 in Tree A #Subproblem: 5 Direction: LeftCompute Free(8, 2)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[8][2] freeSumA = 0 freeSumB = 0
Free[8][2] = 1
FreeS(8, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(8, 3)
If select 8 in Tree A #Subproblem: 3 Direction: LeftCompute Free(8, 4)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[8][4] freeSumA = 0 freeSumB = 0
Free[8][4] = 1
FreeS(8, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(8, 5)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[8][5] freeSumA = 0 freeSumB = 0
Free[8][5] = 1
FreeS(8, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[8][3] freeSumA = 0 freeSumB = 2
LeftB[8, 4] = 1
Compute Free(8, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(8, 5) = 1
brightmost = 4
Compute Free(8, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[8][3] = 3
FreeS(8, 3)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
free[8][1] freeSumA = 0 freeSumB = 4
LeftB[8, 2] = 1
Compute Free(8, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(8, 3) = 4
brightmost = 7
Compute Free(8, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[8][1] = 5
FreeS(8, 1)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 6)
If select 8 in Tree A #Subproblem: 4 Direction: LeftCompute Free(8, 7)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[8][7] freeSumA = 0 freeSumB = 0
Free[8][7] = 1
FreeS(8, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(8, 8)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[8][8] freeSumA = 0 freeSumB = 0
Free[8][8] = 1
FreeS(8, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(8, 9)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[8][9] freeSumA = 0 freeSumB = 0
Free[8][9] = 1
FreeS(8, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[8][6] freeSumA = 0 freeSumB = 3
LeftB[8, 7] = 1
Compute Free(8, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(8, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(8, 9) = 1
brightmost = 6
Compute Free(8, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[8][6] = 4
FreeS(8, 6)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
free[8][0] freeSumA = 0 freeSumB = 9
LeftB[8, 1] = 7
Compute Free(8, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(8, 6) = 6
brightmost = 17
Compute Free(8, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[8][0] = 10
FreeS(8, 0)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(6, 2)
If select 2 in Tree B #Subproblem: 3 Direction: Leftfree[6][2] freeSumA = 2 freeSumB = 0
LeftA[7, 2] = 1
Compute Free(6, 2)
If select 7(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(7, 2)(1) leftA(7, 2)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[8, 2] set to 8
arightmost = 4
Compute Free(6, 2)
If select 8(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[6][2] = 3
FreeS(6, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(6, 4)
If select 4 in Tree B #Subproblem: 3 Direction: Leftfree[6][4] freeSumA = 2 freeSumB = 0
LeftA[7, 4] = 1
Compute Free(6, 4)
If select 7(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(7, 4)(1) leftA(7, 4)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[8, 4] set to 8
arightmost = 4
Compute Free(6, 4)
If select 8(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[6][4] = 3
FreeS(6, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(6, 5)
If select 5 in Tree B #Subproblem: 3 Direction: Leftfree[6][5] freeSumA = 2 freeSumB = 0
LeftA[7, 5] = 1
Compute Free(6, 5)
If select 7(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(7, 5)(1) leftA(7, 5)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[8, 5] set to 8
arightmost = 4
Compute Free(6, 5)
If select 8(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[6][5] = 3
FreeS(6, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[6][3] freeSumA = 6 freeSumB = 6
LeftA[7, 3] = 4
Compute Free(6, 3)
If select 7(leftmost) in Tree A #Subproblem: 15 Direction: Right
free(7, 3)(3) leftA(7, 3)(4)  b->getLeftmostForestNum() = 4 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 15
RightA[8, 3] set to 8
arightmost = 15
Compute Free(6, 3)
If select 8(rightmost) in Tree A #Subproblem: 15 Direction: Left
LeftB[6, 4] = 4
Compute Free(6, 3)
If select 4(leftmost) in Tree B #Subproblem: 15 Direction: Right
bleftmost = 15
RightB(6, 5) = 4
brightmost = 15
Compute Free(6, 3)
If select 5(rightmost) in Tree B #Subproblem: 15 Direction: Left
Free[6][3] = 15
FreeS(6, 3)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
free[6][1] freeSumA = 10 freeSumB = 18
LeftA[7, 1] = 9
Compute Free(6, 1)
If select 7(leftmost) in Tree A #Subproblem: 32 Direction: Right
free(7, 1)(5) leftA(7, 1)(9)  b->getLeftmostForestNum() = 9 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 32
RightA[8, 1] set to 8
arightmost = 26
Compute Free(6, 1)
If select 8(rightmost) in Tree A #Subproblem: 26 Direction: Left
LeftB[6, 2] = 4
Compute Free(6, 1)
If select 2(leftmost) in Tree B #Subproblem: 35 Direction: Right
bleftmost = 35
bleftmost = 15
brightmost = 7 + 8 = 15
RightB(6, 3) = 15
brightmost = 26
Compute Free(6, 1)
If select 3(rightmost) in Tree B #Subproblem: 26 Direction: Left
Free[6][1] = 26
FreeS(6, 1)
Keynode: 8 in Tree A
Direction: left
Leaf: 8
Compute Free(6, 7)
If select 7 in Tree B #Subproblem: 3 Direction: Leftfree[6][7] freeSumA = 2 freeSumB = 0
LeftA[7, 7] = 1
Compute Free(6, 7)
If select 7(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(7, 7)(1) leftA(7, 7)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[8, 7] set to 8
arightmost = 4
Compute Free(6, 7)
If select 8(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[6][7] = 3
FreeS(6, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(6, 8)
If select 8 in Tree B #Subproblem: 3 Direction: Leftfree[6][8] freeSumA = 2 freeSumB = 0
LeftA[7, 8] = 1
Compute Free(6, 8)
If select 7(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(7, 8)(1) leftA(7, 8)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[8, 8] set to 8
arightmost = 4
Compute Free(6, 8)
If select 8(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[6][8] = 3
FreeS(6, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(6, 9)
If select 9 in Tree B #Subproblem: 3 Direction: Leftfree[6][9] freeSumA = 2 freeSumB = 0
LeftA[7, 9] = 1
Compute Free(6, 9)
If select 7(leftmost) in Tree A #Subproblem: 4 Direction: Right
free(7, 9)(1) leftA(7, 9)(1)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 4
RightA[8, 9] set to 8
arightmost = 4
Compute Free(6, 9)
If select 8(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[6][9] = 3
FreeS(6, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[6][6] freeSumA = 8 freeSumB = 9
LeftA[7, 6] = 6
Compute Free(6, 6)
If select 7(leftmost) in Tree A #Subproblem: 22 Direction: Right
free(7, 6)(4) leftA(7, 6)(6)  b->getLeftmostForestNum() = 6 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 22
RightA[8, 6] set to 8
arightmost = 22
Compute Free(6, 6)
If select 8(rightmost) in Tree A #Subproblem: 22 Direction: Left
LeftB[6, 7] = 4
Compute Free(6, 6)
If select 7(leftmost) in Tree B #Subproblem: 22 Direction: Right
bleftmost = 22
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 12
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = 1 childrenSizeSumB[0] = 1
right = 12
Compute Free(6, 6)
If select 8 in Tree B #Subproblem: 22 Direction: Left
RightB(6, 9) = 4
brightmost = 22
Compute Free(6, 6)
If select 9(rightmost) in Tree B #Subproblem: 22 Direction: Left
Free[6][6] = 22
FreeS(6, 6)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
free[6][0] freeSumA = 20 freeSumB = 48
LeftA[7, 0] = 20
Compute Free(6, 0)
If select 7(leftmost) in Tree A #Subproblem: 70 Direction: Right
free(7, 0)(10) leftA(7, 0)(20)  b->getLeftmostForestNum() = 20 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()2
aleftmost = 70
RightA[8, 0] set to 8
arightmost = 67
Compute Free(6, 0)
If select 8(rightmost) in Tree A #Subproblem: 67 Direction: Left
LeftB[6, 1] = 26
Compute Free(6, 0)
If select 1(leftmost) in Tree B #Subproblem: 68 Direction: Right
bleftmost = 68
bleftmost = 22
childrenB 8 = 22
brightmost = 10 + 12 = 22
RightB(6, 6) = 22
brightmost = 72
Compute Free(6, 0)
If select 6(rightmost) in Tree B #Subproblem: 72 Direction: Left
Free[6][0] = 67
FreeS(6, 0)
Keynode: 8 in Tree A
Direction: left
Leaf: 8
Compute Free(9, 0)
If select 9 in Tree A #Subproblem: 10 Direction: LeftCompute Free(9, 1)
If select 9 in Tree A #Subproblem: 5 Direction: LeftCompute Free(9, 2)
If select 9 in Tree A #Subproblem: 1 Direction: LeftCompute Free(9, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[9][2] freeSumA = 0 freeSumB = 0
Free[9][2] = 1
FreeS(9, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(9, 3)
If select 9 in Tree A #Subproblem: 3 Direction: LeftCompute Free(9, 4)
If select 9 in Tree A #Subproblem: 1 Direction: LeftCompute Free(9, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[9][4] freeSumA = 0 freeSumB = 0
Free[9][4] = 1
FreeS(9, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(9, 5)
If select 9 in Tree A #Subproblem: 1 Direction: LeftCompute Free(9, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[9][5] freeSumA = 0 freeSumB = 0
Free[9][5] = 1
FreeS(9, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[9][3] freeSumA = 0 freeSumB = 2
LeftB[9, 4] = 1
Compute Free(9, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(9, 5) = 1
brightmost = 4
Compute Free(9, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[9][3] = 3
FreeS(9, 3)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
free[9][1] freeSumA = 0 freeSumB = 4
LeftB[9, 2] = 1
Compute Free(9, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(9, 3) = 4
brightmost = 7
Compute Free(9, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[9][1] = 5
FreeS(9, 1)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 6)
If select 9 in Tree A #Subproblem: 4 Direction: LeftCompute Free(9, 7)
If select 9 in Tree A #Subproblem: 1 Direction: LeftCompute Free(9, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[9][7] freeSumA = 0 freeSumB = 0
Free[9][7] = 1
FreeS(9, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(9, 8)
If select 9 in Tree A #Subproblem: 1 Direction: LeftCompute Free(9, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[9][8] freeSumA = 0 freeSumB = 0
Free[9][8] = 1
FreeS(9, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(9, 9)
If select 9 in Tree A #Subproblem: 1 Direction: LeftCompute Free(9, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[9][9] freeSumA = 0 freeSumB = 0
Free[9][9] = 1
FreeS(9, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[9][6] freeSumA = 0 freeSumB = 3
LeftB[9, 7] = 1
Compute Free(9, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(9, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(9, 9) = 1
brightmost = 6
Compute Free(9, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[9][6] = 4
FreeS(9, 6)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
free[9][0] freeSumA = 0 freeSumB = 9
LeftB[9, 1] = 7
Compute Free(9, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(9, 6) = 6
brightmost = 17
Compute Free(9, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[9][0] = 10
FreeS(9, 0)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(10, 0)
If select 10 in Tree A #Subproblem: 10 Direction: LeftCompute Free(10, 1)
If select 10 in Tree A #Subproblem: 5 Direction: LeftCompute Free(10, 2)
If select 10 in Tree A #Subproblem: 1 Direction: LeftCompute Free(10, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[10][2] freeSumA = 0 freeSumB = 0
Free[10][2] = 1
FreeS(10, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(10, 3)
If select 10 in Tree A #Subproblem: 3 Direction: LeftCompute Free(10, 4)
If select 10 in Tree A #Subproblem: 1 Direction: LeftCompute Free(10, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[10][4] freeSumA = 0 freeSumB = 0
Free[10][4] = 1
FreeS(10, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(10, 5)
If select 10 in Tree A #Subproblem: 1 Direction: LeftCompute Free(10, 5)
If select 5 in Tree B #Subproblem: 1 Direction: Leftfree[10][5] freeSumA = 0 freeSumB = 0
Free[10][5] = 1
FreeS(10, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[10][3] freeSumA = 0 freeSumB = 2
LeftB[10, 4] = 1
Compute Free(10, 3)
If select 4(leftmost) in Tree B #Subproblem: 4 Direction: Right
bleftmost = 4
RightB(10, 5) = 1
brightmost = 4
Compute Free(10, 3)
If select 5(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[10][3] = 3
FreeS(10, 3)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
free[10][1] freeSumA = 0 freeSumB = 4
LeftB[10, 2] = 1
Compute Free(10, 1)
If select 2(leftmost) in Tree B #Subproblem: 8 Direction: Right
bleftmost = 8
bleftmost = 4
brightmost = 2 + 2 = 4
RightB(10, 3) = 4
brightmost = 7
Compute Free(10, 1)
If select 3(rightmost) in Tree B #Subproblem: 7 Direction: Left
Free[10][1] = 5
FreeS(10, 1)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 6)
If select 10 in Tree A #Subproblem: 4 Direction: LeftCompute Free(10, 7)
If select 10 in Tree A #Subproblem: 1 Direction: LeftCompute Free(10, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Leftfree[10][7] freeSumA = 0 freeSumB = 0
Free[10][7] = 1
FreeS(10, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(10, 8)
If select 10 in Tree A #Subproblem: 1 Direction: LeftCompute Free(10, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Leftfree[10][8] freeSumA = 0 freeSumB = 0
Free[10][8] = 1
FreeS(10, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(10, 9)
If select 10 in Tree A #Subproblem: 1 Direction: LeftCompute Free(10, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Leftfree[10][9] freeSumA = 0 freeSumB = 0
Free[10][9] = 1
FreeS(10, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[10][6] freeSumA = 0 freeSumB = 3
LeftB[10, 7] = 1
Compute Free(10, 6)
If select 7(leftmost) in Tree B #Subproblem: 6 Direction: Right
bleftmost = 6
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 3
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = -1 childrenSizeSumB[0] = 1
right = 3
Compute Free(10, 6)
If select 8 in Tree B #Subproblem: 6 Direction: Left
RightB(10, 9) = 1
brightmost = 6
Compute Free(10, 6)
If select 9(rightmost) in Tree B #Subproblem: 6 Direction: Left
Free[10][6] = 4
FreeS(10, 6)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
free[10][0] freeSumA = 0 freeSumB = 9
LeftB[10, 1] = 7
Compute Free(10, 0)
If select 1(leftmost) in Tree B #Subproblem: 16 Direction: Right
bleftmost = 16
bleftmost = 6
childrenB 8 = 6
brightmost = 3 + 3 = 6
RightB(10, 6) = 6
brightmost = 17
Compute Free(10, 0)
If select 6(rightmost) in Tree B #Subproblem: 17 Direction: Left
Free[10][0] = 10
FreeS(10, 0)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(0, 2)
If select 2 in Tree B #Subproblem: 11 Direction: Leftfree[0][2] freeSumA = 10 freeSumB = 0
aleftmost = 4 + 4 = 8
LeftA[1, 2] = 7
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 18 Direction: Right
free(1, 2)(5) leftA(1, 2)(7)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 18
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 8
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 8
Compute Free(0, 2)
If select 6 in Tree A #Subproblem: 19 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 10
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 10
Compute Free(0, 2)
If select 9 in Tree A #Subproblem: 20 Direction: Left
RightA[10, 2] set to 10
arightmost = 20
Compute Free(0, 2)
If select 10(rightmost) in Tree A #Subproblem: 20 Direction: Left
Free[0][2] = 11
FreeS(0, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(0, 4)
If select 4 in Tree B #Subproblem: 11 Direction: Leftfree[0][4] freeSumA = 10 freeSumB = 0
aleftmost = 4 + 4 = 8
LeftA[1, 4] = 7
Compute Free(0, 4)
If select 1(leftmost) in Tree A #Subproblem: 18 Direction: Right
free(1, 4)(5) leftA(1, 4)(7)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 18
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 8
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 8
Compute Free(0, 4)
If select 6 in Tree A #Subproblem: 19 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 10
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 10
Compute Free(0, 4)
If select 9 in Tree A #Subproblem: 20 Direction: Left
RightA[10, 4] set to 10
arightmost = 20
Compute Free(0, 4)
If select 10(rightmost) in Tree A #Subproblem: 20 Direction: Left
Free[0][4] = 11
FreeS(0, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
Compute Free(0, 5)
If select 5 in Tree B #Subproblem: 11 Direction: Leftfree[0][5] freeSumA = 10 freeSumB = 0
aleftmost = 4 + 4 = 8
LeftA[1, 5] = 7
Compute Free(0, 5)
If select 1(leftmost) in Tree A #Subproblem: 18 Direction: Right
free(1, 5)(5) leftA(1, 5)(7)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 18
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 8
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 8
Compute Free(0, 5)
If select 6 in Tree A #Subproblem: 19 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 10
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 10
Compute Free(0, 5)
If select 9 in Tree A #Subproblem: 20 Direction: Left
RightA[10, 5] set to 10
arightmost = 20
Compute Free(0, 5)
If select 10(rightmost) in Tree A #Subproblem: 20 Direction: Left
Free[0][5] = 11
FreeS(0, 5)
Keynode: 5 in TreeB
Direction: rightLeaf: 5
free[0][3] freeSumA = 47 freeSumB = 22
aleftmost = 19 + 16 = 35
LeftA[1, 3] = 26
Compute Free(0, 3)
If select 1(leftmost) in Tree A #Subproblem: 71 Direction: Right
free(1, 3)(26) leftA(1, 3)(26)  b->getLeftmostForestNum() = 4 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 71
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 32
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 32
Compute Free(0, 3)
If select 6 in Tree A #Subproblem: 79 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 40
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 40
Compute Free(0, 3)
If select 9 in Tree A #Subproblem: 88 Direction: Left
RightA[10, 3] set to 10
arightmost = 88
Compute Free(0, 3)
If select 10(rightmost) in Tree A #Subproblem: 88 Direction: Left
LeftB[0, 4] = 21
Compute Free(0, 3)
If select 4(leftmost) in Tree B #Subproblem: 74 Direction: Right
bleftmost = 74
RightB(0, 5) = 23
brightmost = 80
Compute Free(0, 3)
If select 5(rightmost) in Tree B #Subproblem: 80 Direction: Left
Free[0][3] = 71
FreeS(0, 3)
Keynode: 1 in Tree A
Direction: rightLeaf: 4
free[0][1] freeSumA = 81 freeSumB = 82
aleftmost = 35 + 36 = 71
LeftA[1, 1] = 55
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 145 Direction: Right
free(1, 1)(45) leftA(1, 1)(55)  b->getLeftmostForestNum() = 9 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 145
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 60
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 72
Compute Free(0, 1)
If select 6 in Tree A #Subproblem: 147 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 72
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 90
Compute Free(0, 1)
If select 9 in Tree A #Subproblem: 157 Direction: Left
RightA[10, 1] set to 10
arightmost = 153
Compute Free(0, 1)
If select 10(rightmost) in Tree A #Subproblem: 153 Direction: Left
LeftB[0, 2] = 21
Compute Free(0, 1)
If select 2(leftmost) in Tree B #Subproblem: 176 Direction: Right
bleftmost = 176
bleftmost = 155
brightmost = 34 + 46 = 80
RightB(0, 3) = 80
brightmost = 137
Compute Free(0, 1)
If select 3(rightmost) in Tree B #Subproblem: 137 Direction: Left
Free[0][1] = 137
FreeS(0, 1)
Keynode: 3 in TreeB
Direction: left
Leaf: 5
Compute Free(0, 7)
If select 7 in Tree B #Subproblem: 11 Direction: Leftfree[0][7] freeSumA = 10 freeSumB = 0
aleftmost = 4 + 4 = 8
LeftA[1, 7] = 7
Compute Free(0, 7)
If select 1(leftmost) in Tree A #Subproblem: 18 Direction: Right
free(1, 7)(5) leftA(1, 7)(7)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 18
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 8
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 8
Compute Free(0, 7)
If select 6 in Tree A #Subproblem: 19 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 10
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 10
Compute Free(0, 7)
If select 9 in Tree A #Subproblem: 20 Direction: Left
RightA[10, 7] set to 10
arightmost = 20
Compute Free(0, 7)
If select 10(rightmost) in Tree A #Subproblem: 20 Direction: Left
Free[0][7] = 11
FreeS(0, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(0, 8)
If select 8 in Tree B #Subproblem: 11 Direction: Leftfree[0][8] freeSumA = 10 freeSumB = 0
aleftmost = 4 + 4 = 8
LeftA[1, 8] = 7
Compute Free(0, 8)
If select 1(leftmost) in Tree A #Subproblem: 18 Direction: Right
free(1, 8)(5) leftA(1, 8)(7)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 18
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 8
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 8
Compute Free(0, 8)
If select 6 in Tree A #Subproblem: 19 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 10
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 10
Compute Free(0, 8)
If select 9 in Tree A #Subproblem: 20 Direction: Left
RightA[10, 8] set to 10
arightmost = 20
Compute Free(0, 8)
If select 10(rightmost) in Tree A #Subproblem: 20 Direction: Left
Free[0][8] = 11
FreeS(0, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(0, 9)
If select 9 in Tree B #Subproblem: 11 Direction: Leftfree[0][9] freeSumA = 10 freeSumB = 0
aleftmost = 4 + 4 = 8
LeftA[1, 9] = 7
Compute Free(0, 9)
If select 1(leftmost) in Tree A #Subproblem: 18 Direction: Right
free(1, 9)(5) leftA(1, 9)(7)  b->getLeftmostForestNum() = 1 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 18
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 8
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 8
Compute Free(0, 9)
If select 6 in Tree A #Subproblem: 19 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 10
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 10
Compute Free(0, 9)
If select 9 in Tree A #Subproblem: 20 Direction: Left
RightA[10, 9] set to 10
arightmost = 20
Compute Free(0, 9)
If select 10(rightmost) in Tree A #Subproblem: 20 Direction: Left
Free[0][9] = 11
FreeS(0, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
free[0][6] freeSumA = 68 freeSumB = 33
aleftmost = 28 + 24 = 52
LeftA[1, 6] = 43
Compute Free(0, 6)
If select 1(leftmost) in Tree A #Subproblem: 109 Direction: Right
free(1, 6)(38) leftA(1, 6)(43)  b->getLeftmostForestNum() = 6 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 109
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 50
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 53
Compute Free(0, 6)
If select 6 in Tree A #Subproblem: 121 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 61
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 68
Compute Free(0, 6)
If select 9 in Tree A #Subproblem: 132 Direction: Left
RightA[10, 6] set to 10
arightmost = 130
Compute Free(0, 6)
If select 10(rightmost) in Tree A #Subproblem: 130 Direction: Left
LeftB[0, 7] = 21
Compute Free(0, 6)
If select 7(leftmost) in Tree B #Subproblem: 106 Direction: Right
bleftmost = 106
1 + childrenSizeSumB[1] = 2 childrenSizeSumB[2] - childrenSizeSumB[1] = 1
left = 94
1 + childrenSizeSumB[2] - childrenSizeSumB[1] = 9 childrenSizeSumB[0] = 1
right = 90
Compute Free(0, 6)
If select 8 in Tree B #Subproblem: 160 Direction: Right
RightB(0, 9) = 23
brightmost = 114
Compute Free(0, 6)
If select 9(rightmost) in Tree B #Subproblem: 114 Direction: Left
Free[0][6] = 106
FreeS(0, 6)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
free[0][0] freeSumA = 202 freeSumB = 243
aleftmost = 87 + 80 = 167
LeftA[1, 0] = 167
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 374 Direction: Right
free(1, 0)(115) leftA(1, 0)(167)  b->getLeftmostForestNum() = 20 a->getSubTreeSize() - childrenA[0]->getSubTreeSize()6
aleftmost = 374
1 + childrenSizeSumA[1] = 6 childrenSizeSumA[3] - childrenSizeSumA[1] = 2
left = 188
1 + childrenSizeSumA[3] - childrenSizeSumA[1] = 3 childrenSizeSumA[0] = 5
right = 245
Compute Free(0, 0)
If select 6 in Tree A #Subproblem: 444 Direction: Left
1 + childrenSizeSumA[2] = 9 childrenSizeSumA[3] - childrenSizeSumA[2] = 1
left = 208
1 + childrenSizeSumA[3] - childrenSizeSumA[2] = 2 childrenSizeSumA[1] = 8
right = 336
Compute Free(0, 0)
If select 9 in Tree A #Subproblem: 437 Direction: Left
RightA[10, 0] set to 10
arightmost = 401
Compute Free(0, 0)
If select 10(rightmost) in Tree A #Subproblem: 401 Direction: Left
LeftB[0, 1] = 176
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 387 Direction: Right
bleftmost = 387
bleftmost = 214
childrenB 8 = 164
brightmost = 45 + 69 = 114
RightB(0, 6) = 114
brightmost = 389
Compute Free(0, 0)
If select 6(rightmost) in Tree B #Subproblem: 389 Direction: Left
Free[0][0] = 374
FreeS(0, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 2
RESULT
2 in A 5 in B 2 in B 4 in A 4 in B 5 in B 7 in B 7 in B 8 in B 9 in B 
5 in A 5 in A 2 in B 5 in A 4 in B 5 in B 5 in A 7 in B 8 in B 9 in B 
2 in A 2 in A 2 in B 2 in A 4 in B 5 in B 2 in A 7 in B 8 in B 9 in B 
5 in A 5 in A 2 in B 4 in A 4 in B 5 in B 4 in A 7 in B 8 in B 9 in B 
4 in A 4 in A 2 in B 4 in A 4 in B 5 in B 4 in A 7 in B 8 in B 9 in B 
5 in A 5 in A 2 in B 5 in A 4 in B 5 in B 5 in A 7 in B 8 in B 9 in B 
8 in A 8 in A 2 in B 7 in A 4 in B 5 in B 7 in A 7 in B 8 in B 9 in B 
7 in A 7 in A 2 in B 7 in A 4 in B 5 in B 7 in A 7 in B 8 in B 9 in B 
8 in A 8 in A 2 in B 8 in A 4 in B 5 in B 8 in A 7 in B 8 in B 9 in B 
9 in A 9 in A 2 in B 9 in A 4 in B 5 in B 9 in A 7 in B 8 in B 9 in B 
10 in A 10 in A 2 in B 10 in A 4 in B 5 in B 10 in A 7 in B 8 in B 9 in B 
Free
374 137 11 71 11 11 106 11 11 11 
115 45 5 26 5 5 38 5 5 5 
10 5 1 3 1 1 4 1 1 1 
67 26 3 15 3 3 22 3 3 3 
10 5 1 3 1 1 4 1 1 1 
10 5 1 3 1 1 4 1 1 1 
67 26 3 15 3 3 22 3 3 3 
10 5 1 3 1 1 4 1 1 1 
10 5 1 3 1 1 4 1 1 1 
10 5 1 3 1 1 4 1 1 1 
10 5 1 3 1 1 4 1 1 1 

LeftA
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
167 55 7 26 7 7 43 7 7 7 
20 9 1 4 1 1 6 1 1 1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
20 9 1 4 1 1 6 1 1 1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
20 9 1 4 1 1 6 1 1 1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 

RightA
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
67 26 4 15 4 4 22 4 4 4 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
19 7 1 4 1 1 6 1 1 1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
19 7 1 4 1 1 6 1 1 1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
19 7 1 4 1 1 6 1 1 1 

AllA
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 
121 32 4 15 4 4 25 4 4 4 
37 9 1 4 1 1 7 1 1 1 
37 9 1 4 1 1 7 1 1 1 
121 32 4 15 4 4 25 4 4 4 
37 9 1 4 1 1 7 1 1 1 
37 9 1 4 1 1 7 1 1 1 
37 9 1 4 1 1 7 1 1 1 
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 

LeftB
-1 176 21 -1 21 -1 -1 21 -1 -1 
-1 55 9 -1 9 -1 -1 9 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 
-1 26 4 -1 4 -1 -1 4 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 
-1 26 4 -1 4 -1 -1 4 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 
-1 7 1 -1 1 -1 -1 1 -1 -1 

RightB
-1 -1 -1 80 -1 23 114 -1 -1 23 
-1 -1 -1 26 -1 7 38 -1 -1 7 
-1 -1 -1 4 -1 1 6 -1 -1 1 
-1 -1 -1 15 -1 4 22 -1 -1 4 
-1 -1 -1 4 -1 1 6 -1 -1 1 
-1 -1 -1 4 -1 1 6 -1 -1 1 
-1 -1 -1 15 -1 4 22 -1 -1 4 
-1 -1 -1 4 -1 1 6 -1 -1 1 
-1 -1 -1 4 -1 1 6 -1 -1 1 
-1 -1 -1 4 -1 1 6 -1 -1 1 
-1 -1 -1 4 -1 1 6 -1 -1 1 

AllB
-1 -1 -1 155 48 48 -1 48 48 -1 
-1 -1 -1 32 9 9 -1 9 9 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 
-1 -1 -1 15 4 4 -1 4 4 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 
-1 -1 -1 15 4 4 -1 4 4 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 
-1 -1 -1 4 1 1 -1 1 1 -1 

TreeDistance(0, 5)
Compute forestdist(2, 5)
forestdist[1, 1] = 1.000000
Compute forestdist(4, 5)
forestdist[2, 1] = 2.000000
Compute forestdist(5, 5)
forestdist[3, 1] = 2.000000
Compute forestdist(3, 5)
forestdist[4, 1] = 3.000000
Compute forestdist(1, 5)
forestdist[5, 1] = 4.000000
Compute forestdist(7, 5)
forestdist[6, 1] = 5.000000
Compute forestdist(8, 5)
forestdist[7, 1] = 6.000000
Compute forestdist(6, 5)
forestdist[8, 1] = 7.000000
Compute forestdist(9, 5)
forestdist[9, 1] = 8.000000
Compute forestdist(10, 5)
forestdist[10, 1] = 9.000000
Compute forestdist(0, 5)
forestdist[11, 1] = 10.000000
TreeDistance(0, 3)
Compute forestdist(2, 4)
forestdist[1, 1] = 0.000000
Compute forestdist(2, 5)
forestdist[1, 2] = 1.000000
Compute forestdist(2, 3)
forestdist[1, 3] = 2.000000
Compute forestdist(4, 4)
forestdist[2, 1] = 1.000000
Compute forestdist(4, 5)
forestdist[2, 2] = 1.000000
Compute forestdist(4, 3)
forestdist[2, 3] = 2.000000
Compute forestdist(5, 4)
forestdist[3, 1] = 2.000000
Compute forestdist(5, 5)
forestdist[3, 2] = 1.000000
Compute forestdist(5, 3)
forestdist[3, 3] = 2.000000
Compute forestdist(3, 4)
forestdist[4, 1] = 3.000000
Compute forestdist(3, 5)
forestdist[4, 2] = 2.000000
Compute forestdist(3, 3)
forestdist[4, 3] = 2.000000
Compute forestdist(1, 4)
forestdist[5, 1] = 4.000000
Compute forestdist(1, 5)
forestdist[5, 2] = 3.000000
Compute forestdist(1, 3)
forestdist[5, 3] = 3.000000
Compute forestdist(7, 4)
forestdist[6, 1] = 5.000000
Compute forestdist(7, 5)
forestdist[6, 2] = 4.000000
Compute forestdist(7, 3)
forestdist[6, 3] = 4.000000
Compute forestdist(8, 4)
forestdist[7, 1] = 6.000000
Compute forestdist(8, 5)
forestdist[7, 2] = 5.000000
Compute forestdist(8, 3)
forestdist[7, 3] = 5.000000
Compute forestdist(6, 4)
forestdist[8, 1] = 7.000000
Compute forestdist(6, 5)
forestdist[8, 2] = 6.000000
Compute forestdist(6, 3)
forestdist[8, 3] = 6.000000
Compute forestdist(9, 4)
forestdist[9, 1] = 8.000000
Compute forestdist(9, 5)
forestdist[9, 2] = 7.000000
Compute forestdist(9, 3)
forestdist[9, 3] = 7.000000
Compute forestdist(10, 4)
forestdist[10, 1] = 9.000000
Compute forestdist(10, 5)
forestdist[10, 2] = 8.000000
Compute forestdist(10, 3)
forestdist[10, 3] = 8.000000
Compute forestdist(0, 4)
forestdist[11, 1] = 10.000000
Compute forestdist(0, 5)
forestdist[11, 2] = 9.000000
Compute forestdist(0, 3)
forestdist[11, 3] = 9.000000
TreeDistance(0, 1)
Compute forestdist(2, 2)
forestdist[1, 1] = 0.000000
Compute forestdist(2, 4)
forestdist[1, 2] = 1.000000
Compute forestdist(2, 5)
forestdist[1, 3] = 2.000000
Compute forestdist(2, 3)
forestdist[1, 4] = 3.000000
Compute forestdist(2, 1)
forestdist[1, 5] = 4.000000
Compute forestdist(4, 2)
forestdist[2, 1] = 1.000000
Compute forestdist(4, 4)
forestdist[2, 2] = 0.000000
Compute forestdist(4, 5)
forestdist[2, 3] = 1.000000
Compute forestdist(4, 3)
forestdist[2, 4] = 2.000000
Compute forestdist(4, 1)
forestdist[2, 5] = 3.000000
Compute forestdist(5, 2)
forestdist[3, 1] = 2.000000
Compute forestdist(5, 4)
forestdist[3, 2] = 1.000000
Compute forestdist(5, 5)
forestdist[3, 3] = 0.000000
Compute forestdist(5, 3)
forestdist[3, 4] = 1.000000
Compute forestdist(5, 1)
forestdist[3, 5] = 2.000000
Compute forestdist(3, 2)
forestdist[4, 1] = 3.000000
Compute forestdist(3, 4)
forestdist[4, 2] = 2.000000
Compute forestdist(3, 5)
forestdist[4, 3] = 1.000000
Compute forestdist(3, 3)
forestdist[4, 4] = 1.000000
Compute forestdist(3, 1)
forestdist[4, 5] = 1.000000
Compute forestdist(1, 2)
forestdist[5, 1] = 4.000000
Compute forestdist(1, 4)
forestdist[5, 2] = 3.000000
Compute forestdist(1, 5)
forestdist[5, 3] = 2.000000
Compute forestdist(1, 3)
forestdist[5, 4] = 2.000000
Compute forestdist(1, 1)
forestdist[5, 5] = 1.000000
Compute forestdist(7, 2)
forestdist[6, 1] = 5.000000
Compute forestdist(7, 4)
forestdist[6, 2] = 4.000000
Compute forestdist(7, 5)
forestdist[6, 3] = 3.000000
Compute forestdist(7, 3)
forestdist[6, 4] = 3.000000
Compute forestdist(7, 1)
forestdist[6, 5] = 2.000000
Compute forestdist(8, 2)
forestdist[7, 1] = 6.000000
Compute forestdist(8, 4)
forestdist[7, 2] = 5.000000
Compute forestdist(8, 5)
forestdist[7, 3] = 4.000000
Compute forestdist(8, 3)
forestdist[7, 4] = 4.000000
Compute forestdist(8, 1)
forestdist[7, 5] = 3.000000
Compute forestdist(6, 2)
forestdist[8, 1] = 7.000000
Compute forestdist(6, 4)
forestdist[8, 2] = 6.000000
Compute forestdist(6, 5)
forestdist[8, 3] = 5.000000
Compute forestdist(6, 3)
forestdist[8, 4] = 5.000000
Compute forestdist(6, 1)
forestdist[8, 5] = 4.000000
Compute forestdist(9, 2)
forestdist[9, 1] = 8.000000
Compute forestdist(9, 4)
forestdist[9, 2] = 7.000000
Compute forestdist(9, 5)
forestdist[9, 3] = 6.000000
Compute forestdist(9, 3)
forestdist[9, 4] = 6.000000
Compute forestdist(9, 1)
forestdist[9, 5] = 5.000000
Compute forestdist(10, 2)
forestdist[10, 1] = 9.000000
Compute forestdist(10, 4)
forestdist[10, 2] = 8.000000
Compute forestdist(10, 5)
forestdist[10, 3] = 7.000000
Compute forestdist(10, 3)
forestdist[10, 4] = 7.000000
Compute forestdist(10, 1)
forestdist[10, 5] = 6.000000
Compute forestdist(0, 2)
forestdist[11, 1] = 10.000000
Compute forestdist(0, 4)
forestdist[11, 2] = 9.000000
Compute forestdist(0, 5)
forestdist[11, 3] = 8.000000
Compute forestdist(0, 3)
forestdist[11, 4] = 8.000000
Compute forestdist(0, 1)
forestdist[11, 5] = 7.000000
TreeDistance(0, 8)
Compute forestdist(2, 8)
forestdist[1, 1] = 0.000000
Compute forestdist(4, 8)
forestdist[2, 1] = 1.000000
Compute forestdist(5, 8)
forestdist[3, 1] = 2.000000
Compute forestdist(3, 8)
forestdist[4, 1] = 3.000000
Compute forestdist(1, 8)
forestdist[5, 1] = 4.000000
Compute forestdist(7, 8)
forestdist[6, 1] = 5.000000
Compute forestdist(8, 8)
forestdist[7, 1] = 6.000000
Compute forestdist(6, 8)
forestdist[8, 1] = 7.000000
Compute forestdist(9, 8)
forestdist[9, 1] = 8.000000
Compute forestdist(10, 8)
forestdist[10, 1] = 9.000000
Compute forestdist(0, 8)
forestdist[11, 1] = 10.000000
TreeDistance(0, 7)
Compute forestdist(2, 7)
forestdist[1, 1] = 1.000000
Compute forestdist(4, 7)
forestdist[2, 1] = 2.000000
Compute forestdist(5, 7)
forestdist[3, 1] = 2.000000
Compute forestdist(3, 7)
forestdist[4, 1] = 3.000000
Compute forestdist(1, 7)
forestdist[5, 1] = 4.000000
Compute forestdist(7, 7)
forestdist[6, 1] = 5.000000
Compute forestdist(8, 7)
forestdist[7, 1] = 6.000000
Compute forestdist(6, 7)
forestdist[8, 1] = 7.000000
Compute forestdist(9, 7)
forestdist[9, 1] = 8.000000
Compute forestdist(10, 7)
forestdist[10, 1] = 9.000000
Compute forestdist(0, 7)
forestdist[11, 1] = 10.000000
TreeDistance(0, 0)
Compute forestdist(2, 2)
forestdist[1, 1] = 0.000000
Compute forestdist(2, 4)
forestdist[1, 2] = 1.000000
Compute forestdist(2, 5)
forestdist[1, 3] = 2.000000
Compute forestdist(2, 3)
forestdist[1, 4] = 3.000000
Compute forestdist(2, 1)
forestdist[1, 5] = 4.000000
Compute forestdist(2, 7)
forestdist[1, 6] = 5.000000
Compute forestdist(2, 8)
forestdist[1, 7] = 6.000000
Compute forestdist(2, 9)
forestdist[1, 8] = 7.000000
Compute forestdist(2, 6)
forestdist[1, 9] = 8.000000
Compute forestdist(2, 0)
forestdist[1, 10] = 9.000000
Compute forestdist(4, 2)
forestdist[2, 1] = 1.000000
Compute forestdist(4, 4)
forestdist[2, 2] = 0.000000
Compute forestdist(4, 5)
forestdist[2, 3] = 1.000000
Compute forestdist(4, 3)
forestdist[2, 4] = 2.000000
Compute forestdist(4, 1)
forestdist[2, 5] = 3.000000
Compute forestdist(4, 7)
forestdist[2, 6] = 4.000000
Compute forestdist(4, 8)
forestdist[2, 7] = 5.000000
Compute forestdist(4, 9)
forestdist[2, 8] = 6.000000
Compute forestdist(4, 6)
forestdist[2, 9] = 7.000000
Compute forestdist(4, 0)
forestdist[2, 10] = 8.000000
Compute forestdist(5, 2)
forestdist[3, 1] = 2.000000
Compute forestdist(5, 4)
forestdist[3, 2] = 1.000000
Compute forestdist(5, 5)
forestdist[3, 3] = 0.000000
Compute forestdist(5, 3)
forestdist[3, 4] = 1.000000
Compute forestdist(5, 1)
forestdist[3, 5] = 2.000000
Compute forestdist(5, 7)
forestdist[3, 6] = 3.000000
Compute forestdist(5, 8)
forestdist[3, 7] = 4.000000
Compute forestdist(5, 9)
forestdist[3, 8] = 5.000000
Compute forestdist(5, 6)
forestdist[3, 9] = 6.000000
Compute forestdist(5, 0)
forestdist[3, 10] = 7.000000
Compute forestdist(3, 2)
forestdist[4, 1] = 3.000000
Compute forestdist(3, 4)
forestdist[4, 2] = 2.000000
Compute forestdist(3, 5)
forestdist[4, 3] = 1.000000
Compute forestdist(3, 3)
forestdist[4, 4] = 1.000000
Compute forestdist(3, 1)
forestdist[4, 5] = 1.000000
Compute forestdist(3, 7)
forestdist[4, 6] = 2.000000
Compute forestdist(3, 8)
forestdist[4, 7] = 3.000000
Compute forestdist(3, 9)
forestdist[4, 8] = 4.000000
Compute forestdist(3, 6)
forestdist[4, 9] = 4.000000
Compute forestdist(3, 0)
forestdist[4, 10] = 2.000000
Compute forestdist(1, 2)
forestdist[5, 1] = 4.000000
Compute forestdist(1, 4)
forestdist[5, 2] = 3.000000
Compute forestdist(1, 5)
forestdist[5, 3] = 2.000000
Compute forestdist(1, 3)
forestdist[5, 4] = 2.000000
Compute forestdist(1, 1)
forestdist[5, 5] = 1.000000
Compute forestdist(1, 7)
forestdist[5, 6] = 2.000000
Compute forestdist(1, 8)
forestdist[5, 7] = 3.000000
Compute forestdist(1, 9)
forestdist[5, 8] = 4.000000
Compute forestdist(1, 6)
forestdist[5, 9] = 5.000000
Compute forestdist(1, 0)
forestdist[5, 10] = 3.000000
Compute forestdist(7, 2)
forestdist[6, 1] = 5.000000
Compute forestdist(7, 4)
forestdist[6, 2] = 4.000000
Compute forestdist(7, 5)
forestdist[6, 3] = 3.000000
Compute forestdist(7, 3)
forestdist[6, 4] = 3.000000
Compute forestdist(7, 1)
forestdist[6, 5] = 2.000000
Compute forestdist(7, 7)
forestdist[6, 6] = 2.000000
Compute forestdist(7, 8)
forestdist[6, 7] = 2.000000
Compute forestdist(7, 9)
forestdist[6, 8] = 3.000000
Compute forestdist(7, 6)
forestdist[6, 9] = 4.000000
Compute forestdist(7, 0)
forestdist[6, 10] = 4.000000
Compute forestdist(8, 2)
forestdist[7, 1] = 6.000000
Compute forestdist(8, 4)
forestdist[7, 2] = 5.000000
Compute forestdist(8, 5)
forestdist[7, 3] = 4.000000
Compute forestdist(8, 3)
forestdist[7, 4] = 4.000000
Compute forestdist(8, 1)
forestdist[7, 5] = 3.000000
Compute forestdist(8, 7)
forestdist[7, 6] = 2.000000
Compute forestdist(8, 8)
forestdist[7, 7] = 3.000000
Compute forestdist(8, 9)
forestdist[7, 8] = 3.000000
Compute forestdist(8, 6)
forestdist[7, 9] = 4.000000
Compute forestdist(8, 0)
forestdist[7, 10] = 5.000000
Compute forestdist(6, 2)
forestdist[8, 1] = 7.000000
Compute forestdist(6, 4)
forestdist[8, 2] = 6.000000
Compute forestdist(6, 5)
forestdist[8, 3] = 5.000000
Compute forestdist(6, 3)
forestdist[8, 4] = 5.000000
Compute forestdist(6, 1)
forestdist[8, 5] = 4.000000
Compute forestdist(6, 7)
forestdist[8, 6] = 3.000000
Compute forestdist(6, 8)
forestdist[8, 7] = 4.000000
Compute forestdist(6, 9)
forestdist[8, 8] = 4.000000
Compute forestdist(6, 6)
forestdist[8, 9] = 1.000000
Compute forestdist(6, 0)
forestdist[8, 10] = 2.000000
Compute forestdist(9, 2)
forestdist[9, 1] = 8.000000
Compute forestdist(9, 4)
forestdist[9, 2] = 7.000000
Compute forestdist(9, 5)
forestdist[9, 3] = 6.000000
Compute forestdist(9, 3)
forestdist[9, 4] = 6.000000
Compute forestdist(9, 1)
forestdist[9, 5] = 5.000000
Compute forestdist(9, 7)
forestdist[9, 6] = 4.000000
Compute forestdist(9, 8)
forestdist[9, 7] = 3.000000
Compute forestdist(9, 9)
forestdist[9, 8] = 4.000000
Compute forestdist(9, 6)
forestdist[9, 9] = 2.000000
Compute forestdist(9, 0)
forestdist[9, 10] = 3.000000
Compute forestdist(10, 2)
forestdist[10, 1] = 9.000000
Compute forestdist(10, 4)
forestdist[10, 2] = 8.000000
Compute forestdist(10, 5)
forestdist[10, 3] = 7.000000
Compute forestdist(10, 3)
forestdist[10, 4] = 7.000000
Compute forestdist(10, 1)
forestdist[10, 5] = 6.000000
Compute forestdist(10, 7)
forestdist[10, 6] = 5.000000
Compute forestdist(10, 8)
forestdist[10, 7] = 4.000000
Compute forestdist(10, 9)
forestdist[10, 8] = 3.000000
Compute forestdist(10, 6)
forestdist[10, 9] = 3.000000
Compute forestdist(10, 0)
forestdist[10, 10] = 4.000000
Compute forestdist(0, 2)
forestdist[11, 1] = 10.000000
Compute forestdist(0, 4)
forestdist[11, 2] = 9.000000
Compute forestdist(0, 5)
forestdist[11, 3] = 8.000000
Compute forestdist(0, 3)
forestdist[11, 4] = 8.000000
Compute forestdist(0, 1)
forestdist[11, 5] = 7.000000
Compute forestdist(0, 7)
forestdist[11, 6] = 6.000000
Compute forestdist(0, 8)
forestdist[11, 7] = 5.000000
Compute forestdist(0, 9)
forestdist[11, 8] = 4.000000
Compute forestdist(0, 6)
forestdist[11, 9] = 4.000000
Compute forestdist(0, 0)
forestdist[11, 10] = 3.000000
