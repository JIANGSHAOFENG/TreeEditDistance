Compute Free(1, 0)
If select 1 in Tree A #Subproblem: 39 Direction: Right
Compute Free(1, 1)
If select 1 in Tree A #Subproblem: 14 Direction: Left
Compute Free(1, 2)
If select 1 in Tree A #Subproblem: 13 Direction: Left
Compute Free(1, 3)
If select 1 in Tree A #Subproblem: 12 Direction: Left
Compute Free(1, 4)
If select 1 in Tree A #Subproblem: 11 Direction: Left
Compute Free(1, 5)
If select 1 in Tree A #Subproblem: 10 Direction: Left
Compute Free(1, 6)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 6)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 7)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 7)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 8)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 8)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 9)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 9)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 10)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 10)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 6] = 1
Compute Free(1, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(1, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(1, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(1, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(1, 10) = 1
Compute Free(1, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(1, 5)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 5] = 10
Compute Free(1, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(1, 5) = 10
Compute Free(1, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(1, 4)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 4] = 11
Compute Free(1, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(1, 4) = 11
Compute Free(1, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(1, 3)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 3] = 12
Compute Free(1, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(1, 3) = 12
Compute Free(1, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(1, 2)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 2] = 13
Compute Free(1, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(1, 2) = 13
Compute Free(1, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(1, 1)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 11)
If select 1 in Tree A #Subproblem: 14 Direction: Right
Compute Free(1, 12)
If select 1 in Tree A #Subproblem: 11 Direction: Left
Compute Free(1, 13)
If select 1 in Tree A #Subproblem: 10 Direction: Left
Compute Free(1, 14)
If select 1 in Tree A #Subproblem: 9 Direction: Left
Compute Free(1, 15)
If select 1 in Tree A #Subproblem: 8 Direction: Left
Compute Free(1, 16)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 16)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 17)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 17)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 18)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 18)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 19)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 19)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 16] = 1
Compute Free(1, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(1, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(1, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(1, 19) = 1
Compute Free(1, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(1, 15)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 15] = 8
Compute Free(1, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(1, 15) = 8
Compute Free(1, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(1, 14)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 14] = 9
Compute Free(1, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(1, 14) = 9
Compute Free(1, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(1, 13)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 13] = 10
Compute Free(1, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(1, 13) = 10
Compute Free(1, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(1, 12)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 20)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 20)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 12] = 11
Compute Free(1, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(1, 20) = 1
Compute Free(1, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(1, 11)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
LeftB[1, 1] = 14
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(1, 11) = 14
Compute Free(1, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(1, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(6, 0)
If select 6 in Tree A #Subproblem: 39 Direction: Right
Compute Free(6, 1)
If select 6 in Tree A #Subproblem: 14 Direction: Left
Compute Free(6, 2)
If select 6 in Tree A #Subproblem: 13 Direction: Left
Compute Free(6, 3)
If select 6 in Tree A #Subproblem: 12 Direction: Left
Compute Free(6, 4)
If select 6 in Tree A #Subproblem: 11 Direction: Left
Compute Free(6, 5)
If select 6 in Tree A #Subproblem: 10 Direction: Left
Compute Free(6, 6)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 6)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 7)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 7)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 8)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 8)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 9)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 9)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 10)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 10)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 6] = 1
Compute Free(6, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(6, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(6, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(6, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(6, 10) = 1
Compute Free(6, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(6, 5)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 5] = 10
Compute Free(6, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(6, 5) = 10
Compute Free(6, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(6, 4)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 4] = 11
Compute Free(6, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(6, 4) = 11
Compute Free(6, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(6, 3)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 3] = 12
Compute Free(6, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(6, 3) = 12
Compute Free(6, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(6, 2)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 2] = 13
Compute Free(6, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(6, 2) = 13
Compute Free(6, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(6, 1)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 11)
If select 6 in Tree A #Subproblem: 14 Direction: Right
Compute Free(6, 12)
If select 6 in Tree A #Subproblem: 11 Direction: Left
Compute Free(6, 13)
If select 6 in Tree A #Subproblem: 10 Direction: Left
Compute Free(6, 14)
If select 6 in Tree A #Subproblem: 9 Direction: Left
Compute Free(6, 15)
If select 6 in Tree A #Subproblem: 8 Direction: Left
Compute Free(6, 16)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 16)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 17)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 17)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 18)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 18)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 19)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 19)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 16] = 1
Compute Free(6, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(6, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(6, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(6, 19) = 1
Compute Free(6, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(6, 15)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 15] = 8
Compute Free(6, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(6, 15) = 8
Compute Free(6, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(6, 14)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 14] = 9
Compute Free(6, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(6, 14) = 9
Compute Free(6, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(6, 13)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 13] = 10
Compute Free(6, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(6, 13) = 10
Compute Free(6, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(6, 12)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 20)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 20)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 12] = 11
Compute Free(6, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(6, 20) = 1
Compute Free(6, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(6, 11)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftB[6, 1] = 14
Compute Free(6, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(6, 11) = 14
Compute Free(6, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(6, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(7, 0)
If select 7 in Tree A #Subproblem: 39 Direction: Right
Compute Free(7, 1)
If select 7 in Tree A #Subproblem: 14 Direction: Left
Compute Free(7, 2)
If select 7 in Tree A #Subproblem: 13 Direction: Left
Compute Free(7, 3)
If select 7 in Tree A #Subproblem: 12 Direction: Left
Compute Free(7, 4)
If select 7 in Tree A #Subproblem: 11 Direction: Left
Compute Free(7, 5)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(7, 6)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 6)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 7)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 7)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 8)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 8)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 9)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 9)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 10)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 10)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 6] = 1
Compute Free(7, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(7, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(7, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(7, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(7, 10) = 1
Compute Free(7, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(7, 5)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 5] = 10
Compute Free(7, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(7, 5) = 10
Compute Free(7, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(7, 4)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 4] = 11
Compute Free(7, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(7, 4) = 11
Compute Free(7, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(7, 3)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 3] = 12
Compute Free(7, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(7, 3) = 12
Compute Free(7, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(7, 2)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 2] = 13
Compute Free(7, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(7, 2) = 13
Compute Free(7, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(7, 1)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 11)
If select 7 in Tree A #Subproblem: 14 Direction: Right
Compute Free(7, 12)
If select 7 in Tree A #Subproblem: 11 Direction: Left
Compute Free(7, 13)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(7, 14)
If select 7 in Tree A #Subproblem: 9 Direction: Left
Compute Free(7, 15)
If select 7 in Tree A #Subproblem: 8 Direction: Left
Compute Free(7, 16)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 16)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 17)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 17)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 18)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 18)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 19)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 19)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 16] = 1
Compute Free(7, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(7, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(7, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(7, 19) = 1
Compute Free(7, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(7, 15)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 15] = 8
Compute Free(7, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(7, 15) = 8
Compute Free(7, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(7, 14)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 14] = 9
Compute Free(7, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(7, 14) = 9
Compute Free(7, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(7, 13)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 13] = 10
Compute Free(7, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(7, 13) = 10
Compute Free(7, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(7, 12)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 20)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 20)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 12] = 11
Compute Free(7, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(7, 20) = 1
Compute Free(7, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(7, 11)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
LeftB[7, 1] = 14
Compute Free(7, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(7, 11) = 14
Compute Free(7, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(7, 0)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(8, 0)
If select 8 in Tree A #Subproblem: 39 Direction: Right
Compute Free(8, 1)
If select 8 in Tree A #Subproblem: 14 Direction: Left
Compute Free(8, 2)
If select 8 in Tree A #Subproblem: 13 Direction: Left
Compute Free(8, 3)
If select 8 in Tree A #Subproblem: 12 Direction: Left
Compute Free(8, 4)
If select 8 in Tree A #Subproblem: 11 Direction: Left
Compute Free(8, 5)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(8, 6)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 6)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 7)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 7)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 8)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 8)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 9)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 9)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 10)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 10)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 6] = 1
Compute Free(8, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(8, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(8, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(8, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(8, 10) = 1
Compute Free(8, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(8, 5)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 5] = 10
Compute Free(8, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(8, 5) = 10
Compute Free(8, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(8, 4)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 4] = 11
Compute Free(8, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(8, 4) = 11
Compute Free(8, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(8, 3)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 3] = 12
Compute Free(8, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(8, 3) = 12
Compute Free(8, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(8, 2)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 2] = 13
Compute Free(8, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(8, 2) = 13
Compute Free(8, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(8, 1)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 11)
If select 8 in Tree A #Subproblem: 14 Direction: Right
Compute Free(8, 12)
If select 8 in Tree A #Subproblem: 11 Direction: Left
Compute Free(8, 13)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(8, 14)
If select 8 in Tree A #Subproblem: 9 Direction: Left
Compute Free(8, 15)
If select 8 in Tree A #Subproblem: 8 Direction: Left
Compute Free(8, 16)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 16)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 17)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 17)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 18)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 18)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 19)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 19)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 16] = 1
Compute Free(8, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(8, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(8, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(8, 19) = 1
Compute Free(8, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(8, 15)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 15] = 8
Compute Free(8, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(8, 15) = 8
Compute Free(8, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(8, 14)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 14] = 9
Compute Free(8, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(8, 14) = 9
Compute Free(8, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(8, 13)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 13] = 10
Compute Free(8, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(8, 13) = 10
Compute Free(8, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(8, 12)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 20)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 20)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 12] = 11
Compute Free(8, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(8, 20) = 1
Compute Free(8, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(8, 11)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
LeftB[8, 1] = 14
Compute Free(8, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(8, 11) = 14
Compute Free(8, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(8, 0)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(9, 0)
If select 9 in Tree A #Subproblem: 39 Direction: Right
Compute Free(9, 1)
If select 9 in Tree A #Subproblem: 14 Direction: Left
Compute Free(9, 2)
If select 9 in Tree A #Subproblem: 13 Direction: Left
Compute Free(9, 3)
If select 9 in Tree A #Subproblem: 12 Direction: Left
Compute Free(9, 4)
If select 9 in Tree A #Subproblem: 11 Direction: Left
Compute Free(9, 5)
If select 9 in Tree A #Subproblem: 10 Direction: Left
Compute Free(9, 6)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 6)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 7)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 7)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 8)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 8)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 9)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 9)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 10)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 10)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 6] = 1
Compute Free(9, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(9, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(9, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(9, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(9, 10) = 1
Compute Free(9, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(9, 5)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 5] = 10
Compute Free(9, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(9, 5) = 10
Compute Free(9, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(9, 4)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 4] = 11
Compute Free(9, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(9, 4) = 11
Compute Free(9, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(9, 3)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 3] = 12
Compute Free(9, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(9, 3) = 12
Compute Free(9, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(9, 2)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 2] = 13
Compute Free(9, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(9, 2) = 13
Compute Free(9, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(9, 1)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 11)
If select 9 in Tree A #Subproblem: 14 Direction: Right
Compute Free(9, 12)
If select 9 in Tree A #Subproblem: 11 Direction: Left
Compute Free(9, 13)
If select 9 in Tree A #Subproblem: 10 Direction: Left
Compute Free(9, 14)
If select 9 in Tree A #Subproblem: 9 Direction: Left
Compute Free(9, 15)
If select 9 in Tree A #Subproblem: 8 Direction: Left
Compute Free(9, 16)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 16)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 17)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 17)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 18)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 18)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 19)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 19)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 16] = 1
Compute Free(9, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(9, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(9, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(9, 19) = 1
Compute Free(9, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(9, 15)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 15] = 8
Compute Free(9, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(9, 15) = 8
Compute Free(9, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(9, 14)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 14] = 9
Compute Free(9, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(9, 14) = 9
Compute Free(9, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(9, 13)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 13] = 10
Compute Free(9, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(9, 13) = 10
Compute Free(9, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(9, 12)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 20)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 20)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 12] = 11
Compute Free(9, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(9, 20) = 1
Compute Free(9, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(9, 11)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
LeftB[9, 1] = 14
Compute Free(9, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(9, 11) = 14
Compute Free(9, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(9, 0)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(10, 0)
If select 10 in Tree A #Subproblem: 39 Direction: Right
Compute Free(10, 1)
If select 10 in Tree A #Subproblem: 14 Direction: Left
Compute Free(10, 2)
If select 10 in Tree A #Subproblem: 13 Direction: Left
Compute Free(10, 3)
If select 10 in Tree A #Subproblem: 12 Direction: Left
Compute Free(10, 4)
If select 10 in Tree A #Subproblem: 11 Direction: Left
Compute Free(10, 5)
If select 10 in Tree A #Subproblem: 10 Direction: Left
Compute Free(10, 6)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 6)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 7)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 7)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 8)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 8)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 9)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 9)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 10)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 10)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 6] = 1
Compute Free(10, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(10, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(10, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(10, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(10, 10) = 1
Compute Free(10, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(10, 5)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 5] = 10
Compute Free(10, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(10, 5) = 10
Compute Free(10, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(10, 4)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 4] = 11
Compute Free(10, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(10, 4) = 11
Compute Free(10, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(10, 3)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 3] = 12
Compute Free(10, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(10, 3) = 12
Compute Free(10, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(10, 2)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 2] = 13
Compute Free(10, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(10, 2) = 13
Compute Free(10, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(10, 1)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 11)
If select 10 in Tree A #Subproblem: 14 Direction: Right
Compute Free(10, 12)
If select 10 in Tree A #Subproblem: 11 Direction: Left
Compute Free(10, 13)
If select 10 in Tree A #Subproblem: 10 Direction: Left
Compute Free(10, 14)
If select 10 in Tree A #Subproblem: 9 Direction: Left
Compute Free(10, 15)
If select 10 in Tree A #Subproblem: 8 Direction: Left
Compute Free(10, 16)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 16)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 17)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 17)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 18)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 18)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 19)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 19)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 16] = 1
Compute Free(10, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(10, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(10, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(10, 19) = 1
Compute Free(10, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(10, 15)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 15] = 8
Compute Free(10, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(10, 15) = 8
Compute Free(10, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(10, 14)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 14] = 9
Compute Free(10, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(10, 14) = 9
Compute Free(10, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(10, 13)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 13] = 10
Compute Free(10, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(10, 13) = 10
Compute Free(10, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(10, 12)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 20)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 20)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 12] = 11
Compute Free(10, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(10, 20) = 1
Compute Free(10, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(10, 11)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
LeftB[10, 1] = 14
Compute Free(10, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(10, 11) = 14
Compute Free(10, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(10, 0)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(5, 6)
If select 6 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 6] = 1
Compute Free(5, 6)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 6)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 6)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 6)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 6] set to 10
Compute Free(5, 6)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(5, 7)
If select 7 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 7] = 1
Compute Free(5, 7)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 7)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 7)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 7)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 7] set to 10
Compute Free(5, 7)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(5, 8)
If select 8 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 8] = 1
Compute Free(5, 8)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 8)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 8)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 8)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 8] set to 10
Compute Free(5, 8)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(5, 9)
If select 9 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 9] = 1
Compute Free(5, 9)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 9)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 9)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 9)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 9] set to 10
Compute Free(5, 9)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(5, 10)
If select 10 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 10] = 1
Compute Free(5, 10)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 10)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 10)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 10)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 10] set to 10
Compute Free(5, 10)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
LeftA[6, 5] = 10
Compute Free(5, 5)
If select 6(leftmost) in Tree A #Subproblem: 100 Direction: Right
Compute Free(5, 5)
If select 7 in Tree A #Subproblem: 136 Direction: Left
Compute Free(5, 5)
If select 8 in Tree A #Subproblem: 136 Direction: Left
Compute Free(5, 5)
If select 9 in Tree A #Subproblem: 136 Direction: Left
RightA[10, 5] set to 10
Compute Free(5, 5)
If select 10(rightmost) in Tree A #Subproblem: 100 Direction: Left
LeftB[5, 6] = 10
Compute Free(5, 5)
If select 6(leftmost) in Tree B #Subproblem: 100 Direction: Right
Compute Free(5, 5)
If select 7 in Tree B #Subproblem: 136 Direction: Left
Compute Free(5, 5)
If select 8 in Tree B #Subproblem: 136 Direction: Left
Compute Free(5, 5)
If select 9 in Tree B #Subproblem: 136 Direction: Left
RightB(5, 10) = 10
Compute Free(5, 5)
If select 10(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(5, 5)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 4] = 11
Compute Free(5, 4)
If select 6(leftmost) in Tree A #Subproblem: 110 Direction: Right
Compute Free(5, 4)
If select 7 in Tree A #Subproblem: 146 Direction: Left
Compute Free(5, 4)
If select 8 in Tree A #Subproblem: 146 Direction: Left
Compute Free(5, 4)
If select 9 in Tree A #Subproblem: 146 Direction: Left
RightA[10, 4] set to 10
Compute Free(5, 4)
If select 10(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[5, 5] = 100
Compute Free(5, 4)
If select 5(leftmost) in Tree B #Subproblem: 110 Direction: Right
bleftmost = 136
childrenB 7 = 124
childrenB 8 = 118
childrenB 9 = 112
brightmost = 50 + 50 = 100
RightB(5, 5) = 100
Compute Free(5, 4)
If select 5(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(5, 4)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 3] = 12
Compute Free(5, 3)
If select 6(leftmost) in Tree A #Subproblem: 120 Direction: Right
Compute Free(5, 3)
If select 7 in Tree A #Subproblem: 156 Direction: Left
Compute Free(5, 3)
If select 8 in Tree A #Subproblem: 156 Direction: Left
Compute Free(5, 3)
If select 9 in Tree A #Subproblem: 156 Direction: Left
RightA[10, 3] set to 10
Compute Free(5, 3)
If select 10(rightmost) in Tree A #Subproblem: 120 Direction: Left
LeftB[5, 4] = 110
Compute Free(5, 3)
If select 4(leftmost) in Tree B #Subproblem: 120 Direction: Right
bleftmost = 152
brightmost = 100 + 10 = 110
RightB(5, 4) = 110
Compute Free(5, 3)
If select 4(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(5, 3)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 2] = 13
Compute Free(5, 2)
If select 6(leftmost) in Tree A #Subproblem: 130 Direction: Right
Compute Free(5, 2)
If select 7 in Tree A #Subproblem: 166 Direction: Left
Compute Free(5, 2)
If select 8 in Tree A #Subproblem: 166 Direction: Left
Compute Free(5, 2)
If select 9 in Tree A #Subproblem: 166 Direction: Left
RightA[10, 2] set to 10
Compute Free(5, 2)
If select 10(rightmost) in Tree A #Subproblem: 130 Direction: Left
LeftB[5, 3] = 120
Compute Free(5, 2)
If select 3(leftmost) in Tree B #Subproblem: 130 Direction: Right
bleftmost = 168
brightmost = 110 + 10 = 120
RightB(5, 3) = 120
Compute Free(5, 2)
If select 3(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(5, 2)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 1] = 14
Compute Free(5, 1)
If select 6(leftmost) in Tree A #Subproblem: 140 Direction: Right
Compute Free(5, 1)
If select 7 in Tree A #Subproblem: 176 Direction: Left
Compute Free(5, 1)
If select 8 in Tree A #Subproblem: 176 Direction: Left
Compute Free(5, 1)
If select 9 in Tree A #Subproblem: 176 Direction: Left
RightA[10, 1] set to 10
Compute Free(5, 1)
If select 10(rightmost) in Tree A #Subproblem: 140 Direction: Left
LeftB[5, 2] = 130
Compute Free(5, 1)
If select 2(leftmost) in Tree B #Subproblem: 140 Direction: Right
bleftmost = 184
brightmost = 120 + 10 = 130
RightB(5, 2) = 130
Compute Free(5, 1)
If select 2(rightmost) in Tree B #Subproblem: 140 Direction: Left
FreeS(5, 1)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 16)
If select 16 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 16] = 1
Compute Free(5, 16)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 16)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 16)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 16)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 16] set to 10
Compute Free(5, 16)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(5, 17)
If select 17 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 17] = 1
Compute Free(5, 17)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 17)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 17)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 17)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 17] set to 10
Compute Free(5, 17)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(5, 18)
If select 18 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 18] = 1
Compute Free(5, 18)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 18)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 18)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 18)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 18] set to 10
Compute Free(5, 18)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(5, 19)
If select 19 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 19] = 1
Compute Free(5, 19)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 19)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 19)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 19)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 19] set to 10
Compute Free(5, 19)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
LeftA[6, 15] = 8
Compute Free(5, 15)
If select 6(leftmost) in Tree A #Subproblem: 80 Direction: Right
Compute Free(5, 15)
If select 7 in Tree A #Subproblem: 98 Direction: Left
Compute Free(5, 15)
If select 8 in Tree A #Subproblem: 98 Direction: Left
Compute Free(5, 15)
If select 9 in Tree A #Subproblem: 98 Direction: Left
RightA[10, 15] set to 10
Compute Free(5, 15)
If select 10(rightmost) in Tree A #Subproblem: 80 Direction: Left
LeftB[5, 16] = 10
Compute Free(5, 15)
If select 16(leftmost) in Tree B #Subproblem: 80 Direction: Right
Compute Free(5, 15)
If select 17 in Tree B #Subproblem: 110 Direction: Left
Compute Free(5, 15)
If select 18 in Tree B #Subproblem: 110 Direction: Left
RightB(5, 19) = 10
Compute Free(5, 15)
If select 19(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(5, 15)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 14] = 9
Compute Free(5, 14)
If select 6(leftmost) in Tree A #Subproblem: 90 Direction: Right
Compute Free(5, 14)
If select 7 in Tree A #Subproblem: 108 Direction: Left
Compute Free(5, 14)
If select 8 in Tree A #Subproblem: 108 Direction: Left
Compute Free(5, 14)
If select 9 in Tree A #Subproblem: 108 Direction: Left
RightA[10, 14] set to 10
Compute Free(5, 14)
If select 10(rightmost) in Tree A #Subproblem: 90 Direction: Left
LeftB[5, 15] = 80
Compute Free(5, 14)
If select 15(leftmost) in Tree B #Subproblem: 90 Direction: Right
bleftmost = 110
childrenB 17 = 98
childrenB 18 = 92
brightmost = 40 + 40 = 80
RightB(5, 15) = 80
Compute Free(5, 14)
If select 15(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(5, 14)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 13] = 10
Compute Free(5, 13)
If select 6(leftmost) in Tree A #Subproblem: 100 Direction: Right
Compute Free(5, 13)
If select 7 in Tree A #Subproblem: 118 Direction: Left
Compute Free(5, 13)
If select 8 in Tree A #Subproblem: 118 Direction: Left
Compute Free(5, 13)
If select 9 in Tree A #Subproblem: 118 Direction: Left
RightA[10, 13] set to 10
Compute Free(5, 13)
If select 10(rightmost) in Tree A #Subproblem: 100 Direction: Left
LeftB[5, 14] = 90
Compute Free(5, 13)
If select 14(leftmost) in Tree B #Subproblem: 100 Direction: Right
bleftmost = 126
brightmost = 80 + 10 = 90
RightB(5, 14) = 90
Compute Free(5, 13)
If select 14(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(5, 13)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 12] = 11
Compute Free(5, 12)
If select 6(leftmost) in Tree A #Subproblem: 110 Direction: Right
Compute Free(5, 12)
If select 7 in Tree A #Subproblem: 128 Direction: Left
Compute Free(5, 12)
If select 8 in Tree A #Subproblem: 128 Direction: Left
Compute Free(5, 12)
If select 9 in Tree A #Subproblem: 128 Direction: Left
RightA[10, 12] set to 10
Compute Free(5, 12)
If select 10(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[5, 13] = 100
Compute Free(5, 12)
If select 13(leftmost) in Tree B #Subproblem: 110 Direction: Right
bleftmost = 142
brightmost = 90 + 10 = 100
RightB(5, 13) = 100
Compute Free(5, 12)
If select 13(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(5, 12)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 20)
If select 20 in Tree B #Subproblem: 10 Direction: Left
LeftA[6, 20] = 1
Compute Free(5, 20)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 20)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 20)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 20)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 20] set to 10
Compute Free(5, 20)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
LeftA[6, 11] = 14
Compute Free(5, 11)
If select 6(leftmost) in Tree A #Subproblem: 140 Direction: Right
Compute Free(5, 11)
If select 7 in Tree A #Subproblem: 200 Direction: Left
Compute Free(5, 11)
If select 8 in Tree A #Subproblem: 200 Direction: Left
Compute Free(5, 11)
If select 9 in Tree A #Subproblem: 200 Direction: Left
RightA[10, 11] set to 10
Compute Free(5, 11)
If select 10(rightmost) in Tree A #Subproblem: 182 Direction: Left
LeftB[5, 12] = 110
Compute Free(5, 11)
If select 12(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(5, 20) = 10
Compute Free(5, 11)
If select 20(rightmost) in Tree B #Subproblem: 210 Direction: Left
FreeS(5, 11)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
LeftA[6, 0] = 39
Compute Free(5, 0)
If select 6(leftmost) in Tree A #Subproblem: 390 Direction: Right
Compute Free(5, 0)
If select 7 in Tree A #Subproblem: 1026 Direction: Left
Compute Free(5, 0)
If select 8 in Tree A #Subproblem: 1026 Direction: Left
Compute Free(5, 0)
If select 9 in Tree A #Subproblem: 1026 Direction: Left
RightA[10, 0] set to 10
Compute Free(5, 0)
If select 10(rightmost) in Tree A #Subproblem: 432 Direction: Left
LeftB[5, 1] = 140
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 390 Direction: Right
bleftmost = 200
brightmost = 120 + 90 = 210
RightB(5, 11) = 200
Compute Free(5, 0)
If select 11(rightmost) in Tree B #Subproblem: 450 Direction: Left
FreeS(5, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 6)
If select 6 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 6] = 10
Compute Free(4, 6)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 6] set to 10
Compute Free(4, 6)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(4, 7)
If select 7 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 7] = 10
Compute Free(4, 7)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 7] set to 10
Compute Free(4, 7)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(4, 8)
If select 8 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 8] = 10
Compute Free(4, 8)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 8] set to 10
Compute Free(4, 8)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(4, 9)
If select 9 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 9] = 10
Compute Free(4, 9)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 9] set to 10
Compute Free(4, 9)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(4, 10)
If select 10 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 10] = 10
Compute Free(4, 10)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 10] set to 10
Compute Free(4, 10)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 50 + 50 = 100
LeftA[5, 5] = 100
Compute Free(4, 5)
If select 5(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[5, 5] set to 10
Compute Free(4, 5)
If select 5(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[4, 6] = 11
Compute Free(4, 5)
If select 6(leftmost) in Tree B #Subproblem: 110 Direction: Right
Compute Free(4, 5)
If select 7 in Tree B #Subproblem: 146 Direction: Left
Compute Free(4, 5)
If select 8 in Tree B #Subproblem: 146 Direction: Left
Compute Free(4, 5)
If select 9 in Tree B #Subproblem: 146 Direction: Left
RightB(4, 10) = 11
Compute Free(4, 5)
If select 10(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(4, 5)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 55 + 55 = 110
LeftA[5, 4] = 110
Compute Free(4, 4)
If select 5(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[5, 4] set to 10
Compute Free(4, 4)
If select 5(rightmost) in Tree A #Subproblem: 121 Direction: Left
LeftB[4, 5] = 110
Compute Free(4, 4)
If select 5(leftmost) in Tree B #Subproblem: 121 Direction: Right
bleftmost = 146
childrenB 7 = 134
childrenB 8 = 128
childrenB 9 = 122
brightmost = 55 + 55 = 110
RightB(4, 5) = 110
Compute Free(4, 4)
If select 5(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(4, 4)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 60 + 60 = 120
LeftA[5, 3] = 120
Compute Free(4, 3)
If select 5(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[5, 3] set to 10
Compute Free(4, 3)
If select 5(rightmost) in Tree A #Subproblem: 132 Direction: Left
LeftB[4, 4] = 121
Compute Free(4, 3)
If select 4(leftmost) in Tree B #Subproblem: 132 Direction: Right
bleftmost = 163
brightmost = 110 + 11 = 121
RightB(4, 4) = 121
Compute Free(4, 3)
If select 4(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(4, 3)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 65 + 65 = 130
LeftA[5, 2] = 130
Compute Free(4, 2)
If select 5(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[5, 2] set to 10
Compute Free(4, 2)
If select 5(rightmost) in Tree A #Subproblem: 143 Direction: Left
LeftB[4, 3] = 132
Compute Free(4, 2)
If select 3(leftmost) in Tree B #Subproblem: 143 Direction: Right
bleftmost = 180
brightmost = 121 + 11 = 132
RightB(4, 3) = 132
Compute Free(4, 2)
If select 3(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(4, 2)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 70 + 70 = 140
LeftA[5, 1] = 140
Compute Free(4, 1)
If select 5(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[5, 1] set to 10
Compute Free(4, 1)
If select 5(rightmost) in Tree A #Subproblem: 154 Direction: Left
LeftB[4, 2] = 143
Compute Free(4, 1)
If select 2(leftmost) in Tree B #Subproblem: 154 Direction: Right
bleftmost = 197
brightmost = 132 + 11 = 143
RightB(4, 2) = 143
Compute Free(4, 1)
If select 2(rightmost) in Tree B #Subproblem: 154 Direction: Left
FreeS(4, 1)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 16)
If select 16 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 16] = 10
Compute Free(4, 16)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 16] set to 10
Compute Free(4, 16)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(4, 17)
If select 17 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 17] = 10
Compute Free(4, 17)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 17] set to 10
Compute Free(4, 17)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(4, 18)
If select 18 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 18] = 10
Compute Free(4, 18)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 18] set to 10
Compute Free(4, 18)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(4, 19)
If select 19 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 19] = 10
Compute Free(4, 19)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 19] set to 10
Compute Free(4, 19)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 40 + 40 = 80
LeftA[5, 15] = 80
Compute Free(4, 15)
If select 5(leftmost) in Tree A #Subproblem: 88 Direction: Right
RightA[5, 15] set to 10
Compute Free(4, 15)
If select 5(rightmost) in Tree A #Subproblem: 88 Direction: Left
LeftB[4, 16] = 11
Compute Free(4, 15)
If select 16(leftmost) in Tree B #Subproblem: 88 Direction: Right
Compute Free(4, 15)
If select 17 in Tree B #Subproblem: 118 Direction: Left
Compute Free(4, 15)
If select 18 in Tree B #Subproblem: 118 Direction: Left
RightB(4, 19) = 11
Compute Free(4, 15)
If select 19(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(4, 15)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 45 + 45 = 90
LeftA[5, 14] = 90
Compute Free(4, 14)
If select 5(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[5, 14] set to 10
Compute Free(4, 14)
If select 5(rightmost) in Tree A #Subproblem: 99 Direction: Left
LeftB[4, 15] = 88
Compute Free(4, 14)
If select 15(leftmost) in Tree B #Subproblem: 99 Direction: Right
bleftmost = 118
childrenB 17 = 106
childrenB 18 = 100
brightmost = 44 + 44 = 88
RightB(4, 15) = 88
Compute Free(4, 14)
If select 15(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(4, 14)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 50 + 50 = 100
LeftA[5, 13] = 100
Compute Free(4, 13)
If select 5(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[5, 13] set to 10
Compute Free(4, 13)
If select 5(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[4, 14] = 99
Compute Free(4, 13)
If select 14(leftmost) in Tree B #Subproblem: 110 Direction: Right
bleftmost = 135
brightmost = 88 + 11 = 99
RightB(4, 14) = 99
Compute Free(4, 13)
If select 14(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(4, 13)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 55 + 55 = 110
LeftA[5, 12] = 110
Compute Free(4, 12)
If select 5(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[5, 12] set to 10
Compute Free(4, 12)
If select 5(rightmost) in Tree A #Subproblem: 121 Direction: Left
LeftB[4, 13] = 110
Compute Free(4, 12)
If select 13(leftmost) in Tree B #Subproblem: 121 Direction: Right
bleftmost = 152
brightmost = 99 + 11 = 110
RightB(4, 13) = 110
Compute Free(4, 12)
If select 13(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(4, 12)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 20)
If select 20 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 5 + 5 = 10
LeftA[5, 20] = 10
Compute Free(4, 20)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 20] set to 10
Compute Free(4, 20)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 70 + 70 = 140
LeftA[5, 11] = 140
Compute Free(4, 11)
If select 5(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[5, 11] set to 10
Compute Free(4, 11)
If select 5(rightmost) in Tree A #Subproblem: 203 Direction: Left
LeftB[4, 12] = 121
Compute Free(4, 11)
If select 12(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(4, 20) = 11
Compute Free(4, 11)
If select 20(rightmost) in Tree B #Subproblem: 231 Direction: Left
FreeS(4, 11)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
aleftmost = 195 + 195 = 390
LeftA[5, 0] = 390
Compute Free(4, 0)
If select 5(leftmost) in Tree A #Subproblem: 429 Direction: Right
RightA[5, 0] set to 10
Compute Free(4, 0)
If select 5(rightmost) in Tree A #Subproblem: 478 Direction: Left
LeftB[4, 1] = 154
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 429 Direction: Right
bleftmost = 214
brightmost = 132 + 99 = 231
RightB(4, 11) = 214
Compute Free(4, 0)
If select 11(rightmost) in Tree B #Subproblem: 489 Direction: Left
FreeS(4, 0)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 6)
If select 6 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 6] = 11
Compute Free(3, 6)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 6] set to 10
Compute Free(3, 6)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(3, 7)
If select 7 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 7] = 11
Compute Free(3, 7)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 7] set to 10
Compute Free(3, 7)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(3, 8)
If select 8 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 8] = 11
Compute Free(3, 8)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 8] set to 10
Compute Free(3, 8)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(3, 9)
If select 9 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 9] = 11
Compute Free(3, 9)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 9] set to 10
Compute Free(3, 9)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(3, 10)
If select 10 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 10] = 11
Compute Free(3, 10)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 10] set to 10
Compute Free(3, 10)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 100 + 10 = 110
LeftA[4, 5] = 110
Compute Free(3, 5)
If select 4(leftmost) in Tree A #Subproblem: 120 Direction: Right
RightA[4, 5] set to 10
Compute Free(3, 5)
If select 4(rightmost) in Tree A #Subproblem: 120 Direction: Left
LeftB[3, 6] = 12
Compute Free(3, 5)
If select 6(leftmost) in Tree B #Subproblem: 120 Direction: Right
Compute Free(3, 5)
If select 7 in Tree B #Subproblem: 156 Direction: Left
Compute Free(3, 5)
If select 8 in Tree B #Subproblem: 156 Direction: Left
Compute Free(3, 5)
If select 9 in Tree B #Subproblem: 156 Direction: Left
RightB(3, 10) = 12
Compute Free(3, 5)
If select 10(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(3, 5)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 110 + 11 = 121
LeftA[4, 4] = 121
Compute Free(3, 4)
If select 4(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[4, 4] set to 10
Compute Free(3, 4)
If select 4(rightmost) in Tree A #Subproblem: 132 Direction: Left
LeftB[3, 5] = 120
Compute Free(3, 4)
If select 5(leftmost) in Tree B #Subproblem: 132 Direction: Right
bleftmost = 156
childrenB 7 = 144
childrenB 8 = 138
childrenB 9 = 132
brightmost = 60 + 60 = 120
RightB(3, 5) = 120
Compute Free(3, 4)
If select 5(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(3, 4)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 120 + 12 = 132
LeftA[4, 3] = 132
Compute Free(3, 3)
If select 4(leftmost) in Tree A #Subproblem: 144 Direction: Right
RightA[4, 3] set to 10
Compute Free(3, 3)
If select 4(rightmost) in Tree A #Subproblem: 144 Direction: Left
LeftB[3, 4] = 132
Compute Free(3, 3)
If select 4(leftmost) in Tree B #Subproblem: 144 Direction: Right
bleftmost = 174
brightmost = 120 + 12 = 132
RightB(3, 4) = 132
Compute Free(3, 3)
If select 4(rightmost) in Tree B #Subproblem: 144 Direction: Left
FreeS(3, 3)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 130 + 13 = 143
LeftA[4, 2] = 143
Compute Free(3, 2)
If select 4(leftmost) in Tree A #Subproblem: 156 Direction: Right
RightA[4, 2] set to 10
Compute Free(3, 2)
If select 4(rightmost) in Tree A #Subproblem: 156 Direction: Left
LeftB[3, 3] = 144
Compute Free(3, 2)
If select 3(leftmost) in Tree B #Subproblem: 156 Direction: Right
bleftmost = 192
brightmost = 132 + 12 = 144
RightB(3, 3) = 144
Compute Free(3, 2)
If select 3(rightmost) in Tree B #Subproblem: 156 Direction: Left
FreeS(3, 2)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 140 + 14 = 154
LeftA[4, 1] = 154
Compute Free(3, 1)
If select 4(leftmost) in Tree A #Subproblem: 168 Direction: Right
RightA[4, 1] set to 10
Compute Free(3, 1)
If select 4(rightmost) in Tree A #Subproblem: 168 Direction: Left
LeftB[3, 2] = 156
Compute Free(3, 1)
If select 2(leftmost) in Tree B #Subproblem: 168 Direction: Right
bleftmost = 210
brightmost = 144 + 12 = 156
RightB(3, 2) = 156
Compute Free(3, 1)
If select 2(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(3, 1)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 16)
If select 16 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 16] = 11
Compute Free(3, 16)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 16] set to 10
Compute Free(3, 16)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(3, 17)
If select 17 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 17] = 11
Compute Free(3, 17)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 17] set to 10
Compute Free(3, 17)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(3, 18)
If select 18 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 18] = 11
Compute Free(3, 18)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 18] set to 10
Compute Free(3, 18)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(3, 19)
If select 19 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 19] = 11
Compute Free(3, 19)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 19] set to 10
Compute Free(3, 19)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 80 + 8 = 88
LeftA[4, 15] = 88
Compute Free(3, 15)
If select 4(leftmost) in Tree A #Subproblem: 96 Direction: Right
RightA[4, 15] set to 10
Compute Free(3, 15)
If select 4(rightmost) in Tree A #Subproblem: 96 Direction: Left
LeftB[3, 16] = 12
Compute Free(3, 15)
If select 16(leftmost) in Tree B #Subproblem: 96 Direction: Right
Compute Free(3, 15)
If select 17 in Tree B #Subproblem: 126 Direction: Left
Compute Free(3, 15)
If select 18 in Tree B #Subproblem: 126 Direction: Left
RightB(3, 19) = 12
Compute Free(3, 15)
If select 19(rightmost) in Tree B #Subproblem: 96 Direction: Left
FreeS(3, 15)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 90 + 9 = 99
LeftA[4, 14] = 99
Compute Free(3, 14)
If select 4(leftmost) in Tree A #Subproblem: 108 Direction: Right
RightA[4, 14] set to 10
Compute Free(3, 14)
If select 4(rightmost) in Tree A #Subproblem: 108 Direction: Left
LeftB[3, 15] = 96
Compute Free(3, 14)
If select 15(leftmost) in Tree B #Subproblem: 108 Direction: Right
bleftmost = 126
childrenB 17 = 114
childrenB 18 = 108
brightmost = 48 + 48 = 96
RightB(3, 15) = 96
Compute Free(3, 14)
If select 15(rightmost) in Tree B #Subproblem: 108 Direction: Left
FreeS(3, 14)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 100 + 10 = 110
LeftA[4, 13] = 110
Compute Free(3, 13)
If select 4(leftmost) in Tree A #Subproblem: 120 Direction: Right
RightA[4, 13] set to 10
Compute Free(3, 13)
If select 4(rightmost) in Tree A #Subproblem: 120 Direction: Left
LeftB[3, 14] = 108
Compute Free(3, 13)
If select 14(leftmost) in Tree B #Subproblem: 120 Direction: Right
bleftmost = 144
brightmost = 96 + 12 = 108
RightB(3, 14) = 108
Compute Free(3, 13)
If select 14(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(3, 13)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 110 + 11 = 121
LeftA[4, 12] = 121
Compute Free(3, 12)
If select 4(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[4, 12] set to 10
Compute Free(3, 12)
If select 4(rightmost) in Tree A #Subproblem: 132 Direction: Left
LeftB[3, 13] = 120
Compute Free(3, 12)
If select 13(leftmost) in Tree B #Subproblem: 132 Direction: Right
bleftmost = 162
brightmost = 108 + 12 = 120
RightB(3, 13) = 120
Compute Free(3, 12)
If select 13(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(3, 12)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 20)
If select 20 in Tree B #Subproblem: 12 Direction: Left
aleftmost = 10 + 1 = 11
LeftA[4, 20] = 11
Compute Free(3, 20)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 20] set to 10
Compute Free(3, 20)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 140 + 14 = 154
LeftA[4, 11] = 154
Compute Free(3, 11)
If select 4(leftmost) in Tree A #Subproblem: 168 Direction: Right
RightA[4, 11] set to 10
Compute Free(3, 11)
If select 4(rightmost) in Tree A #Subproblem: 224 Direction: Left
LeftB[3, 12] = 132
Compute Free(3, 11)
If select 12(leftmost) in Tree B #Subproblem: 168 Direction: Right
RightB(3, 20) = 12
Compute Free(3, 11)
If select 20(rightmost) in Tree B #Subproblem: 252 Direction: Left
FreeS(3, 11)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
aleftmost = 390 + 39 = 429
LeftA[4, 0] = 429
Compute Free(3, 0)
If select 4(leftmost) in Tree A #Subproblem: 468 Direction: Right
RightA[4, 0] set to 10
Compute Free(3, 0)
If select 4(rightmost) in Tree A #Subproblem: 524 Direction: Left
LeftB[3, 1] = 168
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 468 Direction: Right
bleftmost = 228
brightmost = 144 + 108 = 252
RightB(3, 11) = 228
Compute Free(3, 0)
If select 11(rightmost) in Tree B #Subproblem: 528 Direction: Left
FreeS(3, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 6)
If select 6 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 6] = 12
Compute Free(2, 6)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 6] set to 10
Compute Free(2, 6)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(2, 7)
If select 7 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 7] = 12
Compute Free(2, 7)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 7] set to 10
Compute Free(2, 7)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(2, 8)
If select 8 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 8] = 12
Compute Free(2, 8)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 8] set to 10
Compute Free(2, 8)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(2, 9)
If select 9 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 9] = 12
Compute Free(2, 9)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 9] set to 10
Compute Free(2, 9)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(2, 10)
If select 10 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 10] = 12
Compute Free(2, 10)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 10] set to 10
Compute Free(2, 10)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 110 + 10 = 120
LeftA[3, 5] = 120
Compute Free(2, 5)
If select 3(leftmost) in Tree A #Subproblem: 130 Direction: Right
RightA[3, 5] set to 10
Compute Free(2, 5)
If select 3(rightmost) in Tree A #Subproblem: 130 Direction: Left
LeftB[2, 6] = 13
Compute Free(2, 5)
If select 6(leftmost) in Tree B #Subproblem: 130 Direction: Right
Compute Free(2, 5)
If select 7 in Tree B #Subproblem: 166 Direction: Left
Compute Free(2, 5)
If select 8 in Tree B #Subproblem: 166 Direction: Left
Compute Free(2, 5)
If select 9 in Tree B #Subproblem: 166 Direction: Left
RightB(2, 10) = 13
Compute Free(2, 5)
If select 10(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(2, 5)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 121 + 11 = 132
LeftA[3, 4] = 132
Compute Free(2, 4)
If select 3(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[3, 4] set to 10
Compute Free(2, 4)
If select 3(rightmost) in Tree A #Subproblem: 143 Direction: Left
LeftB[2, 5] = 130
Compute Free(2, 4)
If select 5(leftmost) in Tree B #Subproblem: 143 Direction: Right
bleftmost = 166
childrenB 7 = 154
childrenB 8 = 148
childrenB 9 = 142
brightmost = 65 + 65 = 130
RightB(2, 5) = 130
Compute Free(2, 4)
If select 5(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(2, 4)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 132 + 12 = 144
LeftA[3, 3] = 144
Compute Free(2, 3)
If select 3(leftmost) in Tree A #Subproblem: 156 Direction: Right
RightA[3, 3] set to 10
Compute Free(2, 3)
If select 3(rightmost) in Tree A #Subproblem: 156 Direction: Left
LeftB[2, 4] = 143
Compute Free(2, 3)
If select 4(leftmost) in Tree B #Subproblem: 156 Direction: Right
bleftmost = 185
brightmost = 130 + 13 = 143
RightB(2, 4) = 143
Compute Free(2, 3)
If select 4(rightmost) in Tree B #Subproblem: 156 Direction: Left
FreeS(2, 3)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 143 + 13 = 156
LeftA[3, 2] = 156
Compute Free(2, 2)
If select 3(leftmost) in Tree A #Subproblem: 169 Direction: Right
RightA[3, 2] set to 10
Compute Free(2, 2)
If select 3(rightmost) in Tree A #Subproblem: 169 Direction: Left
LeftB[2, 3] = 156
Compute Free(2, 2)
If select 3(leftmost) in Tree B #Subproblem: 169 Direction: Right
bleftmost = 204
brightmost = 143 + 13 = 156
RightB(2, 3) = 156
Compute Free(2, 2)
If select 3(rightmost) in Tree B #Subproblem: 169 Direction: Left
FreeS(2, 2)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 154 + 14 = 168
LeftA[3, 1] = 168
Compute Free(2, 1)
If select 3(leftmost) in Tree A #Subproblem: 182 Direction: Right
RightA[3, 1] set to 10
Compute Free(2, 1)
If select 3(rightmost) in Tree A #Subproblem: 182 Direction: Left
LeftB[2, 2] = 169
Compute Free(2, 1)
If select 2(leftmost) in Tree B #Subproblem: 182 Direction: Right
bleftmost = 223
brightmost = 156 + 13 = 169
RightB(2, 2) = 169
Compute Free(2, 1)
If select 2(rightmost) in Tree B #Subproblem: 182 Direction: Left
FreeS(2, 1)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 16)
If select 16 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 16] = 12
Compute Free(2, 16)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 16] set to 10
Compute Free(2, 16)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(2, 17)
If select 17 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 17] = 12
Compute Free(2, 17)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 17] set to 10
Compute Free(2, 17)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(2, 18)
If select 18 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 18] = 12
Compute Free(2, 18)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 18] set to 10
Compute Free(2, 18)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(2, 19)
If select 19 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 19] = 12
Compute Free(2, 19)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 19] set to 10
Compute Free(2, 19)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 88 + 8 = 96
LeftA[3, 15] = 96
Compute Free(2, 15)
If select 3(leftmost) in Tree A #Subproblem: 104 Direction: Right
RightA[3, 15] set to 10
Compute Free(2, 15)
If select 3(rightmost) in Tree A #Subproblem: 104 Direction: Left
LeftB[2, 16] = 13
Compute Free(2, 15)
If select 16(leftmost) in Tree B #Subproblem: 104 Direction: Right
Compute Free(2, 15)
If select 17 in Tree B #Subproblem: 134 Direction: Left
Compute Free(2, 15)
If select 18 in Tree B #Subproblem: 134 Direction: Left
RightB(2, 19) = 13
Compute Free(2, 15)
If select 19(rightmost) in Tree B #Subproblem: 104 Direction: Left
FreeS(2, 15)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 99 + 9 = 108
LeftA[3, 14] = 108
Compute Free(2, 14)
If select 3(leftmost) in Tree A #Subproblem: 117 Direction: Right
RightA[3, 14] set to 10
Compute Free(2, 14)
If select 3(rightmost) in Tree A #Subproblem: 117 Direction: Left
LeftB[2, 15] = 104
Compute Free(2, 14)
If select 15(leftmost) in Tree B #Subproblem: 117 Direction: Right
bleftmost = 134
childrenB 17 = 122
childrenB 18 = 116
brightmost = 52 + 52 = 104
RightB(2, 15) = 104
Compute Free(2, 14)
If select 15(rightmost) in Tree B #Subproblem: 117 Direction: Left
FreeS(2, 14)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 110 + 10 = 120
LeftA[3, 13] = 120
Compute Free(2, 13)
If select 3(leftmost) in Tree A #Subproblem: 130 Direction: Right
RightA[3, 13] set to 10
Compute Free(2, 13)
If select 3(rightmost) in Tree A #Subproblem: 130 Direction: Left
LeftB[2, 14] = 117
Compute Free(2, 13)
If select 14(leftmost) in Tree B #Subproblem: 130 Direction: Right
bleftmost = 153
brightmost = 104 + 13 = 117
RightB(2, 14) = 117
Compute Free(2, 13)
If select 14(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(2, 13)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 121 + 11 = 132
LeftA[3, 12] = 132
Compute Free(2, 12)
If select 3(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[3, 12] set to 10
Compute Free(2, 12)
If select 3(rightmost) in Tree A #Subproblem: 143 Direction: Left
LeftB[2, 13] = 130
Compute Free(2, 12)
If select 13(leftmost) in Tree B #Subproblem: 143 Direction: Right
bleftmost = 172
brightmost = 117 + 13 = 130
RightB(2, 13) = 130
Compute Free(2, 12)
If select 13(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(2, 12)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 20)
If select 20 in Tree B #Subproblem: 13 Direction: Left
aleftmost = 11 + 1 = 12
LeftA[3, 20] = 12
Compute Free(2, 20)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 20] set to 10
Compute Free(2, 20)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 154 + 14 = 168
LeftA[3, 11] = 168
Compute Free(2, 11)
If select 3(leftmost) in Tree A #Subproblem: 182 Direction: Right
RightA[3, 11] set to 10
Compute Free(2, 11)
If select 3(rightmost) in Tree A #Subproblem: 245 Direction: Left
LeftB[2, 12] = 143
Compute Free(2, 11)
If select 12(leftmost) in Tree B #Subproblem: 182 Direction: Right
RightB(2, 20) = 13
Compute Free(2, 11)
If select 20(rightmost) in Tree B #Subproblem: 273 Direction: Left
FreeS(2, 11)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
aleftmost = 429 + 39 = 468
LeftA[3, 0] = 468
Compute Free(2, 0)
If select 3(leftmost) in Tree A #Subproblem: 507 Direction: Right
RightA[3, 0] set to 10
Compute Free(2, 0)
If select 3(rightmost) in Tree A #Subproblem: 570 Direction: Left
LeftB[2, 1] = 182
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 507 Direction: Right
bleftmost = 242
brightmost = 156 + 117 = 273
RightB(2, 11) = 242
Compute Free(2, 0)
If select 11(rightmost) in Tree B #Subproblem: 567 Direction: Left
FreeS(2, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(11, 0)
If select 11 in Tree A #Subproblem: 39 Direction: Right
Compute Free(11, 1)
If select 11 in Tree A #Subproblem: 14 Direction: Left
Compute Free(11, 2)
If select 11 in Tree A #Subproblem: 13 Direction: Left
Compute Free(11, 3)
If select 11 in Tree A #Subproblem: 12 Direction: Left
Compute Free(11, 4)
If select 11 in Tree A #Subproblem: 11 Direction: Left
Compute Free(11, 5)
If select 11 in Tree A #Subproblem: 10 Direction: Left
Compute Free(11, 6)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 6)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 7)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 7)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 8)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 8)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 9)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 9)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 10)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 10)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 6] = 1
Compute Free(11, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(11, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(11, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(11, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(11, 10) = 1
Compute Free(11, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(11, 5)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 5] = 10
Compute Free(11, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(11, 5) = 10
Compute Free(11, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(11, 4)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 4] = 11
Compute Free(11, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(11, 4) = 11
Compute Free(11, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(11, 3)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 3] = 12
Compute Free(11, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(11, 3) = 12
Compute Free(11, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(11, 2)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 2] = 13
Compute Free(11, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(11, 2) = 13
Compute Free(11, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(11, 1)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 11)
If select 11 in Tree A #Subproblem: 14 Direction: Right
Compute Free(11, 12)
If select 11 in Tree A #Subproblem: 11 Direction: Left
Compute Free(11, 13)
If select 11 in Tree A #Subproblem: 10 Direction: Left
Compute Free(11, 14)
If select 11 in Tree A #Subproblem: 9 Direction: Left
Compute Free(11, 15)
If select 11 in Tree A #Subproblem: 8 Direction: Left
Compute Free(11, 16)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 16)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 17)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 17)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 18)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 18)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 19)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 19)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 16] = 1
Compute Free(11, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(11, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(11, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(11, 19) = 1
Compute Free(11, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(11, 15)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 15] = 8
Compute Free(11, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(11, 15) = 8
Compute Free(11, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(11, 14)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 14] = 9
Compute Free(11, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(11, 14) = 9
Compute Free(11, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(11, 13)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 13] = 10
Compute Free(11, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(11, 13) = 10
Compute Free(11, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(11, 12)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 20)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 20)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 12] = 11
Compute Free(11, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(11, 20) = 1
Compute Free(11, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(11, 11)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
LeftB[11, 1] = 14
Compute Free(11, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(11, 11) = 14
Compute Free(11, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(11, 0)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(17, 0)
If select 17 in Tree A #Subproblem: 39 Direction: Right
Compute Free(17, 1)
If select 17 in Tree A #Subproblem: 14 Direction: Left
Compute Free(17, 2)
If select 17 in Tree A #Subproblem: 13 Direction: Left
Compute Free(17, 3)
If select 17 in Tree A #Subproblem: 12 Direction: Left
Compute Free(17, 4)
If select 17 in Tree A #Subproblem: 11 Direction: Left
Compute Free(17, 5)
If select 17 in Tree A #Subproblem: 10 Direction: Left
Compute Free(17, 6)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 6)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 7)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 7)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 8)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 8)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 9)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 9)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 10)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 10)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 6] = 1
Compute Free(17, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(17, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(17, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(17, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(17, 10) = 1
Compute Free(17, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(17, 5)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 5] = 10
Compute Free(17, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(17, 5) = 10
Compute Free(17, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(17, 4)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 4] = 11
Compute Free(17, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(17, 4) = 11
Compute Free(17, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(17, 3)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 3] = 12
Compute Free(17, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(17, 3) = 12
Compute Free(17, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(17, 2)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 2] = 13
Compute Free(17, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(17, 2) = 13
Compute Free(17, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(17, 1)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 11)
If select 17 in Tree A #Subproblem: 14 Direction: Right
Compute Free(17, 12)
If select 17 in Tree A #Subproblem: 11 Direction: Left
Compute Free(17, 13)
If select 17 in Tree A #Subproblem: 10 Direction: Left
Compute Free(17, 14)
If select 17 in Tree A #Subproblem: 9 Direction: Left
Compute Free(17, 15)
If select 17 in Tree A #Subproblem: 8 Direction: Left
Compute Free(17, 16)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 16)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 17)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 17)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 18)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 18)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 19)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 19)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 16] = 1
Compute Free(17, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(17, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(17, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(17, 19) = 1
Compute Free(17, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(17, 15)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 15] = 8
Compute Free(17, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(17, 15) = 8
Compute Free(17, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(17, 14)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 14] = 9
Compute Free(17, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(17, 14) = 9
Compute Free(17, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(17, 13)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 13] = 10
Compute Free(17, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(17, 13) = 10
Compute Free(17, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(17, 12)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 20)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 20)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 12] = 11
Compute Free(17, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(17, 20) = 1
Compute Free(17, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(17, 11)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftB[17, 1] = 14
Compute Free(17, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(17, 11) = 14
Compute Free(17, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(17, 0)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(18, 0)
If select 18 in Tree A #Subproblem: 39 Direction: Right
Compute Free(18, 1)
If select 18 in Tree A #Subproblem: 14 Direction: Left
Compute Free(18, 2)
If select 18 in Tree A #Subproblem: 13 Direction: Left
Compute Free(18, 3)
If select 18 in Tree A #Subproblem: 12 Direction: Left
Compute Free(18, 4)
If select 18 in Tree A #Subproblem: 11 Direction: Left
Compute Free(18, 5)
If select 18 in Tree A #Subproblem: 10 Direction: Left
Compute Free(18, 6)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 6)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 7)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 7)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 8)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 8)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 9)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 9)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 10)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 10)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 6] = 1
Compute Free(18, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(18, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(18, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(18, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(18, 10) = 1
Compute Free(18, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(18, 5)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 5] = 10
Compute Free(18, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(18, 5) = 10
Compute Free(18, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(18, 4)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 4] = 11
Compute Free(18, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(18, 4) = 11
Compute Free(18, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(18, 3)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 3] = 12
Compute Free(18, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(18, 3) = 12
Compute Free(18, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(18, 2)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 2] = 13
Compute Free(18, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(18, 2) = 13
Compute Free(18, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(18, 1)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 11)
If select 18 in Tree A #Subproblem: 14 Direction: Right
Compute Free(18, 12)
If select 18 in Tree A #Subproblem: 11 Direction: Left
Compute Free(18, 13)
If select 18 in Tree A #Subproblem: 10 Direction: Left
Compute Free(18, 14)
If select 18 in Tree A #Subproblem: 9 Direction: Left
Compute Free(18, 15)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(18, 16)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 16)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 17)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 17)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 18)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 18)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 19)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 19)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 16] = 1
Compute Free(18, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(18, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(18, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(18, 19) = 1
Compute Free(18, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(18, 15)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 15] = 8
Compute Free(18, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(18, 15) = 8
Compute Free(18, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(18, 14)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 14] = 9
Compute Free(18, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(18, 14) = 9
Compute Free(18, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(18, 13)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 13] = 10
Compute Free(18, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(18, 13) = 10
Compute Free(18, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(18, 12)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 20)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 20)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 12] = 11
Compute Free(18, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(18, 20) = 1
Compute Free(18, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(18, 11)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
LeftB[18, 1] = 14
Compute Free(18, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(18, 11) = 14
Compute Free(18, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(18, 0)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(19, 0)
If select 19 in Tree A #Subproblem: 39 Direction: Right
Compute Free(19, 1)
If select 19 in Tree A #Subproblem: 14 Direction: Left
Compute Free(19, 2)
If select 19 in Tree A #Subproblem: 13 Direction: Left
Compute Free(19, 3)
If select 19 in Tree A #Subproblem: 12 Direction: Left
Compute Free(19, 4)
If select 19 in Tree A #Subproblem: 11 Direction: Left
Compute Free(19, 5)
If select 19 in Tree A #Subproblem: 10 Direction: Left
Compute Free(19, 6)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 6)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 7)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 7)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 8)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 8)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 9)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 9)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 10)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 10)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 6] = 1
Compute Free(19, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(19, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(19, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(19, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(19, 10) = 1
Compute Free(19, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(19, 5)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 5] = 10
Compute Free(19, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(19, 5) = 10
Compute Free(19, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(19, 4)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 4] = 11
Compute Free(19, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(19, 4) = 11
Compute Free(19, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(19, 3)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 3] = 12
Compute Free(19, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(19, 3) = 12
Compute Free(19, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(19, 2)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 2] = 13
Compute Free(19, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(19, 2) = 13
Compute Free(19, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(19, 1)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 11)
If select 19 in Tree A #Subproblem: 14 Direction: Right
Compute Free(19, 12)
If select 19 in Tree A #Subproblem: 11 Direction: Left
Compute Free(19, 13)
If select 19 in Tree A #Subproblem: 10 Direction: Left
Compute Free(19, 14)
If select 19 in Tree A #Subproblem: 9 Direction: Left
Compute Free(19, 15)
If select 19 in Tree A #Subproblem: 8 Direction: Left
Compute Free(19, 16)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 16)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 17)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 17)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 18)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 18)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 19)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 19)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 16] = 1
Compute Free(19, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(19, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(19, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(19, 19) = 1
Compute Free(19, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(19, 15)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 15] = 8
Compute Free(19, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(19, 15) = 8
Compute Free(19, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(19, 14)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 14] = 9
Compute Free(19, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(19, 14) = 9
Compute Free(19, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(19, 13)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 13] = 10
Compute Free(19, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(19, 13) = 10
Compute Free(19, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(19, 12)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 20)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 20)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 12] = 11
Compute Free(19, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(19, 20) = 1
Compute Free(19, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(19, 11)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
LeftB[19, 1] = 14
Compute Free(19, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(19, 11) = 14
Compute Free(19, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(19, 0)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(20, 0)
If select 20 in Tree A #Subproblem: 39 Direction: Right
Compute Free(20, 1)
If select 20 in Tree A #Subproblem: 14 Direction: Left
Compute Free(20, 2)
If select 20 in Tree A #Subproblem: 13 Direction: Left
Compute Free(20, 3)
If select 20 in Tree A #Subproblem: 12 Direction: Left
Compute Free(20, 4)
If select 20 in Tree A #Subproblem: 11 Direction: Left
Compute Free(20, 5)
If select 20 in Tree A #Subproblem: 10 Direction: Left
Compute Free(20, 6)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 6)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 7)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 7)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 8)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 8)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 9)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 9)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 10)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 10)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 6] = 1
Compute Free(20, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(20, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(20, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(20, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(20, 10) = 1
Compute Free(20, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(20, 5)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 5] = 10
Compute Free(20, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(20, 5) = 10
Compute Free(20, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(20, 4)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 4] = 11
Compute Free(20, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(20, 4) = 11
Compute Free(20, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(20, 3)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 3] = 12
Compute Free(20, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(20, 3) = 12
Compute Free(20, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(20, 2)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 2] = 13
Compute Free(20, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(20, 2) = 13
Compute Free(20, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(20, 1)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 11)
If select 20 in Tree A #Subproblem: 14 Direction: Right
Compute Free(20, 12)
If select 20 in Tree A #Subproblem: 11 Direction: Left
Compute Free(20, 13)
If select 20 in Tree A #Subproblem: 10 Direction: Left
Compute Free(20, 14)
If select 20 in Tree A #Subproblem: 9 Direction: Left
Compute Free(20, 15)
If select 20 in Tree A #Subproblem: 8 Direction: Left
Compute Free(20, 16)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 16)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 17)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 17)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 18)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 18)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 19)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 19)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 16] = 1
Compute Free(20, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(20, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(20, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(20, 19) = 1
Compute Free(20, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(20, 15)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 15] = 8
Compute Free(20, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(20, 15) = 8
Compute Free(20, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(20, 14)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 14] = 9
Compute Free(20, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(20, 14) = 9
Compute Free(20, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(20, 13)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 13] = 10
Compute Free(20, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(20, 13) = 10
Compute Free(20, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(20, 12)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 20)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 20)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 12] = 11
Compute Free(20, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(20, 20) = 1
Compute Free(20, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(20, 11)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
LeftB[20, 1] = 14
Compute Free(20, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(20, 11) = 14
Compute Free(20, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(20, 0)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(16, 6)
If select 6 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 6] = 1
Compute Free(16, 6)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 6)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 6)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 6] set to 20
Compute Free(16, 6)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(16, 7)
If select 7 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 7] = 1
Compute Free(16, 7)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 7)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 7)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 7] set to 20
Compute Free(16, 7)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(16, 8)
If select 8 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 8] = 1
Compute Free(16, 8)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 8)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 8)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 8] set to 20
Compute Free(16, 8)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(16, 9)
If select 9 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 9] = 1
Compute Free(16, 9)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 9)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 9)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 9] set to 20
Compute Free(16, 9)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(16, 10)
If select 10 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 10] = 1
Compute Free(16, 10)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 10)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 10)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 10] set to 20
Compute Free(16, 10)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
LeftA[17, 5] = 10
Compute Free(16, 5)
If select 17(leftmost) in Tree A #Subproblem: 80 Direction: Right
Compute Free(16, 5)
If select 18 in Tree A #Subproblem: 110 Direction: Left
Compute Free(16, 5)
If select 19 in Tree A #Subproblem: 110 Direction: Left
RightA[20, 5] set to 20
Compute Free(16, 5)
If select 20(rightmost) in Tree A #Subproblem: 80 Direction: Left
LeftB[16, 6] = 8
Compute Free(16, 5)
If select 6(leftmost) in Tree B #Subproblem: 80 Direction: Right
Compute Free(16, 5)
If select 7 in Tree B #Subproblem: 98 Direction: Left
Compute Free(16, 5)
If select 8 in Tree B #Subproblem: 98 Direction: Left
Compute Free(16, 5)
If select 9 in Tree B #Subproblem: 98 Direction: Left
RightB(16, 10) = 8
Compute Free(16, 5)
If select 10(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(16, 5)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 4] = 11
Compute Free(16, 4)
If select 17(leftmost) in Tree A #Subproblem: 88 Direction: Right
Compute Free(16, 4)
If select 18 in Tree A #Subproblem: 118 Direction: Left
Compute Free(16, 4)
If select 19 in Tree A #Subproblem: 118 Direction: Left
RightA[20, 4] set to 20
Compute Free(16, 4)
If select 20(rightmost) in Tree A #Subproblem: 88 Direction: Left
LeftB[16, 5] = 80
Compute Free(16, 4)
If select 5(leftmost) in Tree B #Subproblem: 88 Direction: Right
bleftmost = 98
childrenB 7 = 92
childrenB 8 = 89
childrenB 9 = 86
brightmost = 40 + 40 = 80
RightB(16, 5) = 80
Compute Free(16, 4)
If select 5(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(16, 4)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 3] = 12
Compute Free(16, 3)
If select 17(leftmost) in Tree A #Subproblem: 96 Direction: Right
Compute Free(16, 3)
If select 18 in Tree A #Subproblem: 126 Direction: Left
Compute Free(16, 3)
If select 19 in Tree A #Subproblem: 126 Direction: Left
RightA[20, 3] set to 20
Compute Free(16, 3)
If select 20(rightmost) in Tree A #Subproblem: 96 Direction: Left
LeftB[16, 4] = 88
Compute Free(16, 3)
If select 4(leftmost) in Tree B #Subproblem: 96 Direction: Right
bleftmost = 109
brightmost = 80 + 8 = 88
RightB(16, 4) = 88
Compute Free(16, 3)
If select 4(rightmost) in Tree B #Subproblem: 96 Direction: Left
FreeS(16, 3)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 2] = 13
Compute Free(16, 2)
If select 17(leftmost) in Tree A #Subproblem: 104 Direction: Right
Compute Free(16, 2)
If select 18 in Tree A #Subproblem: 134 Direction: Left
Compute Free(16, 2)
If select 19 in Tree A #Subproblem: 134 Direction: Left
RightA[20, 2] set to 20
Compute Free(16, 2)
If select 20(rightmost) in Tree A #Subproblem: 104 Direction: Left
LeftB[16, 3] = 96
Compute Free(16, 2)
If select 3(leftmost) in Tree B #Subproblem: 104 Direction: Right
bleftmost = 120
brightmost = 88 + 8 = 96
RightB(16, 3) = 96
Compute Free(16, 2)
If select 3(rightmost) in Tree B #Subproblem: 104 Direction: Left
FreeS(16, 2)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 1] = 14
Compute Free(16, 1)
If select 17(leftmost) in Tree A #Subproblem: 112 Direction: Right
Compute Free(16, 1)
If select 18 in Tree A #Subproblem: 142 Direction: Left
Compute Free(16, 1)
If select 19 in Tree A #Subproblem: 142 Direction: Left
RightA[20, 1] set to 20
Compute Free(16, 1)
If select 20(rightmost) in Tree A #Subproblem: 112 Direction: Left
LeftB[16, 2] = 104
Compute Free(16, 1)
If select 2(leftmost) in Tree B #Subproblem: 112 Direction: Right
bleftmost = 131
brightmost = 96 + 8 = 104
RightB(16, 2) = 104
Compute Free(16, 1)
If select 2(rightmost) in Tree B #Subproblem: 112 Direction: Left
FreeS(16, 1)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 16)
If select 16 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 16] = 1
Compute Free(16, 16)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 16)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 16)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 16] set to 20
Compute Free(16, 16)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(16, 17)
If select 17 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 17] = 1
Compute Free(16, 17)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 17)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 17)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 17] set to 20
Compute Free(16, 17)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(16, 18)
If select 18 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 18] = 1
Compute Free(16, 18)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 18)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 18)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 18] set to 20
Compute Free(16, 18)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(16, 19)
If select 19 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 19] = 1
Compute Free(16, 19)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 19)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 19)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 19] set to 20
Compute Free(16, 19)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
LeftA[17, 15] = 8
Compute Free(16, 15)
If select 17(leftmost) in Tree A #Subproblem: 64 Direction: Right
Compute Free(16, 15)
If select 18 in Tree A #Subproblem: 79 Direction: Left
Compute Free(16, 15)
If select 19 in Tree A #Subproblem: 79 Direction: Left
RightA[20, 15] set to 20
Compute Free(16, 15)
If select 20(rightmost) in Tree A #Subproblem: 64 Direction: Left
LeftB[16, 16] = 8
Compute Free(16, 15)
If select 16(leftmost) in Tree B #Subproblem: 64 Direction: Right
Compute Free(16, 15)
If select 17 in Tree B #Subproblem: 79 Direction: Left
Compute Free(16, 15)
If select 18 in Tree B #Subproblem: 79 Direction: Left
RightB(16, 19) = 8
Compute Free(16, 15)
If select 19(rightmost) in Tree B #Subproblem: 64 Direction: Left
FreeS(16, 15)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 14] = 9
Compute Free(16, 14)
If select 17(leftmost) in Tree A #Subproblem: 72 Direction: Right
Compute Free(16, 14)
If select 18 in Tree A #Subproblem: 87 Direction: Left
Compute Free(16, 14)
If select 19 in Tree A #Subproblem: 87 Direction: Left
RightA[20, 14] set to 20
Compute Free(16, 14)
If select 20(rightmost) in Tree A #Subproblem: 72 Direction: Left
LeftB[16, 15] = 64
Compute Free(16, 14)
If select 15(leftmost) in Tree B #Subproblem: 72 Direction: Right
bleftmost = 79
childrenB 17 = 73
childrenB 18 = 70
brightmost = 32 + 32 = 64
RightB(16, 15) = 64
Compute Free(16, 14)
If select 15(rightmost) in Tree B #Subproblem: 72 Direction: Left
FreeS(16, 14)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 13] = 10
Compute Free(16, 13)
If select 17(leftmost) in Tree A #Subproblem: 80 Direction: Right
Compute Free(16, 13)
If select 18 in Tree A #Subproblem: 95 Direction: Left
Compute Free(16, 13)
If select 19 in Tree A #Subproblem: 95 Direction: Left
RightA[20, 13] set to 20
Compute Free(16, 13)
If select 20(rightmost) in Tree A #Subproblem: 80 Direction: Left
LeftB[16, 14] = 72
Compute Free(16, 13)
If select 14(leftmost) in Tree B #Subproblem: 80 Direction: Right
bleftmost = 90
brightmost = 64 + 8 = 72
RightB(16, 14) = 72
Compute Free(16, 13)
If select 14(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(16, 13)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 12] = 11
Compute Free(16, 12)
If select 17(leftmost) in Tree A #Subproblem: 88 Direction: Right
Compute Free(16, 12)
If select 18 in Tree A #Subproblem: 103 Direction: Left
Compute Free(16, 12)
If select 19 in Tree A #Subproblem: 103 Direction: Left
RightA[20, 12] set to 20
Compute Free(16, 12)
If select 20(rightmost) in Tree A #Subproblem: 88 Direction: Left
LeftB[16, 13] = 80
Compute Free(16, 12)
If select 13(leftmost) in Tree B #Subproblem: 88 Direction: Right
bleftmost = 101
brightmost = 72 + 8 = 80
RightB(16, 13) = 80
Compute Free(16, 12)
If select 13(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(16, 12)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 20)
If select 20 in Tree B #Subproblem: 8 Direction: Left
LeftA[17, 20] = 1
Compute Free(16, 20)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 20)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 20)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 20] set to 20
Compute Free(16, 20)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
LeftA[17, 11] = 14
Compute Free(16, 11)
If select 17(leftmost) in Tree A #Subproblem: 112 Direction: Right
Compute Free(16, 11)
If select 18 in Tree A #Subproblem: 162 Direction: Left
Compute Free(16, 11)
If select 19 in Tree A #Subproblem: 162 Direction: Left
RightA[20, 11] set to 20
Compute Free(16, 11)
If select 20(rightmost) in Tree A #Subproblem: 147 Direction: Left
LeftB[16, 12] = 88
Compute Free(16, 11)
If select 12(leftmost) in Tree B #Subproblem: 112 Direction: Right
RightB(16, 20) = 8
Compute Free(16, 11)
If select 20(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(16, 11)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
LeftA[17, 0] = 39
Compute Free(16, 0)
If select 17(leftmost) in Tree A #Subproblem: 312 Direction: Right
Compute Free(16, 0)
If select 18 in Tree A #Subproblem: 842 Direction: Left
Compute Free(16, 0)
If select 19 in Tree A #Subproblem: 842 Direction: Left
RightA[20, 0] set to 20
Compute Free(16, 0)
If select 20(rightmost) in Tree A #Subproblem: 347 Direction: Left
LeftB[16, 1] = 112
Compute Free(16, 0)
If select 1(leftmost) in Tree B #Subproblem: 312 Direction: Right
bleftmost = 142
brightmost = 96 + 72 = 168
RightB(16, 11) = 142
Compute Free(16, 0)
If select 11(rightmost) in Tree B #Subproblem: 342 Direction: Left
FreeS(16, 0)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 6)
If select 6 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 6] = 8
Compute Free(15, 6)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 6] set to 20
Compute Free(15, 6)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(15, 7)
If select 7 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 7] = 8
Compute Free(15, 7)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 7] set to 20
Compute Free(15, 7)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(15, 8)
If select 8 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 8] = 8
Compute Free(15, 8)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 8] set to 20
Compute Free(15, 8)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(15, 9)
If select 9 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 9] = 8
Compute Free(15, 9)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 9] set to 20
Compute Free(15, 9)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(15, 10)
If select 10 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 10] = 8
Compute Free(15, 10)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 10] set to 20
Compute Free(15, 10)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 40 + 40 = 80
LeftA[16, 5] = 80
Compute Free(15, 5)
If select 16(leftmost) in Tree A #Subproblem: 90 Direction: Right
RightA[16, 5] set to 20
Compute Free(15, 5)
If select 16(rightmost) in Tree A #Subproblem: 90 Direction: Left
LeftB[15, 6] = 9
Compute Free(15, 5)
If select 6(leftmost) in Tree B #Subproblem: 90 Direction: Right
Compute Free(15, 5)
If select 7 in Tree B #Subproblem: 108 Direction: Left
Compute Free(15, 5)
If select 8 in Tree B #Subproblem: 108 Direction: Left
Compute Free(15, 5)
If select 9 in Tree B #Subproblem: 108 Direction: Left
RightB(15, 10) = 9
Compute Free(15, 5)
If select 10(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(15, 5)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 44 + 44 = 88
LeftA[16, 4] = 88
Compute Free(15, 4)
If select 16(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[16, 4] set to 20
Compute Free(15, 4)
If select 16(rightmost) in Tree A #Subproblem: 99 Direction: Left
LeftB[15, 5] = 90
Compute Free(15, 4)
If select 5(leftmost) in Tree B #Subproblem: 99 Direction: Right
bleftmost = 108
childrenB 7 = 102
childrenB 8 = 99
childrenB 9 = 96
brightmost = 45 + 45 = 90
RightB(15, 5) = 90
Compute Free(15, 4)
If select 5(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(15, 4)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 48 + 48 = 96
LeftA[16, 3] = 96
Compute Free(15, 3)
If select 16(leftmost) in Tree A #Subproblem: 108 Direction: Right
RightA[16, 3] set to 20
Compute Free(15, 3)
If select 16(rightmost) in Tree A #Subproblem: 108 Direction: Left
LeftB[15, 4] = 99
Compute Free(15, 3)
If select 4(leftmost) in Tree B #Subproblem: 108 Direction: Right
bleftmost = 120
brightmost = 90 + 9 = 99
RightB(15, 4) = 99
Compute Free(15, 3)
If select 4(rightmost) in Tree B #Subproblem: 108 Direction: Left
FreeS(15, 3)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 52 + 52 = 104
LeftA[16, 2] = 104
Compute Free(15, 2)
If select 16(leftmost) in Tree A #Subproblem: 117 Direction: Right
RightA[16, 2] set to 20
Compute Free(15, 2)
If select 16(rightmost) in Tree A #Subproblem: 117 Direction: Left
LeftB[15, 3] = 108
Compute Free(15, 2)
If select 3(leftmost) in Tree B #Subproblem: 117 Direction: Right
bleftmost = 132
brightmost = 99 + 9 = 108
RightB(15, 3) = 108
Compute Free(15, 2)
If select 3(rightmost) in Tree B #Subproblem: 117 Direction: Left
FreeS(15, 2)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 56 + 56 = 112
LeftA[16, 1] = 112
Compute Free(15, 1)
If select 16(leftmost) in Tree A #Subproblem: 126 Direction: Right
RightA[16, 1] set to 20
Compute Free(15, 1)
If select 16(rightmost) in Tree A #Subproblem: 126 Direction: Left
LeftB[15, 2] = 117
Compute Free(15, 1)
If select 2(leftmost) in Tree B #Subproblem: 126 Direction: Right
bleftmost = 144
brightmost = 108 + 9 = 117
RightB(15, 2) = 117
Compute Free(15, 1)
If select 2(rightmost) in Tree B #Subproblem: 126 Direction: Left
FreeS(15, 1)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 16)
If select 16 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 16] = 8
Compute Free(15, 16)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 16] set to 20
Compute Free(15, 16)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(15, 17)
If select 17 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 17] = 8
Compute Free(15, 17)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 17] set to 20
Compute Free(15, 17)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(15, 18)
If select 18 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 18] = 8
Compute Free(15, 18)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 18] set to 20
Compute Free(15, 18)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(15, 19)
If select 19 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 19] = 8
Compute Free(15, 19)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 19] set to 20
Compute Free(15, 19)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 32 + 32 = 64
LeftA[16, 15] = 64
Compute Free(15, 15)
If select 16(leftmost) in Tree A #Subproblem: 72 Direction: Right
RightA[16, 15] set to 20
Compute Free(15, 15)
If select 16(rightmost) in Tree A #Subproblem: 72 Direction: Left
LeftB[15, 16] = 9
Compute Free(15, 15)
If select 16(leftmost) in Tree B #Subproblem: 72 Direction: Right
Compute Free(15, 15)
If select 17 in Tree B #Subproblem: 87 Direction: Left
Compute Free(15, 15)
If select 18 in Tree B #Subproblem: 87 Direction: Left
RightB(15, 19) = 9
Compute Free(15, 15)
If select 19(rightmost) in Tree B #Subproblem: 72 Direction: Left
FreeS(15, 15)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 36 + 36 = 72
LeftA[16, 14] = 72
Compute Free(15, 14)
If select 16(leftmost) in Tree A #Subproblem: 81 Direction: Right
RightA[16, 14] set to 20
Compute Free(15, 14)
If select 16(rightmost) in Tree A #Subproblem: 81 Direction: Left
LeftB[15, 15] = 72
Compute Free(15, 14)
If select 15(leftmost) in Tree B #Subproblem: 81 Direction: Right
bleftmost = 87
childrenB 17 = 81
childrenB 18 = 78
brightmost = 36 + 36 = 72
RightB(15, 15) = 72
Compute Free(15, 14)
If select 15(rightmost) in Tree B #Subproblem: 81 Direction: Left
FreeS(15, 14)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 40 + 40 = 80
LeftA[16, 13] = 80
Compute Free(15, 13)
If select 16(leftmost) in Tree A #Subproblem: 90 Direction: Right
RightA[16, 13] set to 20
Compute Free(15, 13)
If select 16(rightmost) in Tree A #Subproblem: 90 Direction: Left
LeftB[15, 14] = 81
Compute Free(15, 13)
If select 14(leftmost) in Tree B #Subproblem: 90 Direction: Right
bleftmost = 99
brightmost = 72 + 9 = 81
RightB(15, 14) = 81
Compute Free(15, 13)
If select 14(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(15, 13)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 44 + 44 = 88
LeftA[16, 12] = 88
Compute Free(15, 12)
If select 16(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[16, 12] set to 20
Compute Free(15, 12)
If select 16(rightmost) in Tree A #Subproblem: 99 Direction: Left
LeftB[15, 13] = 90
Compute Free(15, 12)
If select 13(leftmost) in Tree B #Subproblem: 99 Direction: Right
bleftmost = 111
brightmost = 81 + 9 = 90
RightB(15, 13) = 90
Compute Free(15, 12)
If select 13(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(15, 12)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 20)
If select 20 in Tree B #Subproblem: 9 Direction: Left
aleftmost = 4 + 4 = 8
LeftA[16, 20] = 8
Compute Free(15, 20)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 20] set to 20
Compute Free(15, 20)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 56 + 56 = 112
LeftA[16, 11] = 112
Compute Free(15, 11)
If select 16(leftmost) in Tree A #Subproblem: 126 Direction: Right
RightA[16, 11] set to 20
Compute Free(15, 11)
If select 16(rightmost) in Tree A #Subproblem: 168 Direction: Left
LeftB[15, 12] = 99
Compute Free(15, 11)
If select 12(leftmost) in Tree B #Subproblem: 126 Direction: Right
RightB(15, 20) = 9
Compute Free(15, 11)
If select 20(rightmost) in Tree B #Subproblem: 189 Direction: Left
FreeS(15, 11)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
aleftmost = 156 + 156 = 312
LeftA[16, 0] = 312
Compute Free(15, 0)
If select 16(leftmost) in Tree A #Subproblem: 351 Direction: Right
RightA[16, 0] set to 20
Compute Free(15, 0)
If select 16(rightmost) in Tree A #Subproblem: 393 Direction: Left
LeftB[15, 1] = 126
Compute Free(15, 0)
If select 1(leftmost) in Tree B #Subproblem: 351 Direction: Right
bleftmost = 156
brightmost = 108 + 81 = 189
RightB(15, 11) = 156
Compute Free(15, 0)
If select 11(rightmost) in Tree B #Subproblem: 381 Direction: Left
FreeS(15, 0)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 6)
If select 6 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 6] = 9
Compute Free(14, 6)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 6] set to 20
Compute Free(14, 6)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(14, 7)
If select 7 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 7] = 9
Compute Free(14, 7)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 7] set to 20
Compute Free(14, 7)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(14, 8)
If select 8 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 8] = 9
Compute Free(14, 8)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 8] set to 20
Compute Free(14, 8)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(14, 9)
If select 9 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 9] = 9
Compute Free(14, 9)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 9] set to 20
Compute Free(14, 9)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(14, 10)
If select 10 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 10] = 9
Compute Free(14, 10)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 10] set to 20
Compute Free(14, 10)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 80 + 10 = 90
LeftA[15, 5] = 90
Compute Free(14, 5)
If select 15(leftmost) in Tree A #Subproblem: 100 Direction: Right
RightA[15, 5] set to 20
Compute Free(14, 5)
If select 15(rightmost) in Tree A #Subproblem: 100 Direction: Left
LeftB[14, 6] = 10
Compute Free(14, 5)
If select 6(leftmost) in Tree B #Subproblem: 100 Direction: Right
Compute Free(14, 5)
If select 7 in Tree B #Subproblem: 118 Direction: Left
Compute Free(14, 5)
If select 8 in Tree B #Subproblem: 118 Direction: Left
Compute Free(14, 5)
If select 9 in Tree B #Subproblem: 118 Direction: Left
RightB(14, 10) = 10
Compute Free(14, 5)
If select 10(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(14, 5)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 88 + 11 = 99
LeftA[15, 4] = 99
Compute Free(14, 4)
If select 15(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[15, 4] set to 20
Compute Free(14, 4)
If select 15(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[14, 5] = 100
Compute Free(14, 4)
If select 5(leftmost) in Tree B #Subproblem: 110 Direction: Right
bleftmost = 118
childrenB 7 = 112
childrenB 8 = 109
childrenB 9 = 106
brightmost = 50 + 50 = 100
RightB(14, 5) = 100
Compute Free(14, 4)
If select 5(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(14, 4)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 96 + 12 = 108
LeftA[15, 3] = 108
Compute Free(14, 3)
If select 15(leftmost) in Tree A #Subproblem: 120 Direction: Right
RightA[15, 3] set to 20
Compute Free(14, 3)
If select 15(rightmost) in Tree A #Subproblem: 120 Direction: Left
LeftB[14, 4] = 110
Compute Free(14, 3)
If select 4(leftmost) in Tree B #Subproblem: 120 Direction: Right
bleftmost = 131
brightmost = 100 + 10 = 110
RightB(14, 4) = 110
Compute Free(14, 3)
If select 4(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(14, 3)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 104 + 13 = 117
LeftA[15, 2] = 117
Compute Free(14, 2)
If select 15(leftmost) in Tree A #Subproblem: 130 Direction: Right
RightA[15, 2] set to 20
Compute Free(14, 2)
If select 15(rightmost) in Tree A #Subproblem: 130 Direction: Left
LeftB[14, 3] = 120
Compute Free(14, 2)
If select 3(leftmost) in Tree B #Subproblem: 130 Direction: Right
bleftmost = 144
brightmost = 110 + 10 = 120
RightB(14, 3) = 120
Compute Free(14, 2)
If select 3(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(14, 2)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 112 + 14 = 126
LeftA[15, 1] = 126
Compute Free(14, 1)
If select 15(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[15, 1] set to 20
Compute Free(14, 1)
If select 15(rightmost) in Tree A #Subproblem: 140 Direction: Left
LeftB[14, 2] = 130
Compute Free(14, 1)
If select 2(leftmost) in Tree B #Subproblem: 140 Direction: Right
bleftmost = 157
brightmost = 120 + 10 = 130
RightB(14, 2) = 130
Compute Free(14, 1)
If select 2(rightmost) in Tree B #Subproblem: 140 Direction: Left
FreeS(14, 1)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 16)
If select 16 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 16] = 9
Compute Free(14, 16)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 16] set to 20
Compute Free(14, 16)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(14, 17)
If select 17 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 17] = 9
Compute Free(14, 17)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 17] set to 20
Compute Free(14, 17)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(14, 18)
If select 18 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 18] = 9
Compute Free(14, 18)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 18] set to 20
Compute Free(14, 18)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(14, 19)
If select 19 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 19] = 9
Compute Free(14, 19)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 19] set to 20
Compute Free(14, 19)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 64 + 8 = 72
LeftA[15, 15] = 72
Compute Free(14, 15)
If select 15(leftmost) in Tree A #Subproblem: 80 Direction: Right
RightA[15, 15] set to 20
Compute Free(14, 15)
If select 15(rightmost) in Tree A #Subproblem: 80 Direction: Left
LeftB[14, 16] = 10
Compute Free(14, 15)
If select 16(leftmost) in Tree B #Subproblem: 80 Direction: Right
Compute Free(14, 15)
If select 17 in Tree B #Subproblem: 95 Direction: Left
Compute Free(14, 15)
If select 18 in Tree B #Subproblem: 95 Direction: Left
RightB(14, 19) = 10
Compute Free(14, 15)
If select 19(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(14, 15)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 72 + 9 = 81
LeftA[15, 14] = 81
Compute Free(14, 14)
If select 15(leftmost) in Tree A #Subproblem: 90 Direction: Right
RightA[15, 14] set to 20
Compute Free(14, 14)
If select 15(rightmost) in Tree A #Subproblem: 90 Direction: Left
LeftB[14, 15] = 80
Compute Free(14, 14)
If select 15(leftmost) in Tree B #Subproblem: 90 Direction: Right
bleftmost = 95
childrenB 17 = 89
childrenB 18 = 86
brightmost = 40 + 40 = 80
RightB(14, 15) = 80
Compute Free(14, 14)
If select 15(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(14, 14)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 80 + 10 = 90
LeftA[15, 13] = 90
Compute Free(14, 13)
If select 15(leftmost) in Tree A #Subproblem: 100 Direction: Right
RightA[15, 13] set to 20
Compute Free(14, 13)
If select 15(rightmost) in Tree A #Subproblem: 100 Direction: Left
LeftB[14, 14] = 90
Compute Free(14, 13)
If select 14(leftmost) in Tree B #Subproblem: 100 Direction: Right
bleftmost = 108
brightmost = 80 + 10 = 90
RightB(14, 14) = 90
Compute Free(14, 13)
If select 14(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(14, 13)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 88 + 11 = 99
LeftA[15, 12] = 99
Compute Free(14, 12)
If select 15(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[15, 12] set to 20
Compute Free(14, 12)
If select 15(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[14, 13] = 100
Compute Free(14, 12)
If select 13(leftmost) in Tree B #Subproblem: 110 Direction: Right
bleftmost = 121
brightmost = 90 + 10 = 100
RightB(14, 13) = 100
Compute Free(14, 12)
If select 13(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(14, 12)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 20)
If select 20 in Tree B #Subproblem: 10 Direction: Left
aleftmost = 8 + 1 = 9
LeftA[15, 20] = 9
Compute Free(14, 20)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 20] set to 20
Compute Free(14, 20)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 112 + 14 = 126
LeftA[15, 11] = 126
Compute Free(14, 11)
If select 15(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[15, 11] set to 20
Compute Free(14, 11)
If select 15(rightmost) in Tree A #Subproblem: 189 Direction: Left
LeftB[14, 12] = 110
Compute Free(14, 11)
If select 12(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(14, 20) = 10
Compute Free(14, 11)
If select 20(rightmost) in Tree B #Subproblem: 210 Direction: Left
FreeS(14, 11)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
aleftmost = 312 + 39 = 351
LeftA[15, 0] = 351
Compute Free(14, 0)
If select 15(leftmost) in Tree A #Subproblem: 390 Direction: Right
RightA[15, 0] set to 20
Compute Free(14, 0)
If select 15(rightmost) in Tree A #Subproblem: 439 Direction: Left
LeftB[14, 1] = 140
Compute Free(14, 0)
If select 1(leftmost) in Tree B #Subproblem: 390 Direction: Right
bleftmost = 170
brightmost = 120 + 90 = 210
RightB(14, 11) = 170
Compute Free(14, 0)
If select 11(rightmost) in Tree B #Subproblem: 420 Direction: Left
FreeS(14, 0)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 6)
If select 6 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 6] = 10
Compute Free(13, 6)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 6] set to 20
Compute Free(13, 6)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(13, 7)
If select 7 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 7] = 10
Compute Free(13, 7)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 7] set to 20
Compute Free(13, 7)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(13, 8)
If select 8 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 8] = 10
Compute Free(13, 8)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 8] set to 20
Compute Free(13, 8)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(13, 9)
If select 9 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 9] = 10
Compute Free(13, 9)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 9] set to 20
Compute Free(13, 9)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(13, 10)
If select 10 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 10] = 10
Compute Free(13, 10)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 10] set to 20
Compute Free(13, 10)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 90 + 10 = 100
LeftA[14, 5] = 100
Compute Free(13, 5)
If select 14(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[14, 5] set to 20
Compute Free(13, 5)
If select 14(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[13, 6] = 11
Compute Free(13, 5)
If select 6(leftmost) in Tree B #Subproblem: 110 Direction: Right
Compute Free(13, 5)
If select 7 in Tree B #Subproblem: 128 Direction: Left
Compute Free(13, 5)
If select 8 in Tree B #Subproblem: 128 Direction: Left
Compute Free(13, 5)
If select 9 in Tree B #Subproblem: 128 Direction: Left
RightB(13, 10) = 11
Compute Free(13, 5)
If select 10(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(13, 5)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 99 + 11 = 110
LeftA[14, 4] = 110
Compute Free(13, 4)
If select 14(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[14, 4] set to 20
Compute Free(13, 4)
If select 14(rightmost) in Tree A #Subproblem: 121 Direction: Left
LeftB[13, 5] = 110
Compute Free(13, 4)
If select 5(leftmost) in Tree B #Subproblem: 121 Direction: Right
bleftmost = 128
childrenB 7 = 122
childrenB 8 = 119
childrenB 9 = 116
brightmost = 55 + 55 = 110
RightB(13, 5) = 110
Compute Free(13, 4)
If select 5(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(13, 4)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 108 + 12 = 120
LeftA[14, 3] = 120
Compute Free(13, 3)
If select 14(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[14, 3] set to 20
Compute Free(13, 3)
If select 14(rightmost) in Tree A #Subproblem: 132 Direction: Left
LeftB[13, 4] = 121
Compute Free(13, 3)
If select 4(leftmost) in Tree B #Subproblem: 132 Direction: Right
bleftmost = 142
brightmost = 110 + 11 = 121
RightB(13, 4) = 121
Compute Free(13, 3)
If select 4(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(13, 3)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 117 + 13 = 130
LeftA[14, 2] = 130
Compute Free(13, 2)
If select 14(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[14, 2] set to 20
Compute Free(13, 2)
If select 14(rightmost) in Tree A #Subproblem: 143 Direction: Left
LeftB[13, 3] = 132
Compute Free(13, 2)
If select 3(leftmost) in Tree B #Subproblem: 143 Direction: Right
bleftmost = 156
brightmost = 121 + 11 = 132
RightB(13, 3) = 132
Compute Free(13, 2)
If select 3(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(13, 2)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 126 + 14 = 140
LeftA[14, 1] = 140
Compute Free(13, 1)
If select 14(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[14, 1] set to 20
Compute Free(13, 1)
If select 14(rightmost) in Tree A #Subproblem: 154 Direction: Left
LeftB[13, 2] = 143
Compute Free(13, 1)
If select 2(leftmost) in Tree B #Subproblem: 154 Direction: Right
bleftmost = 170
brightmost = 132 + 11 = 143
RightB(13, 2) = 143
Compute Free(13, 1)
If select 2(rightmost) in Tree B #Subproblem: 154 Direction: Left
FreeS(13, 1)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 16)
If select 16 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 16] = 10
Compute Free(13, 16)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 16] set to 20
Compute Free(13, 16)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(13, 17)
If select 17 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 17] = 10
Compute Free(13, 17)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 17] set to 20
Compute Free(13, 17)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(13, 18)
If select 18 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 18] = 10
Compute Free(13, 18)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 18] set to 20
Compute Free(13, 18)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(13, 19)
If select 19 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 19] = 10
Compute Free(13, 19)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 19] set to 20
Compute Free(13, 19)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 72 + 8 = 80
LeftA[14, 15] = 80
Compute Free(13, 15)
If select 14(leftmost) in Tree A #Subproblem: 88 Direction: Right
RightA[14, 15] set to 20
Compute Free(13, 15)
If select 14(rightmost) in Tree A #Subproblem: 88 Direction: Left
LeftB[13, 16] = 11
Compute Free(13, 15)
If select 16(leftmost) in Tree B #Subproblem: 88 Direction: Right
Compute Free(13, 15)
If select 17 in Tree B #Subproblem: 103 Direction: Left
Compute Free(13, 15)
If select 18 in Tree B #Subproblem: 103 Direction: Left
RightB(13, 19) = 11
Compute Free(13, 15)
If select 19(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(13, 15)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 81 + 9 = 90
LeftA[14, 14] = 90
Compute Free(13, 14)
If select 14(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[14, 14] set to 20
Compute Free(13, 14)
If select 14(rightmost) in Tree A #Subproblem: 99 Direction: Left
LeftB[13, 15] = 88
Compute Free(13, 14)
If select 15(leftmost) in Tree B #Subproblem: 99 Direction: Right
bleftmost = 103
childrenB 17 = 97
childrenB 18 = 94
brightmost = 44 + 44 = 88
RightB(13, 15) = 88
Compute Free(13, 14)
If select 15(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(13, 14)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 90 + 10 = 100
LeftA[14, 13] = 100
Compute Free(13, 13)
If select 14(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[14, 13] set to 20
Compute Free(13, 13)
If select 14(rightmost) in Tree A #Subproblem: 110 Direction: Left
LeftB[13, 14] = 99
Compute Free(13, 13)
If select 14(leftmost) in Tree B #Subproblem: 110 Direction: Right
bleftmost = 117
brightmost = 88 + 11 = 99
RightB(13, 14) = 99
Compute Free(13, 13)
If select 14(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(13, 13)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 99 + 11 = 110
LeftA[14, 12] = 110
Compute Free(13, 12)
If select 14(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[14, 12] set to 20
Compute Free(13, 12)
If select 14(rightmost) in Tree A #Subproblem: 121 Direction: Left
LeftB[13, 13] = 110
Compute Free(13, 12)
If select 13(leftmost) in Tree B #Subproblem: 121 Direction: Right
bleftmost = 131
brightmost = 99 + 11 = 110
RightB(13, 13) = 110
Compute Free(13, 12)
If select 13(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(13, 12)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 20)
If select 20 in Tree B #Subproblem: 11 Direction: Left
aleftmost = 9 + 1 = 10
LeftA[14, 20] = 10
Compute Free(13, 20)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 20] set to 20
Compute Free(13, 20)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 126 + 14 = 140
LeftA[14, 11] = 140
Compute Free(13, 11)
If select 14(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[14, 11] set to 20
Compute Free(13, 11)
If select 14(rightmost) in Tree A #Subproblem: 210 Direction: Left
LeftB[13, 12] = 121
Compute Free(13, 11)
If select 12(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(13, 20) = 11
Compute Free(13, 11)
If select 20(rightmost) in Tree B #Subproblem: 231 Direction: Left
FreeS(13, 11)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
aleftmost = 351 + 39 = 390
LeftA[14, 0] = 390
Compute Free(13, 0)
If select 14(leftmost) in Tree A #Subproblem: 429 Direction: Right
RightA[14, 0] set to 20
Compute Free(13, 0)
If select 14(rightmost) in Tree A #Subproblem: 485 Direction: Left
LeftB[13, 1] = 154
Compute Free(13, 0)
If select 1(leftmost) in Tree B #Subproblem: 429 Direction: Right
bleftmost = 184
brightmost = 132 + 99 = 231
RightB(13, 11) = 184
Compute Free(13, 0)
If select 11(rightmost) in Tree B #Subproblem: 459 Direction: Left
FreeS(13, 0)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(21, 0)
If select 21 in Tree A #Subproblem: 39 Direction: Right
Compute Free(21, 1)
If select 21 in Tree A #Subproblem: 14 Direction: Left
Compute Free(21, 2)
If select 21 in Tree A #Subproblem: 13 Direction: Left
Compute Free(21, 3)
If select 21 in Tree A #Subproblem: 12 Direction: Left
Compute Free(21, 4)
If select 21 in Tree A #Subproblem: 11 Direction: Left
Compute Free(21, 5)
If select 21 in Tree A #Subproblem: 10 Direction: Left
Compute Free(21, 6)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 6)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 7)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 7)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 8)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 8)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 9)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 9)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 10)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 10)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 6] = 1
Compute Free(21, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(21, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(21, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(21, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(21, 10) = 1
Compute Free(21, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(21, 5)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 5] = 10
Compute Free(21, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
childrenB 7 = 10
childrenB 8 = 10
childrenB 9 = 10
brightmost = 5 + 5 = 10
RightB(21, 5) = 10
Compute Free(21, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(21, 4)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 4] = 11
Compute Free(21, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
bleftmost = 11
brightmost = 10 + 1 = 11
RightB(21, 4) = 11
Compute Free(21, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(21, 3)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 3] = 12
Compute Free(21, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
bleftmost = 12
brightmost = 11 + 1 = 12
RightB(21, 3) = 12
Compute Free(21, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(21, 2)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 2] = 13
Compute Free(21, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
bleftmost = 13
brightmost = 12 + 1 = 13
RightB(21, 2) = 13
Compute Free(21, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(21, 1)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 11)
If select 21 in Tree A #Subproblem: 14 Direction: Right
Compute Free(21, 12)
If select 21 in Tree A #Subproblem: 11 Direction: Left
Compute Free(21, 13)
If select 21 in Tree A #Subproblem: 10 Direction: Left
Compute Free(21, 14)
If select 21 in Tree A #Subproblem: 9 Direction: Left
Compute Free(21, 15)
If select 21 in Tree A #Subproblem: 8 Direction: Left
Compute Free(21, 16)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 16)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 17)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 17)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 18)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 18)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 19)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 19)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 16] = 1
Compute Free(21, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(21, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(21, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(21, 19) = 1
Compute Free(21, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(21, 15)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 15] = 8
Compute Free(21, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
bleftmost = 8
childrenB 17 = 8
childrenB 18 = 8
brightmost = 4 + 4 = 8
RightB(21, 15) = 8
Compute Free(21, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(21, 14)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 14] = 9
Compute Free(21, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
bleftmost = 9
brightmost = 8 + 1 = 9
RightB(21, 14) = 9
Compute Free(21, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(21, 13)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 13] = 10
Compute Free(21, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
bleftmost = 10
brightmost = 9 + 1 = 10
RightB(21, 13) = 10
Compute Free(21, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(21, 12)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 20)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 20)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 12] = 11
Compute Free(21, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(21, 20) = 1
Compute Free(21, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(21, 11)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
LeftB[21, 1] = 14
Compute Free(21, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
bleftmost = 14
brightmost = 12 + 9 = 21
RightB(21, 11) = 14
Compute Free(21, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(21, 0)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(12, 6)
If select 6 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 6] = 11
Compute Free(12, 6)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 6] set to 21
Compute Free(12, 6)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(12, 7)
If select 7 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 7] = 11
Compute Free(12, 7)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 7] set to 21
Compute Free(12, 7)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(12, 8)
If select 8 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 8] = 11
Compute Free(12, 8)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 8] set to 21
Compute Free(12, 8)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(12, 9)
If select 9 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 9] = 11
Compute Free(12, 9)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 9] set to 21
Compute Free(12, 9)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(12, 10)
If select 10 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 10] = 11
Compute Free(12, 10)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 10] set to 21
Compute Free(12, 10)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
aleftmost = 100 + 10 = 110
LeftA[13, 5] = 110
Compute Free(12, 5)
If select 13(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[21, 5] set to 21
Compute Free(12, 5)
If select 21(rightmost) in Tree A #Subproblem: 210 Direction: Left
LeftB[12, 6] = 14
Compute Free(12, 5)
If select 6(leftmost) in Tree B #Subproblem: 140 Direction: Right
Compute Free(12, 5)
If select 7 in Tree B #Subproblem: 200 Direction: Left
Compute Free(12, 5)
If select 8 in Tree B #Subproblem: 200 Direction: Left
Compute Free(12, 5)
If select 9 in Tree B #Subproblem: 200 Direction: Left
RightB(12, 10) = 21
Compute Free(12, 5)
If select 10(rightmost) in Tree B #Subproblem: 182 Direction: Left
FreeS(12, 5)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 110 + 11 = 121
LeftA[13, 4] = 121
Compute Free(12, 4)
If select 13(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[21, 4] set to 21
Compute Free(12, 4)
If select 21(rightmost) in Tree A #Subproblem: 231 Direction: Left
LeftB[12, 5] = 140
Compute Free(12, 4)
If select 5(leftmost) in Tree B #Subproblem: 154 Direction: Right
bleftmost = 200
childrenB 7 = 194
childrenB 8 = 191
childrenB 9 = 188
brightmost = 77 + 105 = 182
RightB(12, 5) = 182
Compute Free(12, 4)
If select 5(rightmost) in Tree B #Subproblem: 203 Direction: Left
FreeS(12, 4)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 120 + 12 = 132
LeftA[13, 3] = 132
Compute Free(12, 3)
If select 13(leftmost) in Tree A #Subproblem: 168 Direction: Right
RightA[21, 3] set to 21
Compute Free(12, 3)
If select 21(rightmost) in Tree A #Subproblem: 252 Direction: Left
LeftB[12, 4] = 154
Compute Free(12, 3)
If select 4(leftmost) in Tree B #Subproblem: 168 Direction: Right
bleftmost = 224
brightmost = 182 + 21 = 203
RightB(12, 4) = 203
Compute Free(12, 3)
If select 4(rightmost) in Tree B #Subproblem: 224 Direction: Left
FreeS(12, 3)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 130 + 13 = 143
LeftA[13, 2] = 143
Compute Free(12, 2)
If select 13(leftmost) in Tree A #Subproblem: 182 Direction: Right
RightA[21, 2] set to 21
Compute Free(12, 2)
If select 21(rightmost) in Tree A #Subproblem: 273 Direction: Left
LeftB[12, 3] = 168
Compute Free(12, 2)
If select 3(leftmost) in Tree B #Subproblem: 182 Direction: Right
bleftmost = 248
brightmost = 203 + 21 = 224
RightB(12, 3) = 224
Compute Free(12, 2)
If select 3(rightmost) in Tree B #Subproblem: 245 Direction: Left
FreeS(12, 2)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 140 + 14 = 154
LeftA[13, 1] = 154
Compute Free(12, 1)
If select 13(leftmost) in Tree A #Subproblem: 196 Direction: Right
RightA[21, 1] set to 21
Compute Free(12, 1)
If select 21(rightmost) in Tree A #Subproblem: 294 Direction: Left
LeftB[12, 2] = 182
Compute Free(12, 1)
If select 2(leftmost) in Tree B #Subproblem: 196 Direction: Right
bleftmost = 272
brightmost = 224 + 21 = 245
RightB(12, 2) = 245
Compute Free(12, 1)
If select 2(rightmost) in Tree B #Subproblem: 266 Direction: Left
FreeS(12, 1)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 16)
If select 16 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 16] = 11
Compute Free(12, 16)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 16] set to 21
Compute Free(12, 16)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(12, 17)
If select 17 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 17] = 11
Compute Free(12, 17)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 17] set to 21
Compute Free(12, 17)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(12, 18)
If select 18 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 18] = 11
Compute Free(12, 18)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 18] set to 21
Compute Free(12, 18)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(12, 19)
If select 19 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 19] = 11
Compute Free(12, 19)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 19] set to 21
Compute Free(12, 19)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
aleftmost = 80 + 8 = 88
LeftA[13, 15] = 88
Compute Free(12, 15)
If select 13(leftmost) in Tree A #Subproblem: 112 Direction: Right
RightA[21, 15] set to 21
Compute Free(12, 15)
If select 21(rightmost) in Tree A #Subproblem: 168 Direction: Left
LeftB[12, 16] = 14
Compute Free(12, 15)
If select 16(leftmost) in Tree B #Subproblem: 112 Direction: Right
Compute Free(12, 15)
If select 17 in Tree B #Subproblem: 162 Direction: Left
Compute Free(12, 15)
If select 18 in Tree B #Subproblem: 162 Direction: Left
RightB(12, 19) = 21
Compute Free(12, 15)
If select 19(rightmost) in Tree B #Subproblem: 147 Direction: Left
FreeS(12, 15)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 90 + 9 = 99
LeftA[13, 14] = 99
Compute Free(12, 14)
If select 13(leftmost) in Tree A #Subproblem: 126 Direction: Right
RightA[21, 14] set to 21
Compute Free(12, 14)
If select 21(rightmost) in Tree A #Subproblem: 189 Direction: Left
LeftB[12, 15] = 112
Compute Free(12, 14)
If select 15(leftmost) in Tree B #Subproblem: 126 Direction: Right
bleftmost = 162
childrenB 17 = 156
childrenB 18 = 153
brightmost = 63 + 84 = 147
RightB(12, 15) = 147
Compute Free(12, 14)
If select 15(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(12, 14)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 100 + 10 = 110
LeftA[13, 13] = 110
Compute Free(12, 13)
If select 13(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[21, 13] set to 21
Compute Free(12, 13)
If select 21(rightmost) in Tree A #Subproblem: 210 Direction: Left
LeftB[12, 14] = 126
Compute Free(12, 13)
If select 14(leftmost) in Tree B #Subproblem: 140 Direction: Right
bleftmost = 186
brightmost = 147 + 21 = 168
RightB(12, 14) = 168
Compute Free(12, 13)
If select 14(rightmost) in Tree B #Subproblem: 189 Direction: Left
FreeS(12, 13)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 110 + 11 = 121
LeftA[13, 12] = 121
Compute Free(12, 12)
If select 13(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[21, 12] set to 21
Compute Free(12, 12)
If select 21(rightmost) in Tree A #Subproblem: 231 Direction: Left
LeftB[12, 13] = 140
Compute Free(12, 12)
If select 13(leftmost) in Tree B #Subproblem: 154 Direction: Right
bleftmost = 210
brightmost = 168 + 21 = 189
RightB(12, 13) = 189
Compute Free(12, 12)
If select 13(rightmost) in Tree B #Subproblem: 210 Direction: Left
FreeS(12, 12)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 20)
If select 20 in Tree B #Subproblem: 14 Direction: Right
aleftmost = 10 + 1 = 11
LeftA[13, 20] = 11
Compute Free(12, 20)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 20] set to 21
Compute Free(12, 20)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
aleftmost = 140 + 14 = 154
LeftA[13, 11] = 154
Compute Free(12, 11)
If select 13(leftmost) in Tree A #Subproblem: 196 Direction: Right
RightA[21, 11] set to 21
Compute Free(12, 11)
If select 21(rightmost) in Tree A #Subproblem: 364 Direction: Left
LeftB[12, 12] = 154
Compute Free(12, 11)
If select 12(leftmost) in Tree B #Subproblem: 196 Direction: Right
RightB(12, 20) = 21
Compute Free(12, 11)
If select 20(rightmost) in Tree B #Subproblem: 364 Direction: Left
FreeS(12, 11)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
aleftmost = 390 + 39 = 429
LeftA[13, 0] = 429
Compute Free(12, 0)
If select 13(leftmost) in Tree A #Subproblem: 546 Direction: Right
RightA[21, 0] set to 21
Compute Free(12, 0)
If select 21(rightmost) in Tree A #Subproblem: 889 Direction: Left
LeftB[12, 1] = 196
Compute Free(12, 0)
If select 1(leftmost) in Tree B #Subproblem: 546 Direction: Right
bleftmost = 296
brightmost = 175 + 189 = 364
RightB(12, 11) = 296
Compute Free(12, 0)
If select 11(rightmost) in Tree B #Subproblem: 723 Direction: Left
FreeS(12, 0)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(0, 6)
If select 6 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 6] = 1
Compute Free(0, 6)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 6)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 6)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 6] set to 17
Compute Free(0, 6)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 6)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 7)
If select 7 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 7] = 1
Compute Free(0, 7)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 7)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 7)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 7] set to 17
Compute Free(0, 7)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 7)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 8)
If select 8 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 8] = 1
Compute Free(0, 8)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 8)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 8)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 8] set to 17
Compute Free(0, 8)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 8)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 9)
If select 9 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 9] = 1
Compute Free(0, 9)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 9)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 9)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 9] set to 17
Compute Free(0, 9)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 9)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 10)
If select 10 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 10] = 1
Compute Free(0, 10)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 10)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 10)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 10] set to 17
Compute Free(0, 10)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 10)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 5] = 10
Compute Free(0, 5)
If select 1(leftmost) in Tree A #Subproblem: 500 Direction: Right
Compute Free(0, 5)
If select 2 in Tree A #Subproblem: 552 Direction: Left
Compute Free(0, 5)
If select 11 in Tree A #Subproblem: 632 Direction: Left
RightA[12, 5] set to 17
Compute Free(0, 5)
If select 12(rightmost) in Tree A #Subproblem: 470 Direction: Left
LeftB[0, 6] = 50
Compute Free(0, 5)
If select 6(leftmost) in Tree B #Subproblem: 464 Direction: Right
Compute Free(0, 5)
If select 7 in Tree B #Subproblem: 1214 Direction: Left
Compute Free(0, 5)
If select 8 in Tree B #Subproblem: 1214 Direction: Left
Compute Free(0, 5)
If select 9 in Tree B #Subproblem: 1214 Direction: Left
RightB(0, 10) = 48
Compute Free(0, 5)
If select 10(rightmost) in Tree B #Subproblem: 452 Direction: Left
FreeS(0, 5)
Keynode: 10 in TreeB
Direction: left
Leaf: 10
LeftA[1, 4] = 11
Compute Free(0, 4)
If select 1(leftmost) in Tree A #Subproblem: 550 Direction: Right
Compute Free(0, 4)
If select 2 in Tree A #Subproblem: 594 Direction: Left
Compute Free(0, 4)
If select 11 in Tree A #Subproblem: 682 Direction: Left
RightA[12, 4] set to 17
Compute Free(0, 4)
If select 12(rightmost) in Tree A #Subproblem: 511 Direction: Left
LeftB[0, 5] = 464
Compute Free(0, 4)
If select 5(leftmost) in Tree B #Subproblem: 514 Direction: Right
bleftmost = 1214
childrenB 7 = 960
childrenB 8 = 833
childrenB 9 = 706
brightmost = 212 + 240 = 452
RightB(0, 5) = 452
Compute Free(0, 4)
If select 5(rightmost) in Tree B #Subproblem: 500 Direction: Left
FreeS(0, 4)
Keynode: 5 in TreeB
Direction: left
Leaf: 10
LeftA[1, 3] = 12
Compute Free(0, 3)
If select 1(leftmost) in Tree A #Subproblem: 600 Direction: Right
Compute Free(0, 3)
If select 2 in Tree A #Subproblem: 636 Direction: Left
Compute Free(0, 3)
If select 11 in Tree A #Subproblem: 732 Direction: Left
RightA[12, 3] set to 17
Compute Free(0, 3)
If select 12(rightmost) in Tree A #Subproblem: 552 Direction: Left
LeftB[0, 4] = 514
Compute Free(0, 3)
If select 4(leftmost) in Tree B #Subproblem: 564 Direction: Right
bleftmost = 1389
brightmost = 452 + 48 = 500
RightB(0, 4) = 500
Compute Free(0, 3)
If select 4(rightmost) in Tree B #Subproblem: 548 Direction: Left
FreeS(0, 3)
Keynode: 4 in TreeB
Direction: left
Leaf: 10
LeftA[1, 2] = 13
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 650 Direction: Right
Compute Free(0, 2)
If select 2 in Tree A #Subproblem: 678 Direction: Left
Compute Free(0, 2)
If select 11 in Tree A #Subproblem: 782 Direction: Left
RightA[12, 2] set to 17
Compute Free(0, 2)
If select 12(rightmost) in Tree A #Subproblem: 593 Direction: Left
LeftB[0, 3] = 564
Compute Free(0, 2)
If select 3(leftmost) in Tree B #Subproblem: 614 Direction: Right
bleftmost = 1564
brightmost = 500 + 48 = 548
RightB(0, 3) = 548
Compute Free(0, 2)
If select 3(rightmost) in Tree B #Subproblem: 596 Direction: Left
FreeS(0, 2)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 1] = 14
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 700 Direction: Right
Compute Free(0, 1)
If select 2 in Tree A #Subproblem: 720 Direction: Left
Compute Free(0, 1)
If select 11 in Tree A #Subproblem: 832 Direction: Left
RightA[12, 1] set to 17
Compute Free(0, 1)
If select 12(rightmost) in Tree A #Subproblem: 634 Direction: Left
LeftB[0, 2] = 614
Compute Free(0, 1)
If select 2(leftmost) in Tree B #Subproblem: 664 Direction: Right
bleftmost = 1739
brightmost = 548 + 48 = 596
RightB(0, 2) = 596
Compute Free(0, 1)
If select 2(rightmost) in Tree B #Subproblem: 644 Direction: Left
FreeS(0, 1)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 16)
If select 16 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 16] = 1
Compute Free(0, 16)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 16)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 16)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 16] set to 17
Compute Free(0, 16)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 16)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 17)
If select 17 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 17] = 1
Compute Free(0, 17)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 17)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 17)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 17] set to 17
Compute Free(0, 17)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 17)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 18)
If select 18 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 18] = 1
Compute Free(0, 18)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 18)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 18)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 18] set to 17
Compute Free(0, 18)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 18)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 19)
If select 19 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 19] = 1
Compute Free(0, 19)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 19)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 19)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 19] set to 17
Compute Free(0, 19)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 19)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 15] = 8
Compute Free(0, 15)
If select 1(leftmost) in Tree A #Subproblem: 400 Direction: Right
Compute Free(0, 15)
If select 2 in Tree A #Subproblem: 402 Direction: Left
Compute Free(0, 15)
If select 11 in Tree A #Subproblem: 466 Direction: Left
RightA[12, 15] set to 17
Compute Free(0, 15)
If select 12(rightmost) in Tree A #Subproblem: 358 Direction: Left
LeftB[0, 16] = 50
Compute Free(0, 15)
If select 16(leftmost) in Tree B #Subproblem: 373 Direction: Right
Compute Free(0, 15)
If select 17 in Tree B #Subproblem: 998 Direction: Left
Compute Free(0, 15)
If select 18 in Tree B #Subproblem: 998 Direction: Left
RightB(0, 19) = 48
Compute Free(0, 15)
If select 19(rightmost) in Tree B #Subproblem: 363 Direction: Left
FreeS(0, 15)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 14] = 9
Compute Free(0, 14)
If select 1(leftmost) in Tree A #Subproblem: 450 Direction: Right
Compute Free(0, 14)
If select 2 in Tree A #Subproblem: 444 Direction: Left
Compute Free(0, 14)
If select 11 in Tree A #Subproblem: 516 Direction: Left
RightA[12, 14] set to 17
Compute Free(0, 14)
If select 12(rightmost) in Tree A #Subproblem: 399 Direction: Left
LeftB[0, 15] = 373
Compute Free(0, 14)
If select 15(leftmost) in Tree B #Subproblem: 423 Direction: Right
bleftmost = 998
childrenB 17 = 744
childrenB 18 = 617
brightmost = 171 + 192 = 363
RightB(0, 15) = 363
Compute Free(0, 14)
If select 15(rightmost) in Tree B #Subproblem: 411 Direction: Left
FreeS(0, 14)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 13] = 10
Compute Free(0, 13)
If select 1(leftmost) in Tree A #Subproblem: 500 Direction: Right
Compute Free(0, 13)
If select 2 in Tree A #Subproblem: 486 Direction: Left
Compute Free(0, 13)
If select 11 in Tree A #Subproblem: 566 Direction: Left
RightA[12, 13] set to 17
Compute Free(0, 13)
If select 12(rightmost) in Tree A #Subproblem: 440 Direction: Left
LeftB[0, 14] = 423
Compute Free(0, 13)
If select 14(leftmost) in Tree B #Subproblem: 473 Direction: Right
bleftmost = 1173
brightmost = 363 + 48 = 411
RightB(0, 14) = 411
Compute Free(0, 13)
If select 14(rightmost) in Tree B #Subproblem: 459 Direction: Left
FreeS(0, 13)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 12] = 11
Compute Free(0, 12)
If select 1(leftmost) in Tree A #Subproblem: 550 Direction: Right
Compute Free(0, 12)
If select 2 in Tree A #Subproblem: 528 Direction: Left
Compute Free(0, 12)
If select 11 in Tree A #Subproblem: 616 Direction: Left
RightA[12, 12] set to 17
Compute Free(0, 12)
If select 12(rightmost) in Tree A #Subproblem: 481 Direction: Left
LeftB[0, 13] = 473
Compute Free(0, 12)
If select 13(leftmost) in Tree B #Subproblem: 523 Direction: Right
bleftmost = 1348
brightmost = 411 + 48 = 459
RightB(0, 13) = 459
Compute Free(0, 12)
If select 13(rightmost) in Tree B #Subproblem: 507 Direction: Left
FreeS(0, 12)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 20)
If select 20 in Tree B #Subproblem: 50 Direction: Left
LeftA[1, 20] = 1
Compute Free(0, 20)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 20)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 20)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 20] set to 17
Compute Free(0, 20)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 20)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
LeftA[1, 11] = 14
Compute Free(0, 11)
If select 1(leftmost) in Tree A #Subproblem: 700 Direction: Right
Compute Free(0, 11)
If select 2 in Tree A #Subproblem: 808 Direction: Left
Compute Free(0, 11)
If select 11 in Tree A #Subproblem: 920 Direction: Left
RightA[12, 11] set to 17
Compute Free(0, 11)
If select 12(rightmost) in Tree A #Subproblem: 758 Direction: Left
LeftB[0, 12] = 523
Compute Free(0, 11)
If select 12(leftmost) in Tree B #Subproblem: 664 Direction: Right
RightB(0, 20) = 48
Compute Free(0, 11)
If select 20(rightmost) in Tree B #Subproblem: 961 Direction: Left
FreeS(0, 11)
Keynode: 12 in TreeB
Direction: rightLeaf: 16
LeftA[1, 0] = 39
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 1950 Direction: Right
Compute Free(0, 0)
If select 2 in Tree A #Subproblem: 3970 Direction: Left
Compute Free(0, 0)
If select 11 in Tree A #Subproblem: 4282 Direction: Left
RightA[12, 0] set to 21
Compute Free(0, 0)
If select 12(rightmost) in Tree A #Subproblem: 2026 Direction: Left
LeftB[0, 1] = 664
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 1878 Direction: Right
bleftmost = 1914
brightmost = 529 + 432 = 961
RightB(0, 11) = 961
Compute Free(0, 0)
If select 11(rightmost) in Tree B #Subproblem: 2123 Direction: Left
FreeS(0, 0)
Keynode: 1 in TreeB
Direction: rightLeaf: 6
1 is a leaf
set S[1, 6] = 1
set S[1, 7] = 1
set S[1, 8] = 1
set S[1, 9] = 1
set S[1, 10] = 1
set S[1, 5] = 1
set S[1, 4] = 1
set S[1, 3] = 1
set S[1, 2] = 1
set S[1, 1] = 1
set S[1, 16] = 1
set S[1, 17] = 1
set S[1, 18] = 1
set S[1, 19] = 1
set S[1, 15] = 1
set S[1, 14] = 1
set S[1, 13] = 1
set S[1, 12] = 1
set S[1, 20] = 1
set S[1, 11] = 1
set S[1, 0] = 1
compute 1, 6
parent i = 0 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 5] = -1.000000
cost2_I[5] = -1.000000
S[1, 6] = 6
compute 1, 7
parent i = 0 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 5] = -1.000000
S[1, 7] = 7
compute 1, 8
parent i = 0 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 5] = -1.000000
S[1, 8] = 8
compute 1, 9
parent i = 0 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 5] = -1.000000
S[1, 9] = 9
compute 1, 10
parent i = 0 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 5] = -1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[1, 10] = 10
compute 1, 5
parent i = 0 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost1_I[0, 4] = -10.000000
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[1, 5] = 6
compute 1, 4
parent i = 0 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost1_I[0, 3] = -11.000000
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[1, 4] = 6
compute 1, 3
parent i = 0 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost1_I[0, 2] = -12.000000
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[1, 3] = 6
compute 1, 2
parent i = 0 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost1_I[0, 1] = -13.000000
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[1, 2] = 6
compute 1, 1
parent i = 0 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost1_I[0, 0] = -14.000000
cost2_I[0] = -10.000000
S[1, 1] = 6
compute 1, 16
parent i = 0 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 15] = -1.000000
cost2_I[15] = -1.000000
S[1, 16] = 16
compute 1, 17
parent i = 0 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 15] = -1.000000
S[1, 17] = 17
compute 1, 18
parent i = 0 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 15] = -1.000000
S[1, 18] = 18
compute 1, 19
parent i = 0 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 15] = -1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[1, 19] = 19
compute 1, 15
parent i = 0 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost1_I[0, 14] = -8.000000
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[1, 15] = 16
compute 1, 14
parent i = 0 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost1_I[0, 13] = -9.000000
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[1, 14] = 16
compute 1, 13
parent i = 0 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost1_I[0, 12] = -10.000000
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[1, 13] = 16
compute 1, 12
parent i = 0 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost1_I[0, 11] = -11.000000
cost2_I[11] = -8.000000
S[1, 12] = 16
compute 1, 20
parent i = 0 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 1 = 1 tmpCost = 1.000000
right leaf(i) in 1 = 1 tmpCost = 1.000000
cost1_I[0, 11] = -1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[1, 20] = 20
compute 1, 11
parent i = 0 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost1_I[0, 0] = -14.000000
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[1, 11] = 16
compute 1, 0
parent i = 0 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
cost1_I[0, 0] = -39.000000
S[1, 0] = 6
6 is a leaf
set S[6, 6] = 6
set S[6, 7] = 6
set S[6, 8] = 6
set S[6, 9] = 6
set S[6, 10] = 6
set S[6, 5] = 6
set S[6, 4] = 6
set S[6, 3] = 6
set S[6, 2] = 6
set S[6, 1] = 6
set S[6, 16] = 6
set S[6, 17] = 6
set S[6, 18] = 6
set S[6, 19] = 6
set S[6, 15] = 6
set S[6, 14] = 6
set S[6, 13] = 6
set S[6, 12] = 6
set S[6, 20] = 6
set S[6, 11] = 6
set S[6, 0] = 6
compute 6, 6
parent i = 5 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 5] = -1.000000
cost2_I[5] = -1.000000
S[6, 6] = 6
compute 6, 7
parent i = 5 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 5] = -1.000000
S[6, 7] = 7
compute 6, 8
parent i = 5 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 5] = -1.000000
S[6, 8] = 8
compute 6, 9
parent i = 5 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 5] = -1.000000
S[6, 9] = 9
compute 6, 10
parent i = 5 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 5] = -1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[6, 10] = 10
compute 6, 5
parent i = 5 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost1_I[5, 4] = -10.000000
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[6, 5] = 6
compute 6, 4
parent i = 5 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost1_I[5, 3] = -11.000000
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[6, 4] = 6
compute 6, 3
parent i = 5 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost1_I[5, 2] = -12.000000
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[6, 3] = 6
compute 6, 2
parent i = 5 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost1_I[5, 1] = -13.000000
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[6, 2] = 6
compute 6, 1
parent i = 5 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost1_I[5, 0] = -14.000000
cost2_I[0] = -10.000000
S[6, 1] = 6
compute 6, 16
parent i = 5 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 15] = -1.000000
cost2_I[15] = -1.000000
S[6, 16] = 16
compute 6, 17
parent i = 5 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 15] = -1.000000
S[6, 17] = 17
compute 6, 18
parent i = 5 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 15] = -1.000000
S[6, 18] = 18
compute 6, 19
parent i = 5 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 15] = -1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[6, 19] = 19
compute 6, 15
parent i = 5 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost1_I[5, 14] = -8.000000
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[6, 15] = 16
compute 6, 14
parent i = 5 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost1_I[5, 13] = -9.000000
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[6, 14] = 16
compute 6, 13
parent i = 5 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost1_I[5, 12] = -10.000000
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[6, 13] = 16
compute 6, 12
parent i = 5 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost1_I[5, 11] = -11.000000
cost2_I[11] = -8.000000
S[6, 12] = 16
compute 6, 20
parent i = 5 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 6 = 6 tmpCost = 1.000000
right leaf(i) in 6 = 6 tmpCost = 1.000000
cost1_I[5, 11] = -1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[6, 20] = 20
compute 6, 11
parent i = 5 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost1_I[5, 0] = -14.000000
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[6, 11] = 16
compute 6, 0
parent i = 5 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
cost1_I[5, 0] = -39.000000
S[6, 0] = 6
7 is a leaf
set S[7, 6] = 7
set S[7, 7] = 7
set S[7, 8] = 7
set S[7, 9] = 7
set S[7, 10] = 7
set S[7, 5] = 7
set S[7, 4] = 7
set S[7, 3] = 7
set S[7, 2] = 7
set S[7, 1] = 7
set S[7, 16] = 7
set S[7, 17] = 7
set S[7, 18] = 7
set S[7, 19] = 7
set S[7, 15] = 7
set S[7, 14] = 7
set S[7, 13] = 7
set S[7, 12] = 7
set S[7, 20] = 7
set S[7, 11] = 7
set S[7, 0] = 7
compute 7, 6
parent i = 5 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
cost2_I[5] = -1.000000
S[7, 6] = 6
compute 7, 7
parent i = 5 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
S[7, 7] = 7
compute 7, 8
parent i = 5 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
S[7, 8] = 8
compute 7, 9
parent i = 5 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
S[7, 9] = 9
compute 7, 10
parent i = 5 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[7, 10] = 10
compute 7, 5
parent i = 5 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[7, 5] = 6
compute 7, 4
parent i = 5 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[7, 4] = 6
compute 7, 3
parent i = 5 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[7, 3] = 6
compute 7, 2
parent i = 5 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[7, 2] = 6
compute 7, 1
parent i = 5 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost2_I[0] = -10.000000
S[7, 1] = 6
compute 7, 16
parent i = 5 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
cost2_I[15] = -1.000000
S[7, 16] = 16
compute 7, 17
parent i = 5 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
S[7, 17] = 17
compute 7, 18
parent i = 5 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
S[7, 18] = 18
compute 7, 19
parent i = 5 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[7, 19] = 19
compute 7, 15
parent i = 5 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[7, 15] = 16
compute 7, 14
parent i = 5 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[7, 14] = 16
compute 7, 13
parent i = 5 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[7, 13] = 16
compute 7, 12
parent i = 5 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost2_I[11] = -8.000000
S[7, 12] = 16
compute 7, 20
parent i = 5 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 7 = 7 tmpCost = 1.000000
right leaf(i) in 7 = 7 tmpCost = 1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[7, 20] = 20
compute 7, 11
parent i = 5 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[7, 11] = 16
compute 7, 0
parent i = 5 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
S[7, 0] = 6
8 is a leaf
set S[8, 6] = 8
set S[8, 7] = 8
set S[8, 8] = 8
set S[8, 9] = 8
set S[8, 10] = 8
set S[8, 5] = 8
set S[8, 4] = 8
set S[8, 3] = 8
set S[8, 2] = 8
set S[8, 1] = 8
set S[8, 16] = 8
set S[8, 17] = 8
set S[8, 18] = 8
set S[8, 19] = 8
set S[8, 15] = 8
set S[8, 14] = 8
set S[8, 13] = 8
set S[8, 12] = 8
set S[8, 20] = 8
set S[8, 11] = 8
set S[8, 0] = 8
compute 8, 6
parent i = 5 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
cost2_I[5] = -1.000000
S[8, 6] = 6
compute 8, 7
parent i = 5 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
S[8, 7] = 7
compute 8, 8
parent i = 5 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
S[8, 8] = 8
compute 8, 9
parent i = 5 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
S[8, 9] = 9
compute 8, 10
parent i = 5 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[8, 10] = 10
compute 8, 5
parent i = 5 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[8, 5] = 6
compute 8, 4
parent i = 5 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[8, 4] = 6
compute 8, 3
parent i = 5 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[8, 3] = 6
compute 8, 2
parent i = 5 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[8, 2] = 6
compute 8, 1
parent i = 5 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost2_I[0] = -10.000000
S[8, 1] = 6
compute 8, 16
parent i = 5 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
cost2_I[15] = -1.000000
S[8, 16] = 16
compute 8, 17
parent i = 5 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
S[8, 17] = 17
compute 8, 18
parent i = 5 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
S[8, 18] = 18
compute 8, 19
parent i = 5 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[8, 19] = 19
compute 8, 15
parent i = 5 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[8, 15] = 16
compute 8, 14
parent i = 5 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[8, 14] = 16
compute 8, 13
parent i = 5 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[8, 13] = 16
compute 8, 12
parent i = 5 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost2_I[11] = -8.000000
S[8, 12] = 16
compute 8, 20
parent i = 5 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 8 = 8 tmpCost = 1.000000
right leaf(i) in 8 = 8 tmpCost = 1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[8, 20] = 20
compute 8, 11
parent i = 5 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[8, 11] = 16
compute 8, 0
parent i = 5 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
S[8, 0] = 6
9 is a leaf
set S[9, 6] = 9
set S[9, 7] = 9
set S[9, 8] = 9
set S[9, 9] = 9
set S[9, 10] = 9
set S[9, 5] = 9
set S[9, 4] = 9
set S[9, 3] = 9
set S[9, 2] = 9
set S[9, 1] = 9
set S[9, 16] = 9
set S[9, 17] = 9
set S[9, 18] = 9
set S[9, 19] = 9
set S[9, 15] = 9
set S[9, 14] = 9
set S[9, 13] = 9
set S[9, 12] = 9
set S[9, 20] = 9
set S[9, 11] = 9
set S[9, 0] = 9
compute 9, 6
parent i = 5 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
cost2_I[5] = -1.000000
S[9, 6] = 6
compute 9, 7
parent i = 5 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
S[9, 7] = 7
compute 9, 8
parent i = 5 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
S[9, 8] = 8
compute 9, 9
parent i = 5 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
S[9, 9] = 9
compute 9, 10
parent i = 5 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[9, 10] = 10
compute 9, 5
parent i = 5 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[9, 5] = 6
compute 9, 4
parent i = 5 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[9, 4] = 6
compute 9, 3
parent i = 5 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[9, 3] = 6
compute 9, 2
parent i = 5 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[9, 2] = 6
compute 9, 1
parent i = 5 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost2_I[0] = -10.000000
S[9, 1] = 6
compute 9, 16
parent i = 5 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
cost2_I[15] = -1.000000
S[9, 16] = 16
compute 9, 17
parent i = 5 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
S[9, 17] = 17
compute 9, 18
parent i = 5 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
S[9, 18] = 18
compute 9, 19
parent i = 5 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[9, 19] = 19
compute 9, 15
parent i = 5 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[9, 15] = 16
compute 9, 14
parent i = 5 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[9, 14] = 16
compute 9, 13
parent i = 5 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[9, 13] = 16
compute 9, 12
parent i = 5 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost2_I[11] = -8.000000
S[9, 12] = 16
compute 9, 20
parent i = 5 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 9 = 9 tmpCost = 1.000000
right leaf(i) in 9 = 9 tmpCost = 1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[9, 20] = 20
compute 9, 11
parent i = 5 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[9, 11] = 16
compute 9, 0
parent i = 5 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
S[9, 0] = 6
10 is a leaf
set S[10, 6] = 10
set S[10, 7] = 10
set S[10, 8] = 10
set S[10, 9] = 10
set S[10, 10] = 10
set S[10, 5] = 10
set S[10, 4] = 10
set S[10, 3] = 10
set S[10, 2] = 10
set S[10, 1] = 10
set S[10, 16] = 10
set S[10, 17] = 10
set S[10, 18] = 10
set S[10, 19] = 10
set S[10, 15] = 10
set S[10, 14] = 10
set S[10, 13] = 10
set S[10, 12] = 10
set S[10, 20] = 10
set S[10, 11] = 10
set S[10, 0] = 10
compute 10, 6
parent i = 5 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 6](-1.000000) += cost1_R[10, 6](5.000000) = 4.000000
cost2_I[5] = -1.000000
S[10, 6] = 6
compute 10, 7
parent i = 5 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 7](-1.000000) += cost1_R[10, 7](5.000000) = 4.000000
S[10, 7] = 7
compute 10, 8
parent i = 5 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 8](-1.000000) += cost1_R[10, 8](5.000000) = 4.000000
S[10, 8] = 8
compute 10, 9
parent i = 5 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 9](-1.000000) += cost1_R[10, 9](5.000000) = 4.000000
S[10, 9] = 9
compute 10, 10
parent i = 5 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 10](-1.000000) += cost1_R[10, 10](5.000000) = 4.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[10, 10] = 10
compute 10, 5
parent i = 5 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost1_I[5, 5](-10.000000) += cost1_R[10, 5](50.000000) = 40.000000
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[10, 5] = 6
compute 10, 4
parent i = 5 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost1_I[5, 4](-11.000000) += cost1_R[10, 4](55.000000) = 44.000000
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[10, 4] = 6
compute 10, 3
parent i = 5 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost1_I[5, 3](-12.000000) += cost1_R[10, 3](60.000000) = 48.000000
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[10, 3] = 6
compute 10, 2
parent i = 5 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost1_I[5, 2](-13.000000) += cost1_R[10, 2](65.000000) = 52.000000
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[10, 2] = 6
compute 10, 1
parent i = 5 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost1_I[5, 1](-14.000000) += cost1_R[10, 1](70.000000) = 56.000000
cost2_I[0] = -10.000000
S[10, 1] = 6
compute 10, 16
parent i = 5 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 16](-1.000000) += cost1_R[10, 16](5.000000) = 4.000000
cost2_I[15] = -1.000000
S[10, 16] = 16
compute 10, 17
parent i = 5 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 17](-1.000000) += cost1_R[10, 17](5.000000) = 4.000000
S[10, 17] = 17
compute 10, 18
parent i = 5 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 18](-1.000000) += cost1_R[10, 18](5.000000) = 4.000000
S[10, 18] = 18
compute 10, 19
parent i = 5 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 19](-1.000000) += cost1_R[10, 19](5.000000) = 4.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[10, 19] = 19
compute 10, 15
parent i = 5 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost1_I[5, 15](-8.000000) += cost1_R[10, 15](40.000000) = 32.000000
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[10, 15] = 16
compute 10, 14
parent i = 5 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost1_I[5, 14](-9.000000) += cost1_R[10, 14](45.000000) = 36.000000
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[10, 14] = 16
compute 10, 13
parent i = 5 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost1_I[5, 13](-10.000000) += cost1_R[10, 13](50.000000) = 40.000000
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[10, 13] = 16
compute 10, 12
parent i = 5 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost1_I[5, 12](-11.000000) += cost1_R[10, 12](55.000000) = 44.000000
cost2_I[11] = -8.000000
S[10, 12] = 16
compute 10, 20
parent i = 5 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 10 = 10 tmpCost = 1.000000
right leaf(i) in 10 = 10 tmpCost = 1.000000
cost1_I[5, 20](-1.000000) += cost1_R[10, 20](5.000000) = 4.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[10, 20] = 20
compute 10, 11
parent i = 5 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost1_I[5, 11](-14.000000) += cost1_R[10, 11](70.000000) = 56.000000
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[10, 11] = 16
compute 10, 0
parent i = 5 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
cost1_I[5, 0](-39.000000) += cost1_R[10, 0](195.000000) = 156.000000
S[10, 0] = 6
compute 5, 6
parent i = 4 parent j = 5
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 6] = 4.000000
cost1_I[4, 5] = -6.000000
cost1_I[4, 6](-6.000000) += cost1_R[5, 6](10.000000) = 4.000000
cost2_I[5] = -10.000000
S[5, 6] = 6
compute 5, 7
parent i = 4 parent j = 5
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 7] = 4.000000
cost1_I[4, 5] = -6.000000
cost1_I[4, 7](-6.000000) += cost1_R[5, 7](10.000000) = 4.000000
S[5, 7] = 6
compute 5, 8
parent i = 4 parent j = 5
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 8] = 4.000000
cost1_I[4, 5] = -6.000000
cost1_I[4, 8](-6.000000) += cost1_R[5, 8](10.000000) = 4.000000
S[5, 8] = 6
compute 5, 9
parent i = 4 parent j = 5
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 9] = 4.000000
cost1_I[4, 5] = -6.000000
cost1_I[4, 9](-6.000000) += cost1_R[5, 9](10.000000) = 4.000000
S[5, 9] = 6
compute 5, 10
parent i = 4 parent j = 5
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 10] = 4.000000
cost1_I[4, 5] = -6.000000
cost1_I[4, 10](-6.000000) += cost1_R[5, 10](10.000000) = 4.000000
cost2_I[5](-10.000000) += cost2_R[5](50.000000) = 40.000000
S[5, 10] = 6
compute 5, 5
parent i = 4 parent j = 4
left leaf(i) in 5 = 6 tmpCost = 100.000000
right leaf(i) in 5 = 10 tmpCost = 100.000000
special leaf(i) in 5 = 6 tmpCost = 136.000000 cost1_I[5, 5] = 40.000000
left leaf(j) in 5 = 6 tmpCost = 100.000000
right leaf(j) in 5 = 10 tmpCost = 100.000000
special leaf(j) in 5 = 6 tmpCost = 136.000000 cost2_I[5] = 40
cost1_I[4, 4] = -60.000000
cost1_I[4, 5](-60.000000) += cost1_R[5, 5](100.000000) = 40.000000
cost2_I[4] = -60.000000
cost2_I[4](-60.000000) += cost2_R[4](100.000000) = 40.000000
S[5, 5] = 6
compute 5, 4
parent i = 4 parent j = 3
left leaf(i) in 5 = 6 tmpCost = 110.000000
right leaf(i) in 5 = 10 tmpCost = 110.000000
special leaf(i) in 5 = 6 tmpCost = 146.000000 cost1_I[5, 4] = 44.000000
left leaf(j) in 4 = 6 tmpCost = 110.000000
right leaf(j) in 4 = 10 tmpCost = 110.000000
special leaf(j) in 4 = 6 tmpCost = 152.000000 cost2_I[4] = 40
cost1_I[4, 3] = -66.000000
cost1_I[4, 4](-66.000000) += cost1_R[5, 4](110.000000) = 44.000000
cost2_I[3] = -70.000000
cost2_I[3](-70.000000) += cost2_R[3](110.000000) = 40.000000
S[5, 4] = 6
compute 5, 3
parent i = 4 parent j = 2
left leaf(i) in 5 = 6 tmpCost = 120.000000
right leaf(i) in 5 = 10 tmpCost = 120.000000
special leaf(i) in 5 = 6 tmpCost = 156.000000 cost1_I[5, 3] = 48.000000
left leaf(j) in 3 = 6 tmpCost = 120.000000
right leaf(j) in 3 = 10 tmpCost = 120.000000
special leaf(j) in 3 = 6 tmpCost = 168.000000 cost2_I[3] = 40
cost1_I[4, 2] = -72.000000
cost1_I[4, 3](-72.000000) += cost1_R[5, 3](120.000000) = 48.000000
cost2_I[2] = -80.000000
cost2_I[2](-80.000000) += cost2_R[2](120.000000) = 40.000000
S[5, 3] = 6
compute 5, 2
parent i = 4 parent j = 1
left leaf(i) in 5 = 6 tmpCost = 130.000000
right leaf(i) in 5 = 10 tmpCost = 130.000000
special leaf(i) in 5 = 6 tmpCost = 166.000000 cost1_I[5, 2] = 52.000000
left leaf(j) in 2 = 6 tmpCost = 130.000000
right leaf(j) in 2 = 10 tmpCost = 130.000000
special leaf(j) in 2 = 6 tmpCost = 184.000000 cost2_I[2] = 40
cost1_I[4, 1] = -78.000000
cost1_I[4, 2](-78.000000) += cost1_R[5, 2](130.000000) = 52.000000
cost2_I[1] = -90.000000
cost2_I[1](-90.000000) += cost2_R[1](130.000000) = 40.000000
S[5, 2] = 6
compute 5, 1
parent i = 4 parent j = 0
left leaf(i) in 5 = 6 tmpCost = 140.000000
right leaf(i) in 5 = 10 tmpCost = 140.000000
special leaf(i) in 5 = 6 tmpCost = 176.000000 cost1_I[5, 1] = 56.000000
left leaf(j) in 1 = 6 tmpCost = 140.000000
right leaf(j) in 1 = 10 tmpCost = 140.000000
special leaf(j) in 1 = 6 tmpCost = 200.000000 cost2_I[1] = 40
cost1_I[4, 0] = -84.000000
cost1_I[4, 1](-84.000000) += cost1_R[5, 1](140.000000) = 56.000000
cost2_I[0] = -100.000000
S[5, 1] = 6
compute 5, 16
parent i = 4 parent j = 15
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 16] = 4.000000
cost1_I[4, 15] = -6.000000
cost1_I[4, 16](-6.000000) += cost1_R[5, 16](10.000000) = 4.000000
cost2_I[15] = -10.000000
S[5, 16] = 6
compute 5, 17
parent i = 4 parent j = 15
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 17] = 4.000000
cost1_I[4, 15] = -6.000000
cost1_I[4, 17](-6.000000) += cost1_R[5, 17](10.000000) = 4.000000
S[5, 17] = 6
compute 5, 18
parent i = 4 parent j = 15
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 18] = 4.000000
cost1_I[4, 15] = -6.000000
cost1_I[4, 18](-6.000000) += cost1_R[5, 18](10.000000) = 4.000000
S[5, 18] = 6
compute 5, 19
parent i = 4 parent j = 15
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 19] = 4.000000
cost1_I[4, 15] = -6.000000
cost1_I[4, 19](-6.000000) += cost1_R[5, 19](10.000000) = 4.000000
cost2_I[15](-10.000000) += cost2_R[15](40.000000) = 30.000000
S[5, 19] = 6
compute 5, 15
parent i = 4 parent j = 14
left leaf(i) in 5 = 6 tmpCost = 80.000000
right leaf(i) in 5 = 10 tmpCost = 80.000000
special leaf(i) in 5 = 6 tmpCost = 98.000000 cost1_I[5, 15] = 32.000000
left leaf(j) in 15 = 16 tmpCost = 80.000000
right leaf(j) in 15 = 19 tmpCost = 80.000000
special leaf(j) in 15 = 16 tmpCost = 110.000000 cost2_I[15] = 30
cost1_I[4, 14] = -48.000000
cost1_I[4, 15](-48.000000) += cost1_R[5, 15](80.000000) = 32.000000
cost2_I[14] = -50.000000
cost2_I[14](-50.000000) += cost2_R[14](80.000000) = 30.000000
S[5, 15] = 6
compute 5, 14
parent i = 4 parent j = 13
left leaf(i) in 5 = 6 tmpCost = 90.000000
right leaf(i) in 5 = 10 tmpCost = 90.000000
special leaf(i) in 5 = 6 tmpCost = 108.000000 cost1_I[5, 14] = 36.000000
left leaf(j) in 14 = 16 tmpCost = 90.000000
right leaf(j) in 14 = 19 tmpCost = 90.000000
special leaf(j) in 14 = 16 tmpCost = 126.000000 cost2_I[14] = 30
cost1_I[4, 13] = -54.000000
cost1_I[4, 14](-54.000000) += cost1_R[5, 14](90.000000) = 36.000000
cost2_I[13] = -60.000000
cost2_I[13](-60.000000) += cost2_R[13](90.000000) = 30.000000
S[5, 14] = 6
compute 5, 13
parent i = 4 parent j = 12
left leaf(i) in 5 = 6 tmpCost = 100.000000
right leaf(i) in 5 = 10 tmpCost = 100.000000
special leaf(i) in 5 = 6 tmpCost = 118.000000 cost1_I[5, 13] = 40.000000
left leaf(j) in 13 = 16 tmpCost = 100.000000
right leaf(j) in 13 = 19 tmpCost = 100.000000
special leaf(j) in 13 = 16 tmpCost = 142.000000 cost2_I[13] = 30
cost1_I[4, 12] = -60.000000
cost1_I[4, 13](-60.000000) += cost1_R[5, 13](100.000000) = 40.000000
cost2_I[12] = -70.000000
cost2_I[12](-70.000000) += cost2_R[12](100.000000) = 30.000000
S[5, 13] = 6
compute 5, 12
parent i = 4 parent j = 11
left leaf(i) in 5 = 6 tmpCost = 110.000000
right leaf(i) in 5 = 10 tmpCost = 110.000000
special leaf(i) in 5 = 6 tmpCost = 128.000000 cost1_I[5, 12] = 44.000000
left leaf(j) in 12 = 16 tmpCost = 110.000000
right leaf(j) in 12 = 19 tmpCost = 110.000000
special leaf(j) in 12 = 16 tmpCost = 158.000000 cost2_I[12] = 30
cost1_I[4, 11] = -66.000000
cost1_I[4, 12](-66.000000) += cost1_R[5, 12](110.000000) = 44.000000
cost2_I[11] = -80.000000
S[5, 12] = 6
compute 5, 20
parent i = 4 parent j = 11
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
left leaf(i) in 5 = 6 tmpCost = 10.000000
right leaf(i) in 5 = 10 tmpCost = 10.000000
special leaf(i) in 5 = 6 tmpCost = 10.000000 cost1_I[5, 20] = 4.000000
cost1_I[4, 11] = -6.000000
cost1_I[4, 20](-6.000000) += cost1_R[5, 20](10.000000) = 4.000000
cost2_I[11](-80.000000) += cost2_R[11](120.000000) = 40.000000
S[5, 20] = 6
compute 5, 11
parent i = 4 parent j = 0
left leaf(i) in 5 = 6 tmpCost = 140.000000
right leaf(i) in 5 = 10 tmpCost = 182.000000
special leaf(i) in 5 = 6 tmpCost = 200.000000 cost1_I[5, 11] = 56.000000
left leaf(j) in 11 = 16 tmpCost = 140.000000
right leaf(j) in 11 = 20 tmpCost = 210.000000
special leaf(j) in 11 = 16 tmpCost = 200.000000 cost2_I[11] = 40
cost1_I[4, 0] = -84.000000
cost1_I[4, 11](-84.000000) += cost1_R[5, 11](140.000000) = 56.000000
cost2_I[0](-100.000000) += cost2_R[0](280.000000) = 180.000000
S[5, 11] = 6
compute 5, 0
parent i = 4 parent j = NULL
left leaf(i) in 5 = 6 tmpCost = 390.000000
right leaf(i) in 5 = 10 tmpCost = 432.000000
special leaf(i) in 5 = 6 tmpCost = 1026.000000 cost1_I[5, 0] = 156.000000
left leaf(j) in 0 = 6 tmpCost = 390.000000
right leaf(j) in 0 = 20 tmpCost = 460.000000
special leaf(j) in 0 = 6 tmpCost = 516.000000 cost2_I[0] = 180
cost1_I[4, 0] = -234.000000
cost1_I[4, 0](-234.000000) += cost1_R[5, 0](390.000000) = 156.000000
S[5, 0] = 6
compute 4, 6
parent i = 3 parent j = 5
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 6] = 4.000000
cost1_I[3, 5] = -7.000000
cost1_I[3, 6](-7.000000) += cost1_R[4, 6](11.000000) = 4.000000
cost2_I[5] = -11.000000
S[4, 6] = 6
compute 4, 7
parent i = 3 parent j = 5
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 7] = 4.000000
cost1_I[3, 5] = -7.000000
cost1_I[3, 7](-7.000000) += cost1_R[4, 7](11.000000) = 4.000000
S[4, 7] = 6
compute 4, 8
parent i = 3 parent j = 5
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 8] = 4.000000
cost1_I[3, 5] = -7.000000
cost1_I[3, 8](-7.000000) += cost1_R[4, 8](11.000000) = 4.000000
S[4, 8] = 6
compute 4, 9
parent i = 3 parent j = 5
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 9] = 4.000000
cost1_I[3, 5] = -7.000000
cost1_I[3, 9](-7.000000) += cost1_R[4, 9](11.000000) = 4.000000
S[4, 9] = 6
compute 4, 10
parent i = 3 parent j = 5
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 10] = 4.000000
cost1_I[3, 5] = -7.000000
cost1_I[3, 10](-7.000000) += cost1_R[4, 10](11.000000) = 4.000000
cost2_I[5](-11.000000) += cost2_R[5](55.000000) = 44.000000
S[4, 10] = 6
compute 4, 5
parent i = 3 parent j = 4
left leaf(i) in 4 = 6 tmpCost = 110.000000
right leaf(i) in 4 = 10 tmpCost = 110.000000
special leaf(i) in 4 = 6 tmpCost = 152.000000 cost1_I[4, 5] = 40.000000
left leaf(j) in 5 = 6 tmpCost = 110.000000
right leaf(j) in 5 = 10 tmpCost = 110.000000
special leaf(j) in 5 = 6 tmpCost = 146.000000 cost2_I[5] = 44
cost1_I[3, 4] = -70.000000
cost1_I[3, 5](-70.000000) += cost1_R[4, 5](110.000000) = 40.000000
cost2_I[4] = -66.000000
cost2_I[4](-66.000000) += cost2_R[4](110.000000) = 44.000000
S[4, 5] = 6
compute 4, 4
parent i = 3 parent j = 3
left leaf(i) in 4 = 6 tmpCost = 121.000000
right leaf(i) in 4 = 10 tmpCost = 121.000000
special leaf(i) in 4 = 6 tmpCost = 163.000000 cost1_I[4, 4] = 44.000000
left leaf(j) in 4 = 6 tmpCost = 121.000000
right leaf(j) in 4 = 10 tmpCost = 121.000000
special leaf(j) in 4 = 6 tmpCost = 163.000000 cost2_I[4] = 44
cost1_I[3, 3] = -77.000000
cost1_I[3, 4](-77.000000) += cost1_R[4, 4](121.000000) = 44.000000
cost2_I[3] = -77.000000
cost2_I[3](-77.000000) += cost2_R[3](121.000000) = 44.000000
S[4, 4] = 6
compute 4, 3
parent i = 3 parent j = 2
left leaf(i) in 4 = 6 tmpCost = 132.000000
right leaf(i) in 4 = 10 tmpCost = 132.000000
special leaf(i) in 4 = 6 tmpCost = 174.000000 cost1_I[4, 3] = 48.000000
left leaf(j) in 3 = 6 tmpCost = 132.000000
right leaf(j) in 3 = 10 tmpCost = 132.000000
special leaf(j) in 3 = 6 tmpCost = 180.000000 cost2_I[3] = 44
cost1_I[3, 2] = -84.000000
cost1_I[3, 3](-84.000000) += cost1_R[4, 3](132.000000) = 48.000000
cost2_I[2] = -88.000000
cost2_I[2](-88.000000) += cost2_R[2](132.000000) = 44.000000
S[4, 3] = 6
compute 4, 2
parent i = 3 parent j = 1
left leaf(i) in 4 = 6 tmpCost = 143.000000
right leaf(i) in 4 = 10 tmpCost = 143.000000
special leaf(i) in 4 = 6 tmpCost = 185.000000 cost1_I[4, 2] = 52.000000
left leaf(j) in 2 = 6 tmpCost = 143.000000
right leaf(j) in 2 = 10 tmpCost = 143.000000
special leaf(j) in 2 = 6 tmpCost = 197.000000 cost2_I[2] = 44
cost1_I[3, 1] = -91.000000
cost1_I[3, 2](-91.000000) += cost1_R[4, 2](143.000000) = 52.000000
cost2_I[1] = -99.000000
cost2_I[1](-99.000000) += cost2_R[1](143.000000) = 44.000000
S[4, 2] = 6
compute 4, 1
parent i = 3 parent j = 0
left leaf(i) in 4 = 6 tmpCost = 154.000000
right leaf(i) in 4 = 10 tmpCost = 154.000000
special leaf(i) in 4 = 6 tmpCost = 196.000000 cost1_I[4, 1] = 56.000000
left leaf(j) in 1 = 6 tmpCost = 154.000000
right leaf(j) in 1 = 10 tmpCost = 154.000000
special leaf(j) in 1 = 6 tmpCost = 214.000000 cost2_I[1] = 44
cost1_I[3, 0] = -98.000000
cost1_I[3, 1](-98.000000) += cost1_R[4, 1](154.000000) = 56.000000
cost2_I[0] = -110.000000
S[4, 1] = 6
compute 4, 16
parent i = 3 parent j = 15
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 16] = 4.000000
cost1_I[3, 15] = -7.000000
cost1_I[3, 16](-7.000000) += cost1_R[4, 16](11.000000) = 4.000000
cost2_I[15] = -11.000000
S[4, 16] = 6
compute 4, 17
parent i = 3 parent j = 15
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 17] = 4.000000
cost1_I[3, 15] = -7.000000
cost1_I[3, 17](-7.000000) += cost1_R[4, 17](11.000000) = 4.000000
S[4, 17] = 6
compute 4, 18
parent i = 3 parent j = 15
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 18] = 4.000000
cost1_I[3, 15] = -7.000000
cost1_I[3, 18](-7.000000) += cost1_R[4, 18](11.000000) = 4.000000
S[4, 18] = 6
compute 4, 19
parent i = 3 parent j = 15
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 19] = 4.000000
cost1_I[3, 15] = -7.000000
cost1_I[3, 19](-7.000000) += cost1_R[4, 19](11.000000) = 4.000000
cost2_I[15](-11.000000) += cost2_R[15](44.000000) = 33.000000
S[4, 19] = 6
compute 4, 15
parent i = 3 parent j = 14
left leaf(i) in 4 = 6 tmpCost = 88.000000
right leaf(i) in 4 = 10 tmpCost = 88.000000
special leaf(i) in 4 = 6 tmpCost = 109.000000 cost1_I[4, 15] = 32.000000
left leaf(j) in 15 = 16 tmpCost = 88.000000
right leaf(j) in 15 = 19 tmpCost = 88.000000
special leaf(j) in 15 = 16 tmpCost = 118.000000 cost2_I[15] = 33
cost1_I[3, 14] = -56.000000
cost1_I[3, 15](-56.000000) += cost1_R[4, 15](88.000000) = 32.000000
cost2_I[14] = -55.000000
cost2_I[14](-55.000000) += cost2_R[14](88.000000) = 33.000000
S[4, 15] = 6
compute 4, 14
parent i = 3 parent j = 13
left leaf(i) in 4 = 6 tmpCost = 99.000000
right leaf(i) in 4 = 10 tmpCost = 99.000000
special leaf(i) in 4 = 6 tmpCost = 120.000000 cost1_I[4, 14] = 36.000000
left leaf(j) in 14 = 16 tmpCost = 99.000000
right leaf(j) in 14 = 19 tmpCost = 99.000000
special leaf(j) in 14 = 16 tmpCost = 135.000000 cost2_I[14] = 33
cost1_I[3, 13] = -63.000000
cost1_I[3, 14](-63.000000) += cost1_R[4, 14](99.000000) = 36.000000
cost2_I[13] = -66.000000
cost2_I[13](-66.000000) += cost2_R[13](99.000000) = 33.000000
S[4, 14] = 6
compute 4, 13
parent i = 3 parent j = 12
left leaf(i) in 4 = 6 tmpCost = 110.000000
right leaf(i) in 4 = 10 tmpCost = 110.000000
special leaf(i) in 4 = 6 tmpCost = 131.000000 cost1_I[4, 13] = 40.000000
left leaf(j) in 13 = 16 tmpCost = 110.000000
right leaf(j) in 13 = 19 tmpCost = 110.000000
special leaf(j) in 13 = 16 tmpCost = 152.000000 cost2_I[13] = 33
cost1_I[3, 12] = -70.000000
cost1_I[3, 13](-70.000000) += cost1_R[4, 13](110.000000) = 40.000000
cost2_I[12] = -77.000000
cost2_I[12](-77.000000) += cost2_R[12](110.000000) = 33.000000
S[4, 13] = 6
compute 4, 12
parent i = 3 parent j = 11
left leaf(i) in 4 = 6 tmpCost = 121.000000
right leaf(i) in 4 = 10 tmpCost = 121.000000
special leaf(i) in 4 = 6 tmpCost = 142.000000 cost1_I[4, 12] = 44.000000
left leaf(j) in 12 = 16 tmpCost = 121.000000
right leaf(j) in 12 = 19 tmpCost = 121.000000
special leaf(j) in 12 = 16 tmpCost = 169.000000 cost2_I[12] = 33
cost1_I[3, 11] = -77.000000
cost1_I[3, 12](-77.000000) += cost1_R[4, 12](121.000000) = 44.000000
cost2_I[11] = -88.000000
S[4, 12] = 6
compute 4, 20
parent i = 3 parent j = 11
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
left leaf(i) in 4 = 6 tmpCost = 11.000000
right leaf(i) in 4 = 10 tmpCost = 11.000000
special leaf(i) in 4 = 6 tmpCost = 11.000000 cost1_I[4, 20] = 4.000000
cost1_I[3, 11] = -7.000000
cost1_I[3, 20](-7.000000) += cost1_R[4, 20](11.000000) = 4.000000
cost2_I[11](-88.000000) += cost2_R[11](132.000000) = 44.000000
S[4, 20] = 6
compute 4, 11
parent i = 3 parent j = 0
left leaf(i) in 4 = 6 tmpCost = 154.000000
right leaf(i) in 4 = 10 tmpCost = 203.000000
special leaf(i) in 4 = 6 tmpCost = 224.000000 cost1_I[4, 11] = 56.000000
left leaf(j) in 11 = 16 tmpCost = 154.000000
right leaf(j) in 11 = 20 tmpCost = 231.000000
special leaf(j) in 11 = 16 tmpCost = 214.000000 cost2_I[11] = 44
cost1_I[3, 0] = -98.000000
cost1_I[3, 11](-98.000000) += cost1_R[4, 11](154.000000) = 56.000000
cost2_I[0](-110.000000) += cost2_R[0](308.000000) = 198.000000
S[4, 11] = 6
compute 4, 0
parent i = 3 parent j = NULL
left leaf(i) in 4 = 6 tmpCost = 429.000000
right leaf(i) in 4 = 10 tmpCost = 478.000000
special leaf(i) in 4 = 6 tmpCost = 1171.000000 cost1_I[4, 0] = 156.000000
left leaf(j) in 0 = 6 tmpCost = 429.000000
right leaf(j) in 0 = 20 tmpCost = 506.000000
special leaf(j) in 0 = 6 tmpCost = 555.000000 cost2_I[0] = 198
cost1_I[3, 0] = -273.000000
cost1_I[3, 0](-273.000000) += cost1_R[4, 0](429.000000) = 156.000000
S[4, 0] = 6
compute 3, 6
parent i = 2 parent j = 5
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 6] = 4.000000
cost1_I[2, 5] = -8.000000
cost1_I[2, 6](-8.000000) += cost1_R[3, 6](12.000000) = 4.000000
cost2_I[5] = -12.000000
S[3, 6] = 6
compute 3, 7
parent i = 2 parent j = 5
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 7] = 4.000000
cost1_I[2, 5] = -8.000000
cost1_I[2, 7](-8.000000) += cost1_R[3, 7](12.000000) = 4.000000
S[3, 7] = 6
compute 3, 8
parent i = 2 parent j = 5
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 8] = 4.000000
cost1_I[2, 5] = -8.000000
cost1_I[2, 8](-8.000000) += cost1_R[3, 8](12.000000) = 4.000000
S[3, 8] = 6
compute 3, 9
parent i = 2 parent j = 5
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 9] = 4.000000
cost1_I[2, 5] = -8.000000
cost1_I[2, 9](-8.000000) += cost1_R[3, 9](12.000000) = 4.000000
S[3, 9] = 6
compute 3, 10
parent i = 2 parent j = 5
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 10] = 4.000000
cost1_I[2, 5] = -8.000000
cost1_I[2, 10](-8.000000) += cost1_R[3, 10](12.000000) = 4.000000
cost2_I[5](-12.000000) += cost2_R[5](60.000000) = 48.000000
S[3, 10] = 6
compute 3, 5
parent i = 2 parent j = 4
left leaf(i) in 3 = 6 tmpCost = 120.000000
right leaf(i) in 3 = 10 tmpCost = 120.000000
special leaf(i) in 3 = 6 tmpCost = 168.000000 cost1_I[3, 5] = 40.000000
left leaf(j) in 5 = 6 tmpCost = 120.000000
right leaf(j) in 5 = 10 tmpCost = 120.000000
special leaf(j) in 5 = 6 tmpCost = 156.000000 cost2_I[5] = 48
cost1_I[2, 4] = -80.000000
cost1_I[2, 5](-80.000000) += cost1_R[3, 5](120.000000) = 40.000000
cost2_I[4] = -72.000000
cost2_I[4](-72.000000) += cost2_R[4](120.000000) = 48.000000
S[3, 5] = 6
compute 3, 4
parent i = 2 parent j = 3
left leaf(i) in 3 = 6 tmpCost = 132.000000
right leaf(i) in 3 = 10 tmpCost = 132.000000
special leaf(i) in 3 = 6 tmpCost = 180.000000 cost1_I[3, 4] = 44.000000
left leaf(j) in 4 = 6 tmpCost = 132.000000
right leaf(j) in 4 = 10 tmpCost = 132.000000
special leaf(j) in 4 = 6 tmpCost = 174.000000 cost2_I[4] = 48
cost1_I[2, 3] = -88.000000
cost1_I[2, 4](-88.000000) += cost1_R[3, 4](132.000000) = 44.000000
cost2_I[3] = -84.000000
cost2_I[3](-84.000000) += cost2_R[3](132.000000) = 48.000000
S[3, 4] = 6
compute 3, 3
parent i = 2 parent j = 2
left leaf(i) in 3 = 6 tmpCost = 144.000000
right leaf(i) in 3 = 10 tmpCost = 144.000000
special leaf(i) in 3 = 6 tmpCost = 192.000000 cost1_I[3, 3] = 48.000000
left leaf(j) in 3 = 6 tmpCost = 144.000000
right leaf(j) in 3 = 10 tmpCost = 144.000000
special leaf(j) in 3 = 6 tmpCost = 192.000000 cost2_I[3] = 48
cost1_I[2, 2] = -96.000000
cost1_I[2, 3](-96.000000) += cost1_R[3, 3](144.000000) = 48.000000
cost2_I[2] = -96.000000
cost2_I[2](-96.000000) += cost2_R[2](144.000000) = 48.000000
S[3, 3] = 6
compute 3, 2
parent i = 2 parent j = 1
left leaf(i) in 3 = 6 tmpCost = 156.000000
right leaf(i) in 3 = 10 tmpCost = 156.000000
special leaf(i) in 3 = 6 tmpCost = 204.000000 cost1_I[3, 2] = 52.000000
left leaf(j) in 2 = 6 tmpCost = 156.000000
right leaf(j) in 2 = 10 tmpCost = 156.000000
special leaf(j) in 2 = 6 tmpCost = 210.000000 cost2_I[2] = 48
cost1_I[2, 1] = -104.000000
cost1_I[2, 2](-104.000000) += cost1_R[3, 2](156.000000) = 52.000000
cost2_I[1] = -108.000000
cost2_I[1](-108.000000) += cost2_R[1](156.000000) = 48.000000
S[3, 2] = 6
compute 3, 1
parent i = 2 parent j = 0
left leaf(i) in 3 = 6 tmpCost = 168.000000
right leaf(i) in 3 = 10 tmpCost = 168.000000
special leaf(i) in 3 = 6 tmpCost = 216.000000 cost1_I[3, 1] = 56.000000
left leaf(j) in 1 = 6 tmpCost = 168.000000
right leaf(j) in 1 = 10 tmpCost = 168.000000
special leaf(j) in 1 = 6 tmpCost = 228.000000 cost2_I[1] = 48
cost1_I[2, 0] = -112.000000
cost1_I[2, 1](-112.000000) += cost1_R[3, 1](168.000000) = 56.000000
cost2_I[0] = -120.000000
S[3, 1] = 6
compute 3, 16
parent i = 2 parent j = 15
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 16] = 4.000000
cost1_I[2, 15] = -8.000000
cost1_I[2, 16](-8.000000) += cost1_R[3, 16](12.000000) = 4.000000
cost2_I[15] = -12.000000
S[3, 16] = 6
compute 3, 17
parent i = 2 parent j = 15
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 17] = 4.000000
cost1_I[2, 15] = -8.000000
cost1_I[2, 17](-8.000000) += cost1_R[3, 17](12.000000) = 4.000000
S[3, 17] = 6
compute 3, 18
parent i = 2 parent j = 15
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 18] = 4.000000
cost1_I[2, 15] = -8.000000
cost1_I[2, 18](-8.000000) += cost1_R[3, 18](12.000000) = 4.000000
S[3, 18] = 6
compute 3, 19
parent i = 2 parent j = 15
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 19] = 4.000000
cost1_I[2, 15] = -8.000000
cost1_I[2, 19](-8.000000) += cost1_R[3, 19](12.000000) = 4.000000
cost2_I[15](-12.000000) += cost2_R[15](48.000000) = 36.000000
S[3, 19] = 6
compute 3, 15
parent i = 2 parent j = 14
left leaf(i) in 3 = 6 tmpCost = 96.000000
right leaf(i) in 3 = 10 tmpCost = 96.000000
special leaf(i) in 3 = 6 tmpCost = 120.000000 cost1_I[3, 15] = 32.000000
left leaf(j) in 15 = 16 tmpCost = 96.000000
right leaf(j) in 15 = 19 tmpCost = 96.000000
special leaf(j) in 15 = 16 tmpCost = 126.000000 cost2_I[15] = 36
cost1_I[2, 14] = -64.000000
cost1_I[2, 15](-64.000000) += cost1_R[3, 15](96.000000) = 32.000000
cost2_I[14] = -60.000000
cost2_I[14](-60.000000) += cost2_R[14](96.000000) = 36.000000
S[3, 15] = 6
compute 3, 14
parent i = 2 parent j = 13
left leaf(i) in 3 = 6 tmpCost = 108.000000
right leaf(i) in 3 = 10 tmpCost = 108.000000
special leaf(i) in 3 = 6 tmpCost = 132.000000 cost1_I[3, 14] = 36.000000
left leaf(j) in 14 = 16 tmpCost = 108.000000
right leaf(j) in 14 = 19 tmpCost = 108.000000
special leaf(j) in 14 = 16 tmpCost = 144.000000 cost2_I[14] = 36
cost1_I[2, 13] = -72.000000
cost1_I[2, 14](-72.000000) += cost1_R[3, 14](108.000000) = 36.000000
cost2_I[13] = -72.000000
cost2_I[13](-72.000000) += cost2_R[13](108.000000) = 36.000000
S[3, 14] = 6
compute 3, 13
parent i = 2 parent j = 12
left leaf(i) in 3 = 6 tmpCost = 120.000000
right leaf(i) in 3 = 10 tmpCost = 120.000000
special leaf(i) in 3 = 6 tmpCost = 144.000000 cost1_I[3, 13] = 40.000000
left leaf(j) in 13 = 16 tmpCost = 120.000000
right leaf(j) in 13 = 19 tmpCost = 120.000000
special leaf(j) in 13 = 16 tmpCost = 162.000000 cost2_I[13] = 36
cost1_I[2, 12] = -80.000000
cost1_I[2, 13](-80.000000) += cost1_R[3, 13](120.000000) = 40.000000
cost2_I[12] = -84.000000
cost2_I[12](-84.000000) += cost2_R[12](120.000000) = 36.000000
S[3, 13] = 6
compute 3, 12
parent i = 2 parent j = 11
left leaf(i) in 3 = 6 tmpCost = 132.000000
right leaf(i) in 3 = 10 tmpCost = 132.000000
special leaf(i) in 3 = 6 tmpCost = 156.000000 cost1_I[3, 12] = 44.000000
left leaf(j) in 12 = 16 tmpCost = 132.000000
right leaf(j) in 12 = 19 tmpCost = 132.000000
special leaf(j) in 12 = 16 tmpCost = 180.000000 cost2_I[12] = 36
cost1_I[2, 11] = -88.000000
cost1_I[2, 12](-88.000000) += cost1_R[3, 12](132.000000) = 44.000000
cost2_I[11] = -96.000000
S[3, 12] = 6
compute 3, 20
parent i = 2 parent j = 11
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
left leaf(i) in 3 = 6 tmpCost = 12.000000
right leaf(i) in 3 = 10 tmpCost = 12.000000
special leaf(i) in 3 = 6 tmpCost = 12.000000 cost1_I[3, 20] = 4.000000
cost1_I[2, 11] = -8.000000
cost1_I[2, 20](-8.000000) += cost1_R[3, 20](12.000000) = 4.000000
cost2_I[11](-96.000000) += cost2_R[11](144.000000) = 48.000000
S[3, 20] = 6
compute 3, 11
parent i = 2 parent j = 0
left leaf(i) in 3 = 6 tmpCost = 168.000000
right leaf(i) in 3 = 10 tmpCost = 224.000000
special leaf(i) in 3 = 6 tmpCost = 248.000000 cost1_I[3, 11] = 56.000000
left leaf(j) in 11 = 16 tmpCost = 168.000000
right leaf(j) in 11 = 20 tmpCost = 252.000000
special leaf(j) in 11 = 16 tmpCost = 228.000000 cost2_I[11] = 48
cost1_I[2, 0] = -112.000000
cost1_I[2, 11](-112.000000) += cost1_R[3, 11](168.000000) = 56.000000
cost2_I[0](-120.000000) += cost2_R[0](336.000000) = 216.000000
S[3, 11] = 6
compute 3, 0
parent i = 2 parent j = NULL
left leaf(i) in 3 = 6 tmpCost = 468.000000
right leaf(i) in 3 = 10 tmpCost = 524.000000
special leaf(i) in 3 = 6 tmpCost = 1316.000000 cost1_I[3, 0] = 156.000000
left leaf(j) in 0 = 6 tmpCost = 468.000000
right leaf(j) in 0 = 20 tmpCost = 552.000000
special leaf(j) in 0 = 6 tmpCost = 594.000000 cost2_I[0] = 216
cost1_I[2, 0] = -312.000000
cost1_I[2, 0](-312.000000) += cost1_R[3, 0](468.000000) = 156.000000
S[3, 0] = 6
compute 2, 6
parent i = 0 parent j = 5
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 6] = 4.000000
cost1_I[0, 5] = -9.000000
cost2_I[5] = -13.000000
S[2, 6] = 6
compute 2, 7
parent i = 0 parent j = 5
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 7] = 4.000000
cost1_I[0, 5] = -9.000000
S[2, 7] = 6
compute 2, 8
parent i = 0 parent j = 5
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 8] = 4.000000
cost1_I[0, 5] = -9.000000
S[2, 8] = 6
compute 2, 9
parent i = 0 parent j = 5
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 9] = 4.000000
cost1_I[0, 5] = -9.000000
S[2, 9] = 6
compute 2, 10
parent i = 0 parent j = 5
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 10] = 4.000000
cost1_I[0, 5] = -9.000000
cost2_I[5](-13.000000) += cost2_R[5](65.000000) = 52.000000
S[2, 10] = 6
compute 2, 5
parent i = 0 parent j = 4
left leaf(i) in 2 = 6 tmpCost = 130.000000
right leaf(i) in 2 = 10 tmpCost = 130.000000
special leaf(i) in 2 = 6 tmpCost = 184.000000 cost1_I[2, 5] = 40.000000
left leaf(j) in 5 = 6 tmpCost = 130.000000
right leaf(j) in 5 = 10 tmpCost = 130.000000
special leaf(j) in 5 = 6 tmpCost = 166.000000 cost2_I[5] = 52
cost1_I[0, 4] = -90.000000
cost2_I[4] = -78.000000
cost2_I[4](-78.000000) += cost2_R[4](130.000000) = 52.000000
S[2, 5] = 6
compute 2, 4
parent i = 0 parent j = 3
left leaf(i) in 2 = 6 tmpCost = 143.000000
right leaf(i) in 2 = 10 tmpCost = 143.000000
special leaf(i) in 2 = 6 tmpCost = 197.000000 cost1_I[2, 4] = 44.000000
left leaf(j) in 4 = 6 tmpCost = 143.000000
right leaf(j) in 4 = 10 tmpCost = 143.000000
special leaf(j) in 4 = 6 tmpCost = 185.000000 cost2_I[4] = 52
cost1_I[0, 3] = -99.000000
cost2_I[3] = -91.000000
cost2_I[3](-91.000000) += cost2_R[3](143.000000) = 52.000000
S[2, 4] = 6
compute 2, 3
parent i = 0 parent j = 2
left leaf(i) in 2 = 6 tmpCost = 156.000000
right leaf(i) in 2 = 10 tmpCost = 156.000000
special leaf(i) in 2 = 6 tmpCost = 210.000000 cost1_I[2, 3] = 48.000000
left leaf(j) in 3 = 6 tmpCost = 156.000000
right leaf(j) in 3 = 10 tmpCost = 156.000000
special leaf(j) in 3 = 6 tmpCost = 204.000000 cost2_I[3] = 52
cost1_I[0, 2] = -108.000000
cost2_I[2] = -104.000000
cost2_I[2](-104.000000) += cost2_R[2](156.000000) = 52.000000
S[2, 3] = 6
compute 2, 2
parent i = 0 parent j = 1
left leaf(i) in 2 = 6 tmpCost = 169.000000
right leaf(i) in 2 = 10 tmpCost = 169.000000
special leaf(i) in 2 = 6 tmpCost = 223.000000 cost1_I[2, 2] = 52.000000
left leaf(j) in 2 = 6 tmpCost = 169.000000
right leaf(j) in 2 = 10 tmpCost = 169.000000
special leaf(j) in 2 = 6 tmpCost = 223.000000 cost2_I[2] = 52
cost1_I[0, 1] = -117.000000
cost2_I[1] = -117.000000
cost2_I[1](-117.000000) += cost2_R[1](169.000000) = 52.000000
S[2, 2] = 6
compute 2, 1
parent i = 0 parent j = 0
left leaf(i) in 2 = 6 tmpCost = 182.000000
right leaf(i) in 2 = 10 tmpCost = 182.000000
special leaf(i) in 2 = 6 tmpCost = 236.000000 cost1_I[2, 1] = 56.000000
left leaf(j) in 1 = 6 tmpCost = 182.000000
right leaf(j) in 1 = 10 tmpCost = 182.000000
special leaf(j) in 1 = 6 tmpCost = 242.000000 cost2_I[1] = 52
cost1_I[0, 0] = -126.000000
cost2_I[0] = -130.000000
S[2, 1] = 6
compute 2, 16
parent i = 0 parent j = 15
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 16] = 4.000000
cost1_I[0, 15] = -9.000000
cost2_I[15] = -13.000000
S[2, 16] = 6
compute 2, 17
parent i = 0 parent j = 15
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 17] = 4.000000
cost1_I[0, 15] = -9.000000
S[2, 17] = 6
compute 2, 18
parent i = 0 parent j = 15
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 18] = 4.000000
cost1_I[0, 15] = -9.000000
S[2, 18] = 6
compute 2, 19
parent i = 0 parent j = 15
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 19] = 4.000000
cost1_I[0, 15] = -9.000000
cost2_I[15](-13.000000) += cost2_R[15](52.000000) = 39.000000
S[2, 19] = 6
compute 2, 15
parent i = 0 parent j = 14
left leaf(i) in 2 = 6 tmpCost = 104.000000
right leaf(i) in 2 = 10 tmpCost = 104.000000
special leaf(i) in 2 = 6 tmpCost = 131.000000 cost1_I[2, 15] = 32.000000
left leaf(j) in 15 = 16 tmpCost = 104.000000
right leaf(j) in 15 = 19 tmpCost = 104.000000
special leaf(j) in 15 = 16 tmpCost = 134.000000 cost2_I[15] = 39
cost1_I[0, 14] = -72.000000
cost2_I[14] = -65.000000
cost2_I[14](-65.000000) += cost2_R[14](104.000000) = 39.000000
S[2, 15] = 6
compute 2, 14
parent i = 0 parent j = 13
left leaf(i) in 2 = 6 tmpCost = 117.000000
right leaf(i) in 2 = 10 tmpCost = 117.000000
special leaf(i) in 2 = 6 tmpCost = 144.000000 cost1_I[2, 14] = 36.000000
left leaf(j) in 14 = 16 tmpCost = 117.000000
right leaf(j) in 14 = 19 tmpCost = 117.000000
special leaf(j) in 14 = 16 tmpCost = 153.000000 cost2_I[14] = 39
cost1_I[0, 13] = -81.000000
cost2_I[13] = -78.000000
cost2_I[13](-78.000000) += cost2_R[13](117.000000) = 39.000000
S[2, 14] = 6
compute 2, 13
parent i = 0 parent j = 12
left leaf(i) in 2 = 6 tmpCost = 130.000000
right leaf(i) in 2 = 10 tmpCost = 130.000000
special leaf(i) in 2 = 6 tmpCost = 157.000000 cost1_I[2, 13] = 40.000000
left leaf(j) in 13 = 16 tmpCost = 130.000000
right leaf(j) in 13 = 19 tmpCost = 130.000000
special leaf(j) in 13 = 16 tmpCost = 172.000000 cost2_I[13] = 39
cost1_I[0, 12] = -90.000000
cost2_I[12] = -91.000000
cost2_I[12](-91.000000) += cost2_R[12](130.000000) = 39.000000
S[2, 13] = 6
compute 2, 12
parent i = 0 parent j = 11
left leaf(i) in 2 = 6 tmpCost = 143.000000
right leaf(i) in 2 = 10 tmpCost = 143.000000
special leaf(i) in 2 = 6 tmpCost = 170.000000 cost1_I[2, 12] = 44.000000
left leaf(j) in 12 = 16 tmpCost = 143.000000
right leaf(j) in 12 = 19 tmpCost = 143.000000
special leaf(j) in 12 = 16 tmpCost = 191.000000 cost2_I[12] = 39
cost1_I[0, 11] = -99.000000
cost2_I[11] = -104.000000
S[2, 12] = 6
compute 2, 20
parent i = 0 parent j = 11
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
left leaf(i) in 2 = 6 tmpCost = 13.000000
right leaf(i) in 2 = 10 tmpCost = 13.000000
special leaf(i) in 2 = 6 tmpCost = 13.000000 cost1_I[2, 20] = 4.000000
cost1_I[0, 11] = -9.000000
cost2_I[11](-104.000000) += cost2_R[11](156.000000) = 52.000000
S[2, 20] = 6
compute 2, 11
parent i = 0 parent j = 0
left leaf(i) in 2 = 6 tmpCost = 182.000000
right leaf(i) in 2 = 10 tmpCost = 245.000000
special leaf(i) in 2 = 6 tmpCost = 272.000000 cost1_I[2, 11] = 56.000000
left leaf(j) in 11 = 16 tmpCost = 182.000000
right leaf(j) in 11 = 20 tmpCost = 273.000000
special leaf(j) in 11 = 16 tmpCost = 242.000000 cost2_I[11] = 52
cost1_I[0, 0] = -126.000000
cost2_I[0](-130.000000) += cost2_R[0](364.000000) = 234.000000
S[2, 11] = 6
compute 2, 0
parent i = 0 parent j = NULL
left leaf(i) in 2 = 6 tmpCost = 507.000000
right leaf(i) in 2 = 10 tmpCost = 570.000000
special leaf(i) in 2 = 6 tmpCost = 1461.000000 cost1_I[2, 0] = 156.000000
left leaf(j) in 0 = 6 tmpCost = 507.000000
right leaf(j) in 0 = 20 tmpCost = 598.000000
special leaf(j) in 0 = 6 tmpCost = 633.000000 cost2_I[0] = 234
cost1_I[0, 0] = -351.000000
S[2, 0] = 6
11 is a leaf
set S[11, 6] = 11
set S[11, 7] = 11
set S[11, 8] = 11
set S[11, 9] = 11
set S[11, 10] = 11
set S[11, 5] = 11
set S[11, 4] = 11
set S[11, 3] = 11
set S[11, 2] = 11
set S[11, 1] = 11
set S[11, 16] = 11
set S[11, 17] = 11
set S[11, 18] = 11
set S[11, 19] = 11
set S[11, 15] = 11
set S[11, 14] = 11
set S[11, 13] = 11
set S[11, 12] = 11
set S[11, 20] = 11
set S[11, 11] = 11
set S[11, 0] = 11
compute 11, 6
parent i = 0 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
cost2_I[5] = -1.000000
S[11, 6] = 6
compute 11, 7
parent i = 0 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
S[11, 7] = 7
compute 11, 8
parent i = 0 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
S[11, 8] = 8
compute 11, 9
parent i = 0 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
S[11, 9] = 9
compute 11, 10
parent i = 0 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[11, 10] = 10
compute 11, 5
parent i = 0 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[11, 5] = 6
compute 11, 4
parent i = 0 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[11, 4] = 6
compute 11, 3
parent i = 0 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[11, 3] = 6
compute 11, 2
parent i = 0 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[11, 2] = 6
compute 11, 1
parent i = 0 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost2_I[0] = -10.000000
S[11, 1] = 6
compute 11, 16
parent i = 0 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
cost2_I[15] = -1.000000
S[11, 16] = 16
compute 11, 17
parent i = 0 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
S[11, 17] = 17
compute 11, 18
parent i = 0 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
S[11, 18] = 18
compute 11, 19
parent i = 0 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[11, 19] = 19
compute 11, 15
parent i = 0 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[11, 15] = 16
compute 11, 14
parent i = 0 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[11, 14] = 16
compute 11, 13
parent i = 0 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[11, 13] = 16
compute 11, 12
parent i = 0 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost2_I[11] = -8.000000
S[11, 12] = 16
compute 11, 20
parent i = 0 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 11 = 11 tmpCost = 1.000000
right leaf(i) in 11 = 11 tmpCost = 1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[11, 20] = 20
compute 11, 11
parent i = 0 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[11, 11] = 16
compute 11, 0
parent i = 0 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
S[11, 0] = 6
17 is a leaf
set S[17, 6] = 17
set S[17, 7] = 17
set S[17, 8] = 17
set S[17, 9] = 17
set S[17, 10] = 17
set S[17, 5] = 17
set S[17, 4] = 17
set S[17, 3] = 17
set S[17, 2] = 17
set S[17, 1] = 17
set S[17, 16] = 17
set S[17, 17] = 17
set S[17, 18] = 17
set S[17, 19] = 17
set S[17, 15] = 17
set S[17, 14] = 17
set S[17, 13] = 17
set S[17, 12] = 17
set S[17, 20] = 17
set S[17, 11] = 17
set S[17, 0] = 17
compute 17, 6
parent i = 16 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 5] = -1.000000
cost2_I[5] = -1.000000
S[17, 6] = 6
compute 17, 7
parent i = 16 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 5] = -1.000000
S[17, 7] = 7
compute 17, 8
parent i = 16 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 5] = -1.000000
S[17, 8] = 8
compute 17, 9
parent i = 16 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 5] = -1.000000
S[17, 9] = 9
compute 17, 10
parent i = 16 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 5] = -1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[17, 10] = 10
compute 17, 5
parent i = 16 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost1_I[16, 4] = -10.000000
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[17, 5] = 6
compute 17, 4
parent i = 16 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost1_I[16, 3] = -11.000000
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[17, 4] = 6
compute 17, 3
parent i = 16 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost1_I[16, 2] = -12.000000
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[17, 3] = 6
compute 17, 2
parent i = 16 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost1_I[16, 1] = -13.000000
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[17, 2] = 6
compute 17, 1
parent i = 16 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost1_I[16, 0] = -14.000000
cost2_I[0] = -10.000000
S[17, 1] = 6
compute 17, 16
parent i = 16 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 15] = -1.000000
cost2_I[15] = -1.000000
S[17, 16] = 16
compute 17, 17
parent i = 16 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 15] = -1.000000
S[17, 17] = 17
compute 17, 18
parent i = 16 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 15] = -1.000000
S[17, 18] = 18
compute 17, 19
parent i = 16 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 15] = -1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[17, 19] = 19
compute 17, 15
parent i = 16 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost1_I[16, 14] = -8.000000
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[17, 15] = 16
compute 17, 14
parent i = 16 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost1_I[16, 13] = -9.000000
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[17, 14] = 16
compute 17, 13
parent i = 16 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost1_I[16, 12] = -10.000000
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[17, 13] = 16
compute 17, 12
parent i = 16 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost1_I[16, 11] = -11.000000
cost2_I[11] = -8.000000
S[17, 12] = 16
compute 17, 20
parent i = 16 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 17 = 17 tmpCost = 1.000000
right leaf(i) in 17 = 17 tmpCost = 1.000000
cost1_I[16, 11] = -1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[17, 20] = 20
compute 17, 11
parent i = 16 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost1_I[16, 0] = -14.000000
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[17, 11] = 16
compute 17, 0
parent i = 16 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
cost1_I[16, 0] = -39.000000
S[17, 0] = 6
18 is a leaf
set S[18, 6] = 18
set S[18, 7] = 18
set S[18, 8] = 18
set S[18, 9] = 18
set S[18, 10] = 18
set S[18, 5] = 18
set S[18, 4] = 18
set S[18, 3] = 18
set S[18, 2] = 18
set S[18, 1] = 18
set S[18, 16] = 18
set S[18, 17] = 18
set S[18, 18] = 18
set S[18, 19] = 18
set S[18, 15] = 18
set S[18, 14] = 18
set S[18, 13] = 18
set S[18, 12] = 18
set S[18, 20] = 18
set S[18, 11] = 18
set S[18, 0] = 18
compute 18, 6
parent i = 16 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
cost2_I[5] = -1.000000
S[18, 6] = 6
compute 18, 7
parent i = 16 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
S[18, 7] = 7
compute 18, 8
parent i = 16 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
S[18, 8] = 8
compute 18, 9
parent i = 16 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
S[18, 9] = 9
compute 18, 10
parent i = 16 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[18, 10] = 10
compute 18, 5
parent i = 16 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[18, 5] = 6
compute 18, 4
parent i = 16 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[18, 4] = 6
compute 18, 3
parent i = 16 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[18, 3] = 6
compute 18, 2
parent i = 16 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[18, 2] = 6
compute 18, 1
parent i = 16 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost2_I[0] = -10.000000
S[18, 1] = 6
compute 18, 16
parent i = 16 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
cost2_I[15] = -1.000000
S[18, 16] = 16
compute 18, 17
parent i = 16 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
S[18, 17] = 17
compute 18, 18
parent i = 16 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
S[18, 18] = 18
compute 18, 19
parent i = 16 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[18, 19] = 19
compute 18, 15
parent i = 16 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[18, 15] = 16
compute 18, 14
parent i = 16 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[18, 14] = 16
compute 18, 13
parent i = 16 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[18, 13] = 16
compute 18, 12
parent i = 16 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost2_I[11] = -8.000000
S[18, 12] = 16
compute 18, 20
parent i = 16 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 18 = 18 tmpCost = 1.000000
right leaf(i) in 18 = 18 tmpCost = 1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[18, 20] = 20
compute 18, 11
parent i = 16 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[18, 11] = 16
compute 18, 0
parent i = 16 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
S[18, 0] = 6
19 is a leaf
set S[19, 6] = 19
set S[19, 7] = 19
set S[19, 8] = 19
set S[19, 9] = 19
set S[19, 10] = 19
set S[19, 5] = 19
set S[19, 4] = 19
set S[19, 3] = 19
set S[19, 2] = 19
set S[19, 1] = 19
set S[19, 16] = 19
set S[19, 17] = 19
set S[19, 18] = 19
set S[19, 19] = 19
set S[19, 15] = 19
set S[19, 14] = 19
set S[19, 13] = 19
set S[19, 12] = 19
set S[19, 20] = 19
set S[19, 11] = 19
set S[19, 0] = 19
compute 19, 6
parent i = 16 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
cost2_I[5] = -1.000000
S[19, 6] = 6
compute 19, 7
parent i = 16 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
S[19, 7] = 7
compute 19, 8
parent i = 16 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
S[19, 8] = 8
compute 19, 9
parent i = 16 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
S[19, 9] = 9
compute 19, 10
parent i = 16 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[19, 10] = 10
compute 19, 5
parent i = 16 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[19, 5] = 6
compute 19, 4
parent i = 16 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[19, 4] = 6
compute 19, 3
parent i = 16 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[19, 3] = 6
compute 19, 2
parent i = 16 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[19, 2] = 6
compute 19, 1
parent i = 16 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost2_I[0] = -10.000000
S[19, 1] = 6
compute 19, 16
parent i = 16 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
cost2_I[15] = -1.000000
S[19, 16] = 16
compute 19, 17
parent i = 16 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
S[19, 17] = 17
compute 19, 18
parent i = 16 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
S[19, 18] = 18
compute 19, 19
parent i = 16 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[19, 19] = 19
compute 19, 15
parent i = 16 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[19, 15] = 16
compute 19, 14
parent i = 16 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[19, 14] = 16
compute 19, 13
parent i = 16 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[19, 13] = 16
compute 19, 12
parent i = 16 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost2_I[11] = -8.000000
S[19, 12] = 16
compute 19, 20
parent i = 16 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 19 = 19 tmpCost = 1.000000
right leaf(i) in 19 = 19 tmpCost = 1.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[19, 20] = 20
compute 19, 11
parent i = 16 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[19, 11] = 16
compute 19, 0
parent i = 16 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
S[19, 0] = 6
20 is a leaf
set S[20, 6] = 20
set S[20, 7] = 20
set S[20, 8] = 20
set S[20, 9] = 20
set S[20, 10] = 20
set S[20, 5] = 20
set S[20, 4] = 20
set S[20, 3] = 20
set S[20, 2] = 20
set S[20, 1] = 20
set S[20, 16] = 20
set S[20, 17] = 20
set S[20, 18] = 20
set S[20, 19] = 20
set S[20, 15] = 20
set S[20, 14] = 20
set S[20, 13] = 20
set S[20, 12] = 20
set S[20, 20] = 20
set S[20, 11] = 20
set S[20, 0] = 20
compute 20, 6
parent i = 16 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 6](-1.000000) += cost1_R[20, 6](4.000000) = 3.000000
cost2_I[5] = -1.000000
S[20, 6] = 6
compute 20, 7
parent i = 16 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 7](-1.000000) += cost1_R[20, 7](4.000000) = 3.000000
S[20, 7] = 7
compute 20, 8
parent i = 16 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 8](-1.000000) += cost1_R[20, 8](4.000000) = 3.000000
S[20, 8] = 8
compute 20, 9
parent i = 16 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 9](-1.000000) += cost1_R[20, 9](4.000000) = 3.000000
S[20, 9] = 9
compute 20, 10
parent i = 16 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 10](-1.000000) += cost1_R[20, 10](4.000000) = 3.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[20, 10] = 10
compute 20, 5
parent i = 16 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost1_I[16, 5](-10.000000) += cost1_R[20, 5](40.000000) = 30.000000
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[20, 5] = 6
compute 20, 4
parent i = 16 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost1_I[16, 4](-11.000000) += cost1_R[20, 4](44.000000) = 33.000000
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[20, 4] = 6
compute 20, 3
parent i = 16 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost1_I[16, 3](-12.000000) += cost1_R[20, 3](48.000000) = 36.000000
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[20, 3] = 6
compute 20, 2
parent i = 16 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost1_I[16, 2](-13.000000) += cost1_R[20, 2](52.000000) = 39.000000
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[20, 2] = 6
compute 20, 1
parent i = 16 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost1_I[16, 1](-14.000000) += cost1_R[20, 1](56.000000) = 42.000000
cost2_I[0] = -10.000000
S[20, 1] = 6
compute 20, 16
parent i = 16 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 16](-1.000000) += cost1_R[20, 16](4.000000) = 3.000000
cost2_I[15] = -1.000000
S[20, 16] = 16
compute 20, 17
parent i = 16 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 17](-1.000000) += cost1_R[20, 17](4.000000) = 3.000000
S[20, 17] = 17
compute 20, 18
parent i = 16 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 18](-1.000000) += cost1_R[20, 18](4.000000) = 3.000000
S[20, 18] = 18
compute 20, 19
parent i = 16 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 19](-1.000000) += cost1_R[20, 19](4.000000) = 3.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[20, 19] = 19
compute 20, 15
parent i = 16 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost1_I[16, 15](-8.000000) += cost1_R[20, 15](32.000000) = 24.000000
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[20, 15] = 16
compute 20, 14
parent i = 16 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost1_I[16, 14](-9.000000) += cost1_R[20, 14](36.000000) = 27.000000
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[20, 14] = 16
compute 20, 13
parent i = 16 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost1_I[16, 13](-10.000000) += cost1_R[20, 13](40.000000) = 30.000000
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[20, 13] = 16
compute 20, 12
parent i = 16 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost1_I[16, 12](-11.000000) += cost1_R[20, 12](44.000000) = 33.000000
cost2_I[11] = -8.000000
S[20, 12] = 16
compute 20, 20
parent i = 16 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 20 = 20 tmpCost = 1.000000
right leaf(i) in 20 = 20 tmpCost = 1.000000
cost1_I[16, 20](-1.000000) += cost1_R[20, 20](4.000000) = 3.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[20, 20] = 20
compute 20, 11
parent i = 16 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost1_I[16, 11](-14.000000) += cost1_R[20, 11](56.000000) = 42.000000
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[20, 11] = 16
compute 20, 0
parent i = 16 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
cost1_I[16, 0](-39.000000) += cost1_R[20, 0](156.000000) = 117.000000
S[20, 0] = 6
compute 16, 6
parent i = 15 parent j = 5
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 6] = 3.000000
cost1_I[15, 5] = -5.000000
cost1_I[15, 6](-5.000000) += cost1_R[16, 6](8.000000) = 3.000000
cost2_I[5] = -8.000000
S[16, 6] = 17
compute 16, 7
parent i = 15 parent j = 5
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 7] = 3.000000
cost1_I[15, 5] = -5.000000
cost1_I[15, 7](-5.000000) += cost1_R[16, 7](8.000000) = 3.000000
S[16, 7] = 17
compute 16, 8
parent i = 15 parent j = 5
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 8] = 3.000000
cost1_I[15, 5] = -5.000000
cost1_I[15, 8](-5.000000) += cost1_R[16, 8](8.000000) = 3.000000
S[16, 8] = 17
compute 16, 9
parent i = 15 parent j = 5
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 9] = 3.000000
cost1_I[15, 5] = -5.000000
cost1_I[15, 9](-5.000000) += cost1_R[16, 9](8.000000) = 3.000000
S[16, 9] = 17
compute 16, 10
parent i = 15 parent j = 5
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 10] = 3.000000
cost1_I[15, 5] = -5.000000
cost1_I[15, 10](-5.000000) += cost1_R[16, 10](8.000000) = 3.000000
cost2_I[5](-8.000000) += cost2_R[5](40.000000) = 32.000000
S[16, 10] = 17
compute 16, 5
parent i = 15 parent j = 4
left leaf(i) in 16 = 17 tmpCost = 80.000000
right leaf(i) in 16 = 20 tmpCost = 80.000000
special leaf(i) in 16 = 17 tmpCost = 110.000000 cost1_I[16, 5] = 30.000000
left leaf(j) in 5 = 6 tmpCost = 80.000000
right leaf(j) in 5 = 10 tmpCost = 80.000000
special leaf(j) in 5 = 6 tmpCost = 98.000000 cost2_I[5] = 32
cost1_I[15, 4] = -50.000000
cost1_I[15, 5](-50.000000) += cost1_R[16, 5](80.000000) = 30.000000
cost2_I[4] = -48.000000
cost2_I[4](-48.000000) += cost2_R[4](80.000000) = 32.000000
S[16, 5] = 17
compute 16, 4
parent i = 15 parent j = 3
left leaf(i) in 16 = 17 tmpCost = 88.000000
right leaf(i) in 16 = 20 tmpCost = 88.000000
special leaf(i) in 16 = 17 tmpCost = 118.000000 cost1_I[16, 4] = 33.000000
left leaf(j) in 4 = 6 tmpCost = 88.000000
right leaf(j) in 4 = 10 tmpCost = 88.000000
special leaf(j) in 4 = 6 tmpCost = 109.000000 cost2_I[4] = 32
cost1_I[15, 3] = -55.000000
cost1_I[15, 4](-55.000000) += cost1_R[16, 4](88.000000) = 33.000000
cost2_I[3] = -56.000000
cost2_I[3](-56.000000) += cost2_R[3](88.000000) = 32.000000
S[16, 4] = 17
compute 16, 3
parent i = 15 parent j = 2
left leaf(i) in 16 = 17 tmpCost = 96.000000
right leaf(i) in 16 = 20 tmpCost = 96.000000
special leaf(i) in 16 = 17 tmpCost = 126.000000 cost1_I[16, 3] = 36.000000
left leaf(j) in 3 = 6 tmpCost = 96.000000
right leaf(j) in 3 = 10 tmpCost = 96.000000
special leaf(j) in 3 = 6 tmpCost = 120.000000 cost2_I[3] = 32
cost1_I[15, 2] = -60.000000
cost1_I[15, 3](-60.000000) += cost1_R[16, 3](96.000000) = 36.000000
cost2_I[2] = -64.000000
cost2_I[2](-64.000000) += cost2_R[2](96.000000) = 32.000000
S[16, 3] = 17
compute 16, 2
parent i = 15 parent j = 1
left leaf(i) in 16 = 17 tmpCost = 104.000000
right leaf(i) in 16 = 20 tmpCost = 104.000000
special leaf(i) in 16 = 17 tmpCost = 134.000000 cost1_I[16, 2] = 39.000000
left leaf(j) in 2 = 6 tmpCost = 104.000000
right leaf(j) in 2 = 10 tmpCost = 104.000000
special leaf(j) in 2 = 6 tmpCost = 131.000000 cost2_I[2] = 32
cost1_I[15, 1] = -65.000000
cost1_I[15, 2](-65.000000) += cost1_R[16, 2](104.000000) = 39.000000
cost2_I[1] = -72.000000
cost2_I[1](-72.000000) += cost2_R[1](104.000000) = 32.000000
S[16, 2] = 17
compute 16, 1
parent i = 15 parent j = 0
left leaf(i) in 16 = 17 tmpCost = 112.000000
right leaf(i) in 16 = 20 tmpCost = 112.000000
special leaf(i) in 16 = 17 tmpCost = 142.000000 cost1_I[16, 1] = 42.000000
left leaf(j) in 1 = 6 tmpCost = 112.000000
right leaf(j) in 1 = 10 tmpCost = 112.000000
special leaf(j) in 1 = 6 tmpCost = 142.000000 cost2_I[1] = 32
cost1_I[15, 0] = -70.000000
cost1_I[15, 1](-70.000000) += cost1_R[16, 1](112.000000) = 42.000000
cost2_I[0] = -80.000000
S[16, 1] = 17
compute 16, 16
parent i = 15 parent j = 15
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 16] = 3.000000
cost1_I[15, 15] = -5.000000
cost1_I[15, 16](-5.000000) += cost1_R[16, 16](8.000000) = 3.000000
cost2_I[15] = -8.000000
S[16, 16] = 17
compute 16, 17
parent i = 15 parent j = 15
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 17] = 3.000000
cost1_I[15, 15] = -5.000000
cost1_I[15, 17](-5.000000) += cost1_R[16, 17](8.000000) = 3.000000
S[16, 17] = 17
compute 16, 18
parent i = 15 parent j = 15
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 18] = 3.000000
cost1_I[15, 15] = -5.000000
cost1_I[15, 18](-5.000000) += cost1_R[16, 18](8.000000) = 3.000000
S[16, 18] = 17
compute 16, 19
parent i = 15 parent j = 15
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 19] = 3.000000
cost1_I[15, 15] = -5.000000
cost1_I[15, 19](-5.000000) += cost1_R[16, 19](8.000000) = 3.000000
cost2_I[15](-8.000000) += cost2_R[15](32.000000) = 24.000000
S[16, 19] = 17
compute 16, 15
parent i = 15 parent j = 14
left leaf(i) in 16 = 17 tmpCost = 64.000000
right leaf(i) in 16 = 20 tmpCost = 64.000000
special leaf(i) in 16 = 17 tmpCost = 79.000000 cost1_I[16, 15] = 24.000000
left leaf(j) in 15 = 16 tmpCost = 64.000000
right leaf(j) in 15 = 19 tmpCost = 64.000000
special leaf(j) in 15 = 16 tmpCost = 79.000000 cost2_I[15] = 24
cost1_I[15, 14] = -40.000000
cost1_I[15, 15](-40.000000) += cost1_R[16, 15](64.000000) = 24.000000
cost2_I[14] = -40.000000
cost2_I[14](-40.000000) += cost2_R[14](64.000000) = 24.000000
S[16, 15] = 17
compute 16, 14
parent i = 15 parent j = 13
left leaf(i) in 16 = 17 tmpCost = 72.000000
right leaf(i) in 16 = 20 tmpCost = 72.000000
special leaf(i) in 16 = 17 tmpCost = 87.000000 cost1_I[16, 14] = 27.000000
left leaf(j) in 14 = 16 tmpCost = 72.000000
right leaf(j) in 14 = 19 tmpCost = 72.000000
special leaf(j) in 14 = 16 tmpCost = 90.000000 cost2_I[14] = 24
cost1_I[15, 13] = -45.000000
cost1_I[15, 14](-45.000000) += cost1_R[16, 14](72.000000) = 27.000000
cost2_I[13] = -48.000000
cost2_I[13](-48.000000) += cost2_R[13](72.000000) = 24.000000
S[16, 14] = 17
compute 16, 13
parent i = 15 parent j = 12
left leaf(i) in 16 = 17 tmpCost = 80.000000
right leaf(i) in 16 = 20 tmpCost = 80.000000
special leaf(i) in 16 = 17 tmpCost = 95.000000 cost1_I[16, 13] = 30.000000
left leaf(j) in 13 = 16 tmpCost = 80.000000
right leaf(j) in 13 = 19 tmpCost = 80.000000
special leaf(j) in 13 = 16 tmpCost = 101.000000 cost2_I[13] = 24
cost1_I[15, 12] = -50.000000
cost1_I[15, 13](-50.000000) += cost1_R[16, 13](80.000000) = 30.000000
cost2_I[12] = -56.000000
cost2_I[12](-56.000000) += cost2_R[12](80.000000) = 24.000000
S[16, 13] = 17
compute 16, 12
parent i = 15 parent j = 11
left leaf(i) in 16 = 17 tmpCost = 88.000000
right leaf(i) in 16 = 20 tmpCost = 88.000000
special leaf(i) in 16 = 17 tmpCost = 103.000000 cost1_I[16, 12] = 33.000000
left leaf(j) in 12 = 16 tmpCost = 88.000000
right leaf(j) in 12 = 19 tmpCost = 88.000000
special leaf(j) in 12 = 16 tmpCost = 112.000000 cost2_I[12] = 24
cost1_I[15, 11] = -55.000000
cost1_I[15, 12](-55.000000) += cost1_R[16, 12](88.000000) = 33.000000
cost2_I[11] = -64.000000
S[16, 12] = 17
compute 16, 20
parent i = 15 parent j = 11
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
left leaf(i) in 16 = 17 tmpCost = 8.000000
right leaf(i) in 16 = 20 tmpCost = 8.000000
special leaf(i) in 16 = 17 tmpCost = 8.000000 cost1_I[16, 20] = 3.000000
cost1_I[15, 11] = -5.000000
cost1_I[15, 20](-5.000000) += cost1_R[16, 20](8.000000) = 3.000000
cost2_I[11](-64.000000) += cost2_R[11](96.000000) = 32.000000
S[16, 20] = 17
compute 16, 11
parent i = 15 parent j = 0
left leaf(i) in 16 = 17 tmpCost = 112.000000
right leaf(i) in 16 = 20 tmpCost = 147.000000
special leaf(i) in 16 = 17 tmpCost = 162.000000 cost1_I[16, 11] = 42.000000
left leaf(j) in 11 = 16 tmpCost = 112.000000
right leaf(j) in 11 = 20 tmpCost = 168.000000
special leaf(j) in 11 = 16 tmpCost = 142.000000 cost2_I[11] = 32
cost1_I[15, 0] = -70.000000
cost1_I[15, 11](-70.000000) += cost1_R[16, 11](112.000000) = 42.000000
cost2_I[0](-80.000000) += cost2_R[0](224.000000) = 144.000000
S[16, 11] = 17
compute 16, 0
parent i = 15 parent j = NULL
left leaf(i) in 16 = 17 tmpCost = 312.000000
right leaf(i) in 16 = 20 tmpCost = 347.000000
special leaf(i) in 16 = 17 tmpCost = 842.000000 cost1_I[16, 0] = 117.000000
left leaf(j) in 0 = 6 tmpCost = 312.000000
right leaf(j) in 0 = 20 tmpCost = 368.000000
special leaf(j) in 0 = 6 tmpCost = 375.000000 cost2_I[0] = 144
cost1_I[15, 0] = -195.000000
cost1_I[15, 0](-195.000000) += cost1_R[16, 0](312.000000) = 117.000000
S[16, 0] = 17
compute 15, 6
parent i = 14 parent j = 5
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 6] = 3.000000
cost1_I[14, 5] = -6.000000
cost1_I[14, 6](-6.000000) += cost1_R[15, 6](9.000000) = 3.000000
cost2_I[5] = -9.000000
S[15, 6] = 17
compute 15, 7
parent i = 14 parent j = 5
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 7] = 3.000000
cost1_I[14, 5] = -6.000000
cost1_I[14, 7](-6.000000) += cost1_R[15, 7](9.000000) = 3.000000
S[15, 7] = 17
compute 15, 8
parent i = 14 parent j = 5
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 8] = 3.000000
cost1_I[14, 5] = -6.000000
cost1_I[14, 8](-6.000000) += cost1_R[15, 8](9.000000) = 3.000000
S[15, 8] = 17
compute 15, 9
parent i = 14 parent j = 5
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 9] = 3.000000
cost1_I[14, 5] = -6.000000
cost1_I[14, 9](-6.000000) += cost1_R[15, 9](9.000000) = 3.000000
S[15, 9] = 17
compute 15, 10
parent i = 14 parent j = 5
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 10] = 3.000000
cost1_I[14, 5] = -6.000000
cost1_I[14, 10](-6.000000) += cost1_R[15, 10](9.000000) = 3.000000
cost2_I[5](-9.000000) += cost2_R[5](45.000000) = 36.000000
S[15, 10] = 17
compute 15, 5
parent i = 14 parent j = 4
left leaf(i) in 15 = 17 tmpCost = 90.000000
right leaf(i) in 15 = 20 tmpCost = 90.000000
special leaf(i) in 15 = 17 tmpCost = 126.000000 cost1_I[15, 5] = 30.000000
left leaf(j) in 5 = 6 tmpCost = 90.000000
right leaf(j) in 5 = 10 tmpCost = 90.000000
special leaf(j) in 5 = 6 tmpCost = 108.000000 cost2_I[5] = 36
cost1_I[14, 4] = -60.000000
cost1_I[14, 5](-60.000000) += cost1_R[15, 5](90.000000) = 30.000000
cost2_I[4] = -54.000000
cost2_I[4](-54.000000) += cost2_R[4](90.000000) = 36.000000
S[15, 5] = 17
compute 15, 4
parent i = 14 parent j = 3
left leaf(i) in 15 = 17 tmpCost = 99.000000
right leaf(i) in 15 = 20 tmpCost = 99.000000
special leaf(i) in 15 = 17 tmpCost = 135.000000 cost1_I[15, 4] = 33.000000
left leaf(j) in 4 = 6 tmpCost = 99.000000
right leaf(j) in 4 = 10 tmpCost = 99.000000
special leaf(j) in 4 = 6 tmpCost = 120.000000 cost2_I[4] = 36
cost1_I[14, 3] = -66.000000
cost1_I[14, 4](-66.000000) += cost1_R[15, 4](99.000000) = 33.000000
cost2_I[3] = -63.000000
cost2_I[3](-63.000000) += cost2_R[3](99.000000) = 36.000000
S[15, 4] = 17
compute 15, 3
parent i = 14 parent j = 2
left leaf(i) in 15 = 17 tmpCost = 108.000000
right leaf(i) in 15 = 20 tmpCost = 108.000000
special leaf(i) in 15 = 17 tmpCost = 144.000000 cost1_I[15, 3] = 36.000000
left leaf(j) in 3 = 6 tmpCost = 108.000000
right leaf(j) in 3 = 10 tmpCost = 108.000000
special leaf(j) in 3 = 6 tmpCost = 132.000000 cost2_I[3] = 36
cost1_I[14, 2] = -72.000000
cost1_I[14, 3](-72.000000) += cost1_R[15, 3](108.000000) = 36.000000
cost2_I[2] = -72.000000
cost2_I[2](-72.000000) += cost2_R[2](108.000000) = 36.000000
S[15, 3] = 17
compute 15, 2
parent i = 14 parent j = 1
left leaf(i) in 15 = 17 tmpCost = 117.000000
right leaf(i) in 15 = 20 tmpCost = 117.000000
special leaf(i) in 15 = 17 tmpCost = 153.000000 cost1_I[15, 2] = 39.000000
left leaf(j) in 2 = 6 tmpCost = 117.000000
right leaf(j) in 2 = 10 tmpCost = 117.000000
special leaf(j) in 2 = 6 tmpCost = 144.000000 cost2_I[2] = 36
cost1_I[14, 1] = -78.000000
cost1_I[14, 2](-78.000000) += cost1_R[15, 2](117.000000) = 39.000000
cost2_I[1] = -81.000000
cost2_I[1](-81.000000) += cost2_R[1](117.000000) = 36.000000
S[15, 2] = 17
compute 15, 1
parent i = 14 parent j = 0
left leaf(i) in 15 = 17 tmpCost = 126.000000
right leaf(i) in 15 = 20 tmpCost = 126.000000
special leaf(i) in 15 = 17 tmpCost = 162.000000 cost1_I[15, 1] = 42.000000
left leaf(j) in 1 = 6 tmpCost = 126.000000
right leaf(j) in 1 = 10 tmpCost = 126.000000
special leaf(j) in 1 = 6 tmpCost = 156.000000 cost2_I[1] = 36
cost1_I[14, 0] = -84.000000
cost1_I[14, 1](-84.000000) += cost1_R[15, 1](126.000000) = 42.000000
cost2_I[0] = -90.000000
S[15, 1] = 17
compute 15, 16
parent i = 14 parent j = 15
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 16] = 3.000000
cost1_I[14, 15] = -6.000000
cost1_I[14, 16](-6.000000) += cost1_R[15, 16](9.000000) = 3.000000
cost2_I[15] = -9.000000
S[15, 16] = 17
compute 15, 17
parent i = 14 parent j = 15
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 17] = 3.000000
cost1_I[14, 15] = -6.000000
cost1_I[14, 17](-6.000000) += cost1_R[15, 17](9.000000) = 3.000000
S[15, 17] = 17
compute 15, 18
parent i = 14 parent j = 15
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 18] = 3.000000
cost1_I[14, 15] = -6.000000
cost1_I[14, 18](-6.000000) += cost1_R[15, 18](9.000000) = 3.000000
S[15, 18] = 17
compute 15, 19
parent i = 14 parent j = 15
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 19] = 3.000000
cost1_I[14, 15] = -6.000000
cost1_I[14, 19](-6.000000) += cost1_R[15, 19](9.000000) = 3.000000
cost2_I[15](-9.000000) += cost2_R[15](36.000000) = 27.000000
S[15, 19] = 17
compute 15, 15
parent i = 14 parent j = 14
left leaf(i) in 15 = 17 tmpCost = 72.000000
right leaf(i) in 15 = 20 tmpCost = 72.000000
special leaf(i) in 15 = 17 tmpCost = 90.000000 cost1_I[15, 15] = 24.000000
left leaf(j) in 15 = 16 tmpCost = 72.000000
right leaf(j) in 15 = 19 tmpCost = 72.000000
special leaf(j) in 15 = 16 tmpCost = 87.000000 cost2_I[15] = 27
cost1_I[14, 14] = -48.000000
cost1_I[14, 15](-48.000000) += cost1_R[15, 15](72.000000) = 24.000000
cost2_I[14] = -45.000000
cost2_I[14](-45.000000) += cost2_R[14](72.000000) = 27.000000
S[15, 15] = 17
compute 15, 14
parent i = 14 parent j = 13
left leaf(i) in 15 = 17 tmpCost = 81.000000
right leaf(i) in 15 = 20 tmpCost = 81.000000
special leaf(i) in 15 = 17 tmpCost = 99.000000 cost1_I[15, 14] = 27.000000
left leaf(j) in 14 = 16 tmpCost = 81.000000
right leaf(j) in 14 = 19 tmpCost = 81.000000
special leaf(j) in 14 = 16 tmpCost = 99.000000 cost2_I[14] = 27
cost1_I[14, 13] = -54.000000
cost1_I[14, 14](-54.000000) += cost1_R[15, 14](81.000000) = 27.000000
cost2_I[13] = -54.000000
cost2_I[13](-54.000000) += cost2_R[13](81.000000) = 27.000000
S[15, 14] = 17
compute 15, 13
parent i = 14 parent j = 12
left leaf(i) in 15 = 17 tmpCost = 90.000000
right leaf(i) in 15 = 20 tmpCost = 90.000000
special leaf(i) in 15 = 17 tmpCost = 108.000000 cost1_I[15, 13] = 30.000000
left leaf(j) in 13 = 16 tmpCost = 90.000000
right leaf(j) in 13 = 19 tmpCost = 90.000000
special leaf(j) in 13 = 16 tmpCost = 111.000000 cost2_I[13] = 27
cost1_I[14, 12] = -60.000000
cost1_I[14, 13](-60.000000) += cost1_R[15, 13](90.000000) = 30.000000
cost2_I[12] = -63.000000
cost2_I[12](-63.000000) += cost2_R[12](90.000000) = 27.000000
S[15, 13] = 17
compute 15, 12
parent i = 14 parent j = 11
left leaf(i) in 15 = 17 tmpCost = 99.000000
right leaf(i) in 15 = 20 tmpCost = 99.000000
special leaf(i) in 15 = 17 tmpCost = 117.000000 cost1_I[15, 12] = 33.000000
left leaf(j) in 12 = 16 tmpCost = 99.000000
right leaf(j) in 12 = 19 tmpCost = 99.000000
special leaf(j) in 12 = 16 tmpCost = 123.000000 cost2_I[12] = 27
cost1_I[14, 11] = -66.000000
cost1_I[14, 12](-66.000000) += cost1_R[15, 12](99.000000) = 33.000000
cost2_I[11] = -72.000000
S[15, 12] = 17
compute 15, 20
parent i = 14 parent j = 11
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
left leaf(i) in 15 = 17 tmpCost = 9.000000
right leaf(i) in 15 = 20 tmpCost = 9.000000
special leaf(i) in 15 = 17 tmpCost = 9.000000 cost1_I[15, 20] = 3.000000
cost1_I[14, 11] = -6.000000
cost1_I[14, 20](-6.000000) += cost1_R[15, 20](9.000000) = 3.000000
cost2_I[11](-72.000000) += cost2_R[11](108.000000) = 36.000000
S[15, 20] = 17
compute 15, 11
parent i = 14 parent j = 0
left leaf(i) in 15 = 17 tmpCost = 126.000000
right leaf(i) in 15 = 20 tmpCost = 168.000000
special leaf(i) in 15 = 17 tmpCost = 186.000000 cost1_I[15, 11] = 42.000000
left leaf(j) in 11 = 16 tmpCost = 126.000000
right leaf(j) in 11 = 20 tmpCost = 189.000000
special leaf(j) in 11 = 16 tmpCost = 156.000000 cost2_I[11] = 36
cost1_I[14, 0] = -84.000000
cost1_I[14, 11](-84.000000) += cost1_R[15, 11](126.000000) = 42.000000
cost2_I[0](-90.000000) += cost2_R[0](252.000000) = 162.000000
S[15, 11] = 17
compute 15, 0
parent i = 14 parent j = NULL
left leaf(i) in 15 = 17 tmpCost = 351.000000
right leaf(i) in 15 = 20 tmpCost = 393.000000
special leaf(i) in 15 = 17 tmpCost = 987.000000 cost1_I[15, 0] = 117.000000
left leaf(j) in 0 = 6 tmpCost = 351.000000
right leaf(j) in 0 = 20 tmpCost = 414.000000
special leaf(j) in 0 = 6 tmpCost = 414.000000 cost2_I[0] = 162
cost1_I[14, 0] = -234.000000
cost1_I[14, 0](-234.000000) += cost1_R[15, 0](351.000000) = 117.000000
S[15, 0] = 17
compute 14, 6
parent i = 13 parent j = 5
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 6] = 3.000000
cost1_I[13, 5] = -7.000000
cost1_I[13, 6](-7.000000) += cost1_R[14, 6](10.000000) = 3.000000
cost2_I[5] = -10.000000
S[14, 6] = 17
compute 14, 7
parent i = 13 parent j = 5
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 7] = 3.000000
cost1_I[13, 5] = -7.000000
cost1_I[13, 7](-7.000000) += cost1_R[14, 7](10.000000) = 3.000000
S[14, 7] = 17
compute 14, 8
parent i = 13 parent j = 5
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 8] = 3.000000
cost1_I[13, 5] = -7.000000
cost1_I[13, 8](-7.000000) += cost1_R[14, 8](10.000000) = 3.000000
S[14, 8] = 17
compute 14, 9
parent i = 13 parent j = 5
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 9] = 3.000000
cost1_I[13, 5] = -7.000000
cost1_I[13, 9](-7.000000) += cost1_R[14, 9](10.000000) = 3.000000
S[14, 9] = 17
compute 14, 10
parent i = 13 parent j = 5
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 10] = 3.000000
cost1_I[13, 5] = -7.000000
cost1_I[13, 10](-7.000000) += cost1_R[14, 10](10.000000) = 3.000000
cost2_I[5](-10.000000) += cost2_R[5](50.000000) = 40.000000
S[14, 10] = 17
compute 14, 5
parent i = 13 parent j = 4
left leaf(i) in 14 = 17 tmpCost = 100.000000
right leaf(i) in 14 = 20 tmpCost = 100.000000
special leaf(i) in 14 = 17 tmpCost = 142.000000 cost1_I[14, 5] = 30.000000
left leaf(j) in 5 = 6 tmpCost = 100.000000
right leaf(j) in 5 = 10 tmpCost = 100.000000
special leaf(j) in 5 = 6 tmpCost = 118.000000 cost2_I[5] = 40
cost1_I[13, 4] = -70.000000
cost1_I[13, 5](-70.000000) += cost1_R[14, 5](100.000000) = 30.000000
cost2_I[4] = -60.000000
cost2_I[4](-60.000000) += cost2_R[4](100.000000) = 40.000000
S[14, 5] = 17
compute 14, 4
parent i = 13 parent j = 3
left leaf(i) in 14 = 17 tmpCost = 110.000000
right leaf(i) in 14 = 20 tmpCost = 110.000000
special leaf(i) in 14 = 17 tmpCost = 152.000000 cost1_I[14, 4] = 33.000000
left leaf(j) in 4 = 6 tmpCost = 110.000000
right leaf(j) in 4 = 10 tmpCost = 110.000000
special leaf(j) in 4 = 6 tmpCost = 131.000000 cost2_I[4] = 40
cost1_I[13, 3] = -77.000000
cost1_I[13, 4](-77.000000) += cost1_R[14, 4](110.000000) = 33.000000
cost2_I[3] = -70.000000
cost2_I[3](-70.000000) += cost2_R[3](110.000000) = 40.000000
S[14, 4] = 17
compute 14, 3
parent i = 13 parent j = 2
left leaf(i) in 14 = 17 tmpCost = 120.000000
right leaf(i) in 14 = 20 tmpCost = 120.000000
special leaf(i) in 14 = 17 tmpCost = 162.000000 cost1_I[14, 3] = 36.000000
left leaf(j) in 3 = 6 tmpCost = 120.000000
right leaf(j) in 3 = 10 tmpCost = 120.000000
special leaf(j) in 3 = 6 tmpCost = 144.000000 cost2_I[3] = 40
cost1_I[13, 2] = -84.000000
cost1_I[13, 3](-84.000000) += cost1_R[14, 3](120.000000) = 36.000000
cost2_I[2] = -80.000000
cost2_I[2](-80.000000) += cost2_R[2](120.000000) = 40.000000
S[14, 3] = 17
compute 14, 2
parent i = 13 parent j = 1
left leaf(i) in 14 = 17 tmpCost = 130.000000
right leaf(i) in 14 = 20 tmpCost = 130.000000
special leaf(i) in 14 = 17 tmpCost = 172.000000 cost1_I[14, 2] = 39.000000
left leaf(j) in 2 = 6 tmpCost = 130.000000
right leaf(j) in 2 = 10 tmpCost = 130.000000
special leaf(j) in 2 = 6 tmpCost = 157.000000 cost2_I[2] = 40
cost1_I[13, 1] = -91.000000
cost1_I[13, 2](-91.000000) += cost1_R[14, 2](130.000000) = 39.000000
cost2_I[1] = -90.000000
cost2_I[1](-90.000000) += cost2_R[1](130.000000) = 40.000000
S[14, 2] = 17
compute 14, 1
parent i = 13 parent j = 0
left leaf(i) in 14 = 17 tmpCost = 140.000000
right leaf(i) in 14 = 20 tmpCost = 140.000000
special leaf(i) in 14 = 17 tmpCost = 182.000000 cost1_I[14, 1] = 42.000000
left leaf(j) in 1 = 6 tmpCost = 140.000000
right leaf(j) in 1 = 10 tmpCost = 140.000000
special leaf(j) in 1 = 6 tmpCost = 170.000000 cost2_I[1] = 40
cost1_I[13, 0] = -98.000000
cost1_I[13, 1](-98.000000) += cost1_R[14, 1](140.000000) = 42.000000
cost2_I[0] = -100.000000
S[14, 1] = 17
compute 14, 16
parent i = 13 parent j = 15
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 16] = 3.000000
cost1_I[13, 15] = -7.000000
cost1_I[13, 16](-7.000000) += cost1_R[14, 16](10.000000) = 3.000000
cost2_I[15] = -10.000000
S[14, 16] = 17
compute 14, 17
parent i = 13 parent j = 15
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 17] = 3.000000
cost1_I[13, 15] = -7.000000
cost1_I[13, 17](-7.000000) += cost1_R[14, 17](10.000000) = 3.000000
S[14, 17] = 17
compute 14, 18
parent i = 13 parent j = 15
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 18] = 3.000000
cost1_I[13, 15] = -7.000000
cost1_I[13, 18](-7.000000) += cost1_R[14, 18](10.000000) = 3.000000
S[14, 18] = 17
compute 14, 19
parent i = 13 parent j = 15
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 19] = 3.000000
cost1_I[13, 15] = -7.000000
cost1_I[13, 19](-7.000000) += cost1_R[14, 19](10.000000) = 3.000000
cost2_I[15](-10.000000) += cost2_R[15](40.000000) = 30.000000
S[14, 19] = 17
compute 14, 15
parent i = 13 parent j = 14
left leaf(i) in 14 = 17 tmpCost = 80.000000
right leaf(i) in 14 = 20 tmpCost = 80.000000
special leaf(i) in 14 = 17 tmpCost = 101.000000 cost1_I[14, 15] = 24.000000
left leaf(j) in 15 = 16 tmpCost = 80.000000
right leaf(j) in 15 = 19 tmpCost = 80.000000
special leaf(j) in 15 = 16 tmpCost = 95.000000 cost2_I[15] = 30
cost1_I[13, 14] = -56.000000
cost1_I[13, 15](-56.000000) += cost1_R[14, 15](80.000000) = 24.000000
cost2_I[14] = -50.000000
cost2_I[14](-50.000000) += cost2_R[14](80.000000) = 30.000000
S[14, 15] = 17
compute 14, 14
parent i = 13 parent j = 13
left leaf(i) in 14 = 17 tmpCost = 90.000000
right leaf(i) in 14 = 20 tmpCost = 90.000000
special leaf(i) in 14 = 17 tmpCost = 111.000000 cost1_I[14, 14] = 27.000000
left leaf(j) in 14 = 16 tmpCost = 90.000000
right leaf(j) in 14 = 19 tmpCost = 90.000000
special leaf(j) in 14 = 16 tmpCost = 108.000000 cost2_I[14] = 30
cost1_I[13, 13] = -63.000000
cost1_I[13, 14](-63.000000) += cost1_R[14, 14](90.000000) = 27.000000
cost2_I[13] = -60.000000
cost2_I[13](-60.000000) += cost2_R[13](90.000000) = 30.000000
S[14, 14] = 17
compute 14, 13
parent i = 13 parent j = 12
left leaf(i) in 14 = 17 tmpCost = 100.000000
right leaf(i) in 14 = 20 tmpCost = 100.000000
special leaf(i) in 14 = 17 tmpCost = 121.000000 cost1_I[14, 13] = 30.000000
left leaf(j) in 13 = 16 tmpCost = 100.000000
right leaf(j) in 13 = 19 tmpCost = 100.000000
special leaf(j) in 13 = 16 tmpCost = 121.000000 cost2_I[13] = 30
cost1_I[13, 12] = -70.000000
cost1_I[13, 13](-70.000000) += cost1_R[14, 13](100.000000) = 30.000000
cost2_I[12] = -70.000000
cost2_I[12](-70.000000) += cost2_R[12](100.000000) = 30.000000
S[14, 13] = 17
compute 14, 12
parent i = 13 parent j = 11
left leaf(i) in 14 = 17 tmpCost = 110.000000
right leaf(i) in 14 = 20 tmpCost = 110.000000
special leaf(i) in 14 = 17 tmpCost = 131.000000 cost1_I[14, 12] = 33.000000
left leaf(j) in 12 = 16 tmpCost = 110.000000
right leaf(j) in 12 = 19 tmpCost = 110.000000
special leaf(j) in 12 = 16 tmpCost = 134.000000 cost2_I[12] = 30
cost1_I[13, 11] = -77.000000
cost1_I[13, 12](-77.000000) += cost1_R[14, 12](110.000000) = 33.000000
cost2_I[11] = -80.000000
S[14, 12] = 17
compute 14, 20
parent i = 13 parent j = 11
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
left leaf(i) in 14 = 17 tmpCost = 10.000000
right leaf(i) in 14 = 20 tmpCost = 10.000000
special leaf(i) in 14 = 17 tmpCost = 10.000000 cost1_I[14, 20] = 3.000000
cost1_I[13, 11] = -7.000000
cost1_I[13, 20](-7.000000) += cost1_R[14, 20](10.000000) = 3.000000
cost2_I[11](-80.000000) += cost2_R[11](120.000000) = 40.000000
S[14, 20] = 17
compute 14, 11
parent i = 13 parent j = 0
left leaf(i) in 14 = 17 tmpCost = 140.000000
right leaf(i) in 14 = 20 tmpCost = 189.000000
special leaf(i) in 14 = 17 tmpCost = 210.000000 cost1_I[14, 11] = 42.000000
left leaf(j) in 11 = 16 tmpCost = 140.000000
right leaf(j) in 11 = 20 tmpCost = 210.000000
special leaf(j) in 11 = 16 tmpCost = 170.000000 cost2_I[11] = 40
cost1_I[13, 0] = -98.000000
cost1_I[13, 11](-98.000000) += cost1_R[14, 11](140.000000) = 42.000000
cost2_I[0](-100.000000) += cost2_R[0](280.000000) = 180.000000
S[14, 11] = 17
compute 14, 0
parent i = 13 parent j = NULL
left leaf(i) in 14 = 17 tmpCost = 390.000000
right leaf(i) in 14 = 20 tmpCost = 439.000000
special leaf(i) in 14 = 17 tmpCost = 1132.000000 cost1_I[14, 0] = 117.000000
left leaf(j) in 0 = 6 tmpCost = 390.000000
right leaf(j) in 0 = 20 tmpCost = 460.000000
special leaf(j) in 0 = 6 tmpCost = 453.000000 cost2_I[0] = 180
cost1_I[13, 0] = -273.000000
cost1_I[13, 0](-273.000000) += cost1_R[14, 0](390.000000) = 117.000000
S[14, 0] = 17
compute 13, 6
parent i = 12 parent j = 5
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 6] = 3.000000
cost1_I[12, 5] = -8.000000
cost2_I[5] = -11.000000
S[13, 6] = 17
compute 13, 7
parent i = 12 parent j = 5
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 7] = 3.000000
cost1_I[12, 5] = -8.000000
S[13, 7] = 17
compute 13, 8
parent i = 12 parent j = 5
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 8] = 3.000000
cost1_I[12, 5] = -8.000000
S[13, 8] = 17
compute 13, 9
parent i = 12 parent j = 5
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 9] = 3.000000
cost1_I[12, 5] = -8.000000
S[13, 9] = 17
compute 13, 10
parent i = 12 parent j = 5
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 10] = 3.000000
cost1_I[12, 5] = -8.000000
cost2_I[5](-11.000000) += cost2_R[5](55.000000) = 44.000000
S[13, 10] = 17
compute 13, 5
parent i = 12 parent j = 4
left leaf(i) in 13 = 17 tmpCost = 110.000000
right leaf(i) in 13 = 20 tmpCost = 110.000000
special leaf(i) in 13 = 17 tmpCost = 158.000000 cost1_I[13, 5] = 30.000000
left leaf(j) in 5 = 6 tmpCost = 110.000000
right leaf(j) in 5 = 10 tmpCost = 110.000000
special leaf(j) in 5 = 6 tmpCost = 128.000000 cost2_I[5] = 44
cost1_I[12, 4] = -80.000000
cost2_I[4] = -66.000000
cost2_I[4](-66.000000) += cost2_R[4](110.000000) = 44.000000
S[13, 5] = 17
compute 13, 4
parent i = 12 parent j = 3
left leaf(i) in 13 = 17 tmpCost = 121.000000
right leaf(i) in 13 = 20 tmpCost = 121.000000
special leaf(i) in 13 = 17 tmpCost = 169.000000 cost1_I[13, 4] = 33.000000
left leaf(j) in 4 = 6 tmpCost = 121.000000
right leaf(j) in 4 = 10 tmpCost = 121.000000
special leaf(j) in 4 = 6 tmpCost = 142.000000 cost2_I[4] = 44
cost1_I[12, 3] = -88.000000
cost2_I[3] = -77.000000
cost2_I[3](-77.000000) += cost2_R[3](121.000000) = 44.000000
S[13, 4] = 17
compute 13, 3
parent i = 12 parent j = 2
left leaf(i) in 13 = 17 tmpCost = 132.000000
right leaf(i) in 13 = 20 tmpCost = 132.000000
special leaf(i) in 13 = 17 tmpCost = 180.000000 cost1_I[13, 3] = 36.000000
left leaf(j) in 3 = 6 tmpCost = 132.000000
right leaf(j) in 3 = 10 tmpCost = 132.000000
special leaf(j) in 3 = 6 tmpCost = 156.000000 cost2_I[3] = 44
cost1_I[12, 2] = -96.000000
cost2_I[2] = -88.000000
cost2_I[2](-88.000000) += cost2_R[2](132.000000) = 44.000000
S[13, 3] = 17
compute 13, 2
parent i = 12 parent j = 1
left leaf(i) in 13 = 17 tmpCost = 143.000000
right leaf(i) in 13 = 20 tmpCost = 143.000000
special leaf(i) in 13 = 17 tmpCost = 191.000000 cost1_I[13, 2] = 39.000000
left leaf(j) in 2 = 6 tmpCost = 143.000000
right leaf(j) in 2 = 10 tmpCost = 143.000000
special leaf(j) in 2 = 6 tmpCost = 170.000000 cost2_I[2] = 44
cost1_I[12, 1] = -104.000000
cost2_I[1] = -99.000000
cost2_I[1](-99.000000) += cost2_R[1](143.000000) = 44.000000
S[13, 2] = 17
compute 13, 1
parent i = 12 parent j = 0
left leaf(i) in 13 = 17 tmpCost = 154.000000
right leaf(i) in 13 = 20 tmpCost = 154.000000
special leaf(i) in 13 = 17 tmpCost = 202.000000 cost1_I[13, 1] = 42.000000
left leaf(j) in 1 = 6 tmpCost = 154.000000
right leaf(j) in 1 = 10 tmpCost = 154.000000
special leaf(j) in 1 = 6 tmpCost = 184.000000 cost2_I[1] = 44
cost1_I[12, 0] = -112.000000
cost2_I[0] = -110.000000
S[13, 1] = 17
compute 13, 16
parent i = 12 parent j = 15
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 16] = 3.000000
cost1_I[12, 15] = -8.000000
cost2_I[15] = -11.000000
S[13, 16] = 17
compute 13, 17
parent i = 12 parent j = 15
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 17] = 3.000000
cost1_I[12, 15] = -8.000000
S[13, 17] = 17
compute 13, 18
parent i = 12 parent j = 15
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 18] = 3.000000
cost1_I[12, 15] = -8.000000
S[13, 18] = 17
compute 13, 19
parent i = 12 parent j = 15
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 19] = 3.000000
cost1_I[12, 15] = -8.000000
cost2_I[15](-11.000000) += cost2_R[15](44.000000) = 33.000000
S[13, 19] = 17
compute 13, 15
parent i = 12 parent j = 14
left leaf(i) in 13 = 17 tmpCost = 88.000000
right leaf(i) in 13 = 20 tmpCost = 88.000000
special leaf(i) in 13 = 17 tmpCost = 112.000000 cost1_I[13, 15] = 24.000000
left leaf(j) in 15 = 16 tmpCost = 88.000000
right leaf(j) in 15 = 19 tmpCost = 88.000000
special leaf(j) in 15 = 16 tmpCost = 103.000000 cost2_I[15] = 33
cost1_I[12, 14] = -64.000000
cost2_I[14] = -55.000000
cost2_I[14](-55.000000) += cost2_R[14](88.000000) = 33.000000
S[13, 15] = 17
compute 13, 14
parent i = 12 parent j = 13
left leaf(i) in 13 = 17 tmpCost = 99.000000
right leaf(i) in 13 = 20 tmpCost = 99.000000
special leaf(i) in 13 = 17 tmpCost = 123.000000 cost1_I[13, 14] = 27.000000
left leaf(j) in 14 = 16 tmpCost = 99.000000
right leaf(j) in 14 = 19 tmpCost = 99.000000
special leaf(j) in 14 = 16 tmpCost = 117.000000 cost2_I[14] = 33
cost1_I[12, 13] = -72.000000
cost2_I[13] = -66.000000
cost2_I[13](-66.000000) += cost2_R[13](99.000000) = 33.000000
S[13, 14] = 17
compute 13, 13
parent i = 12 parent j = 12
left leaf(i) in 13 = 17 tmpCost = 110.000000
right leaf(i) in 13 = 20 tmpCost = 110.000000
special leaf(i) in 13 = 17 tmpCost = 134.000000 cost1_I[13, 13] = 30.000000
left leaf(j) in 13 = 16 tmpCost = 110.000000
right leaf(j) in 13 = 19 tmpCost = 110.000000
special leaf(j) in 13 = 16 tmpCost = 131.000000 cost2_I[13] = 33
cost1_I[12, 12] = -80.000000
cost2_I[12] = -77.000000
cost2_I[12](-77.000000) += cost2_R[12](110.000000) = 33.000000
S[13, 13] = 17
compute 13, 12
parent i = 12 parent j = 11
left leaf(i) in 13 = 17 tmpCost = 121.000000
right leaf(i) in 13 = 20 tmpCost = 121.000000
special leaf(i) in 13 = 17 tmpCost = 145.000000 cost1_I[13, 12] = 33.000000
left leaf(j) in 12 = 16 tmpCost = 121.000000
right leaf(j) in 12 = 19 tmpCost = 121.000000
special leaf(j) in 12 = 16 tmpCost = 145.000000 cost2_I[12] = 33
cost1_I[12, 11] = -88.000000
cost2_I[11] = -88.000000
S[13, 12] = 17
compute 13, 20
parent i = 12 parent j = 11
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
left leaf(i) in 13 = 17 tmpCost = 11.000000
right leaf(i) in 13 = 20 tmpCost = 11.000000
special leaf(i) in 13 = 17 tmpCost = 11.000000 cost1_I[13, 20] = 3.000000
cost1_I[12, 11] = -8.000000
cost2_I[11](-88.000000) += cost2_R[11](132.000000) = 44.000000
S[13, 20] = 17
compute 13, 11
parent i = 12 parent j = 0
left leaf(i) in 13 = 17 tmpCost = 154.000000
right leaf(i) in 13 = 20 tmpCost = 210.000000
special leaf(i) in 13 = 17 tmpCost = 234.000000 cost1_I[13, 11] = 42.000000
left leaf(j) in 11 = 16 tmpCost = 154.000000
right leaf(j) in 11 = 20 tmpCost = 231.000000
special leaf(j) in 11 = 16 tmpCost = 184.000000 cost2_I[11] = 44
cost1_I[12, 0] = -112.000000
cost2_I[0](-110.000000) += cost2_R[0](308.000000) = 198.000000
S[13, 11] = 17
compute 13, 0
parent i = 12 parent j = NULL
left leaf(i) in 13 = 17 tmpCost = 429.000000
right leaf(i) in 13 = 20 tmpCost = 485.000000
special leaf(i) in 13 = 17 tmpCost = 1277.000000 cost1_I[13, 0] = 117.000000
left leaf(j) in 0 = 6 tmpCost = 429.000000
right leaf(j) in 0 = 20 tmpCost = 506.000000
special leaf(j) in 0 = 6 tmpCost = 492.000000 cost2_I[0] = 198
cost1_I[12, 0] = -312.000000
S[13, 0] = 17
21 is a leaf
set S[21, 6] = 21
set S[21, 7] = 21
set S[21, 8] = 21
set S[21, 9] = 21
set S[21, 10] = 21
set S[21, 5] = 21
set S[21, 4] = 21
set S[21, 3] = 21
set S[21, 2] = 21
set S[21, 1] = 21
set S[21, 16] = 21
set S[21, 17] = 21
set S[21, 18] = 21
set S[21, 19] = 21
set S[21, 15] = 21
set S[21, 14] = 21
set S[21, 13] = 21
set S[21, 12] = 21
set S[21, 20] = 21
set S[21, 11] = 21
set S[21, 0] = 21
compute 21, 6
parent i = 12 parent j = 5
left leaf(j) in 6 = 6 tmpCost = 1.000000
right leaf(j) in 6 = 6 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 6](-8.000000) += cost1_R[21, 6](41428014837855682560.000000) = 41428014837855682560.000000
cost2_I[5] = -1.000000
S[21, 6] = 6
compute 21, 7
parent i = 12 parent j = 5
left leaf(j) in 7 = 7 tmpCost = 1.000000
right leaf(j) in 7 = 7 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 7](-8.000000) += cost1_R[21, 7](12.000000) = 4.000000
S[21, 7] = 7
compute 21, 8
parent i = 12 parent j = 5
left leaf(j) in 8 = 8 tmpCost = 1.000000
right leaf(j) in 8 = 8 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 8](-8.000000) += cost1_R[21, 8](41428014837855682560.000000) = 41428014837855682560.000000
S[21, 8] = 8
compute 21, 9
parent i = 12 parent j = 5
left leaf(j) in 9 = 9 tmpCost = 1.000000
right leaf(j) in 9 = 9 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 9](-8.000000) += cost1_R[21, 9](12.000000) = 4.000000
S[21, 9] = 9
compute 21, 10
parent i = 12 parent j = 5
left leaf(j) in 10 = 10 tmpCost = 1.000000
right leaf(j) in 10 = 10 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 10](-8.000000) += cost1_R[21, 10](12.000000) = 4.000000
cost2_I[5](-1.000000) += cost2_R[5](5.000000) = 4.000000
S[21, 10] = 10
compute 21, 5
parent i = 12 parent j = 4
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
left leaf(j) in 5 = 6 tmpCost = 10.000000
right leaf(j) in 5 = 10 tmpCost = 10.000000
special leaf(j) in 5 = 6 tmpCost = 10.000000 cost2_I[5] = 4
cost1_I[12, 5](-80.000000) += cost1_R[21, 5](120.000000) = 40.000000
cost2_I[4] = -6.000000
cost2_I[4](-6.000000) += cost2_R[4](10.000000) = 4.000000
S[21, 5] = 6
compute 21, 4
parent i = 12 parent j = 3
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
left leaf(j) in 4 = 6 tmpCost = 11.000000
right leaf(j) in 4 = 10 tmpCost = 11.000000
special leaf(j) in 4 = 6 tmpCost = 11.000000 cost2_I[4] = 4
cost1_I[12, 4](-88.000000) += cost1_R[21, 4](132.000000) = 44.000000
cost2_I[3] = -7.000000
cost2_I[3](-7.000000) += cost2_R[3](11.000000) = 4.000000
S[21, 4] = 6
compute 21, 3
parent i = 12 parent j = 2
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
left leaf(j) in 3 = 6 tmpCost = 12.000000
right leaf(j) in 3 = 10 tmpCost = 12.000000
special leaf(j) in 3 = 6 tmpCost = 12.000000 cost2_I[3] = 4
cost1_I[12, 3](-96.000000) += cost1_R[21, 3](144.000000) = 48.000000
cost2_I[2] = -8.000000
cost2_I[2](-8.000000) += cost2_R[2](12.000000) = 4.000000
S[21, 3] = 6
compute 21, 2
parent i = 12 parent j = 1
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
left leaf(j) in 2 = 6 tmpCost = 13.000000
right leaf(j) in 2 = 10 tmpCost = 13.000000
special leaf(j) in 2 = 6 tmpCost = 13.000000 cost2_I[2] = 4
cost1_I[12, 2](-104.000000) += cost1_R[21, 2](156.000000) = 52.000000
cost2_I[1] = -9.000000
cost2_I[1](-9.000000) += cost2_R[1](13.000000) = 4.000000
S[21, 2] = 6
compute 21, 1
parent i = 12 parent j = 0
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
left leaf(j) in 1 = 6 tmpCost = 14.000000
right leaf(j) in 1 = 10 tmpCost = 14.000000
special leaf(j) in 1 = 6 tmpCost = 14.000000 cost2_I[1] = 4
cost1_I[12, 1](-112.000000) += cost1_R[21, 1](168.000000) = 56.000000
cost2_I[0] = -10.000000
S[21, 1] = 6
compute 21, 16
parent i = 12 parent j = 15
left leaf(j) in 16 = 16 tmpCost = 1.000000
right leaf(j) in 16 = 16 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 16](-8.000000) += cost1_R[21, 16](12.000000) = 4.000000
cost2_I[15] = -1.000000
S[21, 16] = 16
compute 21, 17
parent i = 12 parent j = 15
left leaf(j) in 17 = 17 tmpCost = 1.000000
right leaf(j) in 17 = 17 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 17](-8.000000) += cost1_R[21, 17](12.000000) = 4.000000
S[21, 17] = 17
compute 21, 18
parent i = 12 parent j = 15
left leaf(j) in 18 = 18 tmpCost = 1.000000
right leaf(j) in 18 = 18 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 18](-8.000000) += cost1_R[21, 18](12.000000) = 4.000000
S[21, 18] = 18
compute 21, 19
parent i = 12 parent j = 15
left leaf(j) in 19 = 19 tmpCost = 1.000000
right leaf(j) in 19 = 19 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 19](-8.000000) += cost1_R[21, 19](12.000000) = 4.000000
cost2_I[15](-1.000000) += cost2_R[15](4.000000) = 3.000000
S[21, 19] = 19
compute 21, 15
parent i = 12 parent j = 14
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
left leaf(j) in 15 = 16 tmpCost = 8.000000
right leaf(j) in 15 = 19 tmpCost = 8.000000
special leaf(j) in 15 = 16 tmpCost = 8.000000 cost2_I[15] = 3
cost1_I[12, 15](-64.000000) += cost1_R[21, 15](96.000000) = 32.000000
cost2_I[14] = -5.000000
cost2_I[14](-5.000000) += cost2_R[14](8.000000) = 3.000000
S[21, 15] = 16
compute 21, 14
parent i = 12 parent j = 13
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
left leaf(j) in 14 = 16 tmpCost = 9.000000
right leaf(j) in 14 = 19 tmpCost = 9.000000
special leaf(j) in 14 = 16 tmpCost = 9.000000 cost2_I[14] = 3
cost1_I[12, 14](-72.000000) += cost1_R[21, 14](108.000000) = 36.000000
cost2_I[13] = -6.000000
cost2_I[13](-6.000000) += cost2_R[13](9.000000) = 3.000000
S[21, 14] = 16
compute 21, 13
parent i = 12 parent j = 12
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
left leaf(j) in 13 = 16 tmpCost = 10.000000
right leaf(j) in 13 = 19 tmpCost = 10.000000
special leaf(j) in 13 = 16 tmpCost = 10.000000 cost2_I[13] = 3
cost1_I[12, 13](-80.000000) += cost1_R[21, 13](120.000000) = 40.000000
cost2_I[12] = -7.000000
cost2_I[12](-7.000000) += cost2_R[12](10.000000) = 3.000000
S[21, 13] = 16
compute 21, 12
parent i = 12 parent j = 11
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
left leaf(j) in 12 = 16 tmpCost = 11.000000
right leaf(j) in 12 = 19 tmpCost = 11.000000
special leaf(j) in 12 = 16 tmpCost = 11.000000 cost2_I[12] = 3
cost1_I[12, 12](-88.000000) += cost1_R[21, 12](132.000000) = 44.000000
cost2_I[11] = -8.000000
S[21, 12] = 16
compute 21, 20
parent i = 12 parent j = 11
left leaf(j) in 20 = 20 tmpCost = 1.000000
right leaf(j) in 20 = 20 tmpCost = 1.000000
left leaf(i) in 21 = 21 tmpCost = 1.000000
right leaf(i) in 21 = 21 tmpCost = 1.000000
cost1_I[12, 20](-8.000000) += cost1_R[21, 20](12.000000) = 4.000000
cost2_I[11](-8.000000) += cost2_R[11](12.000000) = 4.000000
S[21, 20] = 20
compute 21, 11
parent i = 12 parent j = 0
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
left leaf(j) in 11 = 16 tmpCost = 14.000000
right leaf(j) in 11 = 20 tmpCost = 21.000000
special leaf(j) in 11 = 16 tmpCost = 14.000000 cost2_I[11] = 4
cost1_I[12, 11](-112.000000) += cost1_R[21, 11](168.000000) = 56.000000
cost2_I[0](-10.000000) += cost2_R[0](28.000000) = 18.000000
S[21, 11] = 16
compute 21, 0
parent i = 12 parent j = NULL
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
left leaf(j) in 0 = 6 tmpCost = 39.000000
right leaf(j) in 0 = 20 tmpCost = 46.000000
special leaf(j) in 0 = 6 tmpCost = 39.000000 cost2_I[0] = 18
cost1_I[12, 0](-312.000000) += cost1_R[21, 0](468.000000) = 156.000000
S[21, 0] = 6
compute 12, 6
parent i = 0 parent j = 5
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 41428014837855682560.000000
right leaf(i) in 12 = 21 tmpCost = 41428014837855682560.000000
special leaf(i) in 12 = 17 tmpCost = 41428014837855682560.000000 cost1_I[12, 6] = 41428014837855682560.000000
cost1_I[0, 6](-9.000000) += cost1_R[12, 6](41428014837855682560.000000) = 41428014837855682560.000000
cost2_I[5] = -14.000000
S[12, 6] = 17
compute 12, 7
parent i = 0 parent j = 5
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 7] = 4.000000
cost1_I[0, 5] = -10.000000
cost1_I[0, 7](-10.000000) += cost1_R[12, 7](29.000000) = 19.000000
S[12, 7] = 17
compute 12, 8
parent i = 0 parent j = 5
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 41428014837855682560.000000
right leaf(i) in 12 = 21 tmpCost = 41428014837855682560.000000
special leaf(i) in 12 = 17 tmpCost = 41428014837855682560.000000 cost1_I[12, 8] = 41428014837855682560.000000
cost1_I[0, 8](-9.000000) += cost1_R[12, 8](41428014837855682560.000000) = 41428014837855682560.000000
S[12, 8] = 17
compute 12, 9
parent i = 0 parent j = 5
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 9] = 4.000000
cost1_I[0, 5] = -10.000000
cost1_I[0, 9](-10.000000) += cost1_R[12, 9](29.000000) = 19.000000
S[12, 9] = 17
compute 12, 10
parent i = 0 parent j = 5
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 10] = 4.000000
cost1_I[0, 5] = -10.000000
cost1_I[0, 10](-10.000000) += cost1_R[12, 10](39.024754) = 29.024754
cost2_I[5](-14.000000) += cost2_R[5](70.000000) = 56.000000
S[12, 10] = 17
compute 12, 5
parent i = 0 parent j = 4
left leaf(i) in 12 = 17 tmpCost = 140.000000
right leaf(i) in 12 = 21 tmpCost = 210.000000
special leaf(i) in 12 = 17 tmpCost = 200.000000 cost1_I[12, 5] = 40.000000
left leaf(j) in 5 = 6 tmpCost = 140.000000
right leaf(j) in 5 = 10 tmpCost = 182.000000
special leaf(j) in 5 = 6 tmpCost = 200.000000 cost2_I[5] = 56
cost1_I[0, 4] = -100.000000
cost1_I[0, 5](-100.000000) += cost1_R[12, 5](290.000000) = 190.000000
cost2_I[4] = -84.000000
cost2_I[4](-84.000000) += cost2_R[4](140.000000) = 56.000000
S[12, 5] = 17
compute 12, 4
parent i = 0 parent j = 3
left leaf(i) in 12 = 17 tmpCost = 41428014837855682560.000000
right leaf(i) in 12 = 21 tmpCost = 231.000000
special leaf(i) in 12 = 17 tmpCost = 214.000000 cost1_I[12, 4] = 44.000000
left leaf(j) in 4 = 6 tmpCost = 154.000000
right leaf(j) in 4 = 10 tmpCost = 203.000000
special leaf(j) in 4 = 6 tmpCost = 224.000000 cost2_I[4] = 56
cost1_I[0, 3] = -110.000000
cost1_I[0, 4](-110.000000) += cost1_R[12, 4](319.000000) = 209.000000
cost2_I[3] = -98.000000
cost2_I[3](-98.000000) += cost2_R[3](154.000000) = 56.000000
S[12, 4] = 6
compute 12, 3
parent i = 0 parent j = 2
left leaf(i) in 12 = 17 tmpCost = 168.000000
right leaf(i) in 12 = 21 tmpCost = 252.000000
special leaf(i) in 12 = 17 tmpCost = 228.000000 cost1_I[12, 3] = 48.000000
left leaf(j) in 3 = 6 tmpCost = 168.000000
right leaf(j) in 3 = 10 tmpCost = 224.000000
special leaf(j) in 3 = 6 tmpCost = 248.000000 cost2_I[3] = 56
cost1_I[0, 2] = -120.000000
cost1_I[0, 3](-120.000000) += cost1_R[12, 3](348.000000) = 228.000000
cost2_I[2] = -112.000000
cost2_I[2](-112.000000) += cost2_R[2](168.000000) = 56.000000
S[12, 3] = 17
compute 12, 2
parent i = 0 parent j = 1
left leaf(i) in 12 = 17 tmpCost = 182.000000
right leaf(i) in 12 = 21 tmpCost = 273.000000
special leaf(i) in 12 = 17 tmpCost = 242.000000 cost1_I[12, 2] = 52.000000
left leaf(j) in 2 = 6 tmpCost = 182.000000
right leaf(j) in 2 = 10 tmpCost = 245.000000
special leaf(j) in 2 = 6 tmpCost = 272.000000 cost2_I[2] = 56
cost1_I[0, 1] = -130.000000
cost1_I[0, 2](-130.000000) += cost1_R[12, 2](377.000000) = 247.000000
cost2_I[1] = -126.000000
cost2_I[1](-126.000000) += cost2_R[1](182.000000) = 56.000000
S[12, 2] = 17
compute 12, 1
parent i = 0 parent j = 0
left leaf(i) in 12 = 17 tmpCost = 196.000000
right leaf(i) in 12 = 21 tmpCost = 294.000000
special leaf(i) in 12 = 17 tmpCost = 256.000000 cost1_I[12, 1] = 56.000000
left leaf(j) in 1 = 6 tmpCost = 196.000000
right leaf(j) in 1 = 10 tmpCost = 266.000000
special leaf(j) in 1 = 6 tmpCost = 296.000000 cost2_I[1] = 56
cost1_I[0, 0] = -140.000000
cost1_I[0, 1](-140.000000) += cost1_R[12, 1](406.000000) = 266.000000
cost2_I[0] = -140.000000
S[12, 1] = 17
compute 12, 16
parent i = 0 parent j = 15
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 16] = 4.000000
cost1_I[0, 15] = -10.000000
cost1_I[0, 16](-10.000000) += cost1_R[12, 16](29.000000) = 19.000000
cost2_I[15] = -14.000000
S[12, 16] = 17
compute 12, 17
parent i = 0 parent j = 15
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 17] = 4.000000
cost1_I[0, 15] = -10.000000
cost1_I[0, 17](-10.000000) += cost1_R[12, 17](29.000000) = 19.000000
S[12, 17] = 17
compute 12, 18
parent i = 0 parent j = 15
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 18] = 4.000000
cost1_I[0, 15] = -10.000000
cost1_I[0, 18](-10.000000) += cost1_R[12, 18](29.000000) = 19.000000
S[12, 18] = 17
compute 12, 19
parent i = 0 parent j = 15
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 19] = 4.000000
cost1_I[0, 15] = -10.000000
cost1_I[0, 19](-10.000000) += cost1_R[12, 19](29.000000) = 19.000000
cost2_I[15](-14.000000) += cost2_R[15](56.000000) = 42.000000
S[12, 19] = 17
compute 12, 15
parent i = 0 parent j = 14
left leaf(i) in 12 = 17 tmpCost = 112.000000
right leaf(i) in 12 = 21 tmpCost = 168.000000
special leaf(i) in 12 = 17 tmpCost = 142.000000 cost1_I[12, 15] = 32.000000
left leaf(j) in 15 = 16 tmpCost = 112.000000
right leaf(j) in 15 = 19 tmpCost = 147.000000
special leaf(j) in 15 = 16 tmpCost = 162.000000 cost2_I[15] = 42
cost1_I[0, 14] = -80.000000
cost1_I[0, 15](-80.000000) += cost1_R[12, 15](232.000000) = 152.000000
cost2_I[14] = -70.000000
cost2_I[14](-70.000000) += cost2_R[14](112.000000) = 42.000000
S[12, 15] = 17
compute 12, 14
parent i = 0 parent j = 13
left leaf(i) in 12 = 17 tmpCost = 126.000000
right leaf(i) in 12 = 21 tmpCost = 189.000000
special leaf(i) in 12 = 17 tmpCost = 156.000000 cost1_I[12, 14] = 36.000000
left leaf(j) in 14 = 16 tmpCost = 126.000000
right leaf(j) in 14 = 19 tmpCost = 168.000000
special leaf(j) in 14 = 16 tmpCost = 186.000000 cost2_I[14] = 42
cost1_I[0, 13] = -90.000000
cost1_I[0, 14](-90.000000) += cost1_R[12, 14](261.000000) = 171.000000
cost2_I[13] = -84.000000
cost2_I[13](-84.000000) += cost2_R[13](126.000000) = 42.000000
S[12, 14] = 17
compute 12, 13
parent i = 0 parent j = 12
left leaf(i) in 12 = 17 tmpCost = 140.000000
right leaf(i) in 12 = 21 tmpCost = 210.000000
special leaf(i) in 12 = 17 tmpCost = 170.000000 cost1_I[12, 13] = 40.000000
left leaf(j) in 13 = 16 tmpCost = 140.000000
right leaf(j) in 13 = 19 tmpCost = 189.000000
special leaf(j) in 13 = 16 tmpCost = 210.000000 cost2_I[13] = 42
cost1_I[0, 12] = -100.000000
cost1_I[0, 13](-100.000000) += cost1_R[12, 13](290.000000) = 190.000000
cost2_I[12] = -98.000000
cost2_I[12](-98.000000) += cost2_R[12](140.000000) = 42.000000
S[12, 13] = 17
compute 12, 12
parent i = 0 parent j = 11
left leaf(i) in 12 = 17 tmpCost = 154.000000
right leaf(i) in 12 = 21 tmpCost = 231.000000
special leaf(i) in 12 = 17 tmpCost = 184.000000 cost1_I[12, 12] = 44.000000
left leaf(j) in 12 = 16 tmpCost = 154.000000
right leaf(j) in 12 = 19 tmpCost = 210.000000
special leaf(j) in 12 = 16 tmpCost = 234.000000 cost2_I[12] = 42
cost1_I[0, 11] = -110.000000
cost1_I[0, 12](-110.000000) += cost1_R[12, 12](319.000000) = 209.000000
cost2_I[11] = -112.000000
S[12, 12] = 17
compute 12, 20
parent i = 0 parent j = 11
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
left leaf(i) in 12 = 17 tmpCost = 14.000000
right leaf(i) in 12 = 21 tmpCost = 21.000000
special leaf(i) in 12 = 17 tmpCost = 14.000000 cost1_I[12, 20] = 4.000000
cost1_I[0, 11] = -10.000000
cost1_I[0, 20](-10.000000) += cost1_R[12, 20](29.000000) = 19.000000
cost2_I[11](-112.000000) += cost2_R[11](168.000000) = 56.000000
S[12, 20] = 17
compute 12, 11
parent i = 0 parent j = 0
left leaf(i) in 12 = 17 tmpCost = 196.000000
right leaf(i) in 12 = 21 tmpCost = 364.000000
special leaf(i) in 12 = 17 tmpCost = 296.000000 cost1_I[12, 11] = 56.000000
left leaf(j) in 11 = 16 tmpCost = 196.000000
right leaf(j) in 11 = 20 tmpCost = 364.000000
special leaf(j) in 11 = 16 tmpCost = 296.000000 cost2_I[11] = 56
cost1_I[0, 0] = -140.000000
cost1_I[0, 11](-140.000000) += cost1_R[12, 11](406.000000) = 266.000000
cost2_I[0](-140.000000) += cost2_R[0](392.000000) = 252.000000
S[12, 11] = 17
compute 12, 0
parent i = 0 parent j = NULL
left leaf(i) in 12 = 17 tmpCost = 41428014837855682560.000000
right leaf(i) in 12 = 21 tmpCost = 889.000000
special leaf(i) in 12 = 17 tmpCost = 1606.000000 cost1_I[12, 0] = 156.000000
left leaf(j) in 0 = 6 tmpCost = 546.000000
right leaf(j) in 0 = 20 tmpCost = 791.000000
special leaf(j) in 0 = 6 tmpCost = 756.000000 cost2_I[0] = 252
cost1_I[0, 0] = -390.000000
cost1_I[0, 0](-390.000000) += cost1_R[12, 0](1131.000000) = 741.000000
S[12, 0] = 6
compute 0, 6
parent i = NULL parent j = 5
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 41429211106506702848.000000
right leaf(i) in 0 = 21 tmpCost = 82856029675711365120.000000
special leaf(i) in 0 = 6 tmpCost = 41428014837855682560.000000 cost1_I[0, 6] = 41428014837855682560.000000
cost2_I[5] = -48.000000
S[0, 6] = 21
compute 0, 7
parent i = NULL parent j = 5
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 7] = 19.000000
S[0, 7] = 17
compute 0, 8
parent i = NULL parent j = 5
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 41429211106506702848.000000
right leaf(i) in 0 = 21 tmpCost = 82856029675711365120.000000
special leaf(i) in 0 = 6 tmpCost = 41428014837855682560.000000 cost1_I[0, 8] = 41428014837855682560.000000
S[0, 8] = 21
compute 0, 9
parent i = NULL parent j = 5
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 9] = 19.000000
S[0, 9] = 17
compute 0, 10
parent i = NULL parent j = 5
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 107.349068
right leaf(i) in 0 = 21 tmpCost = 58.024754
special leaf(i) in 0 = 17 tmpCost = 51.024754 cost1_I[0, 10] = 29.024754
cost2_I[5](-48.000000) += cost2_R[5](226.000000) = 178.000000
S[0, 10] = 21
compute 0, 5
parent i = NULL parent j = 4
left leaf(i) in 0 = 1 tmpCost = 500.000000
right leaf(i) in 0 = 21 tmpCost = 480.000000
special leaf(i) in 0 = 17 tmpCost = 542.000000 cost1_I[0, 5] = 190.000000
left leaf(j) in 5 = 6 tmpCost = 478.000000
right leaf(j) in 5 = 10 tmpCost = 466.000000
special leaf(j) in 5 = 6 tmpCost = 1228.000000 cost2_I[5] = 178
cost2_I[4] = -288.000000
cost2_I[4](-288.000000) += cost2_R[4](466.000000) = 178.000000
S[0, 5] = 10
compute 0, 4
parent i = NULL parent j = 3
left leaf(i) in 0 = 1 tmpCost = 550.000000
right leaf(i) in 0 = 21 tmpCost = 528.000000
special leaf(i) in 0 = 17 tmpCost = 583.000000 cost1_I[0, 4] = 209.000000
left leaf(j) in 4 = 6 tmpCost = 528.000000
right leaf(j) in 4 = 10 tmpCost = 514.000000
special leaf(j) in 4 = 6 tmpCost = 1403.000000 cost2_I[4] = 178
cost2_I[3] = -336.000000
cost2_I[3](-336.000000) += cost2_R[3](514.000000) = 178.000000
S[0, 4] = 10
compute 0, 3
parent i = NULL parent j = 2
left leaf(i) in 0 = 1 tmpCost = 600.000000
right leaf(i) in 0 = 21 tmpCost = 576.000000
special leaf(i) in 0 = 17 tmpCost = 624.000000 cost1_I[0, 3] = 228.000000
left leaf(j) in 3 = 6 tmpCost = 578.000000
right leaf(j) in 3 = 10 tmpCost = 562.000000
special leaf(j) in 3 = 6 tmpCost = 1578.000000 cost2_I[3] = 178
cost2_I[2] = -384.000000
cost2_I[2](-384.000000) += cost2_R[2](562.000000) = 178.000000
S[0, 3] = 10
compute 0, 2
parent i = NULL parent j = 1
left leaf(i) in 0 = 1 tmpCost = 650.000000
right leaf(i) in 0 = 21 tmpCost = 624.000000
special leaf(i) in 0 = 17 tmpCost = 665.000000 cost1_I[0, 2] = 247.000000
left leaf(j) in 2 = 6 tmpCost = 628.000000
right leaf(j) in 2 = 10 tmpCost = 610.000000
special leaf(j) in 2 = 6 tmpCost = 1753.000000 cost2_I[2] = 178
cost2_I[1] = -432.000000
cost2_I[1](-432.000000) += cost2_R[1](610.000000) = 178.000000
S[0, 2] = 10
compute 0, 1
parent i = NULL parent j = 0
left leaf(i) in 0 = 1 tmpCost = 700.000000
right leaf(i) in 0 = 21 tmpCost = 672.000000
special leaf(i) in 0 = 17 tmpCost = 706.000000 cost1_I[0, 1] = 266.000000
left leaf(j) in 1 = 6 tmpCost = 678.000000
right leaf(j) in 1 = 10 tmpCost = 658.000000
special leaf(j) in 1 = 6 tmpCost = 1928.000000 cost2_I[1] = 178
cost2_I[0] = -480.000000
S[0, 1] = 10
compute 0, 16
parent i = NULL parent j = 15
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 16] = 19.000000
cost2_I[15] = -41.000000
S[0, 16] = 17
compute 0, 17
parent i = NULL parent j = 15
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 17] = 19.000000
S[0, 17] = 17
compute 0, 18
parent i = NULL parent j = 15
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 18] = 19.000000
S[0, 18] = 17
compute 0, 19
parent i = NULL parent j = 15
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 19] = 19.000000
cost2_I[15](-41.000000) += cost2_R[15](164.000000) = 123.000000
S[0, 19] = 17
compute 0, 15
parent i = NULL parent j = 14
left leaf(i) in 0 = 1 tmpCost = 400.000000
right leaf(i) in 0 = 21 tmpCost = 384.000000
special leaf(i) in 0 = 17 tmpCost = 394.000000 cost1_I[0, 15] = 152.000000
left leaf(j) in 15 = 16 tmpCost = 373.000000
right leaf(j) in 15 = 19 tmpCost = 363.000000
special leaf(j) in 15 = 16 tmpCost = 998.000000 cost2_I[15] = 123
cost2_I[14] = -240.000000
cost2_I[14](-240.000000) += cost2_R[14](363.000000) = 123.000000
S[0, 15] = 19
compute 0, 14
parent i = NULL parent j = 13
left leaf(i) in 0 = 1 tmpCost = 450.000000
right leaf(i) in 0 = 21 tmpCost = 432.000000
special leaf(i) in 0 = 17 tmpCost = 435.000000 cost1_I[0, 14] = 171.000000
left leaf(j) in 14 = 16 tmpCost = 423.000000
right leaf(j) in 14 = 19 tmpCost = 411.000000
special leaf(j) in 14 = 16 tmpCost = 1173.000000 cost2_I[14] = 123
cost2_I[13] = -288.000000
cost2_I[13](-288.000000) += cost2_R[13](411.000000) = 123.000000
S[0, 14] = 19
compute 0, 13
parent i = NULL parent j = 12
left leaf(i) in 0 = 1 tmpCost = 510.024750
right leaf(i) in 0 = 21 tmpCost = 480.000000
special leaf(i) in 0 = 17 tmpCost = 476.000000 cost1_I[0, 13] = 190.000000
left leaf(j) in 13 = 16 tmpCost = 473.000000
right leaf(j) in 13 = 19 tmpCost = 459.000000
special leaf(j) in 13 = 16 tmpCost = 1348.000000 cost2_I[13] = 123
cost2_I[12] = -336.000000
cost2_I[12](-336.000000) += cost2_R[12](459.000000) = 123.000000
S[0, 13] = 19
compute 0, 12
parent i = NULL parent j = 11
left leaf(i) in 0 = 1 tmpCost = 550.000000
right leaf(i) in 0 = 21 tmpCost = 528.000000
special leaf(i) in 0 = 17 tmpCost = 517.000000 cost1_I[0, 12] = 209.000000
left leaf(j) in 12 = 16 tmpCost = 523.000000
right leaf(j) in 12 = 19 tmpCost = 507.000000
special leaf(j) in 12 = 16 tmpCost = 1523.000000 cost2_I[12] = 123
cost2_I[11] = -384.000000
S[0, 12] = 19
compute 0, 20
parent i = NULL parent j = 11
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
left leaf(i) in 0 = 1 tmpCost = 50.000000
right leaf(i) in 0 = 21 tmpCost = 48.000000
special leaf(i) in 0 = 17 tmpCost = 41.000000 cost1_I[0, 20] = 19.000000
cost2_I[11](-384.000000) += cost2_R[11](548.000000) = 164.000000
S[0, 20] = 17
compute 0, 11
parent i = NULL parent j = 0
left leaf(i) in 0 = 1 tmpCost = 700.000000
right leaf(i) in 0 = 21 tmpCost = 826.000000
special leaf(i) in 0 = 17 tmpCost = 794.000000 cost1_I[0, 11] = 266.000000
left leaf(j) in 11 = 16 tmpCost = 664.000000
right leaf(j) in 11 = 20 tmpCost = 987.000000
special leaf(j) in 11 = 16 tmpCost = 1914.000000 cost2_I[11] = 164
cost2_I[0] = -500.000000
cost2_I[0](-500.000000) += cost2_R[0](1322.000000) = 822.000000
S[0, 11] = 16
compute 0, 0
parent i = NULL parent j = NULL
left leaf(i) in 0 = 1 tmpCost = 1950.000000
right leaf(i) in 0 = 21 tmpCost = 2026.000000
special leaf(i) in 0 = 17 tmpCost = 3931.000000 cost1_I[0, 0] = 741.000000
left leaf(j) in 0 = 6 tmpCost = 1892.000000
right leaf(j) in 0 = 20 tmpCost = 2173.000000
special leaf(j) in 0 = 16 tmpCost = 4497.000000 cost2_I[0] = 822
S[0, 0] = 6
RESULT
6 in B 17 in A 17 in A 10 in B 10 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 
7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 
8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 
9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 
10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 
11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 
19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 
20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 
21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 
RESULT 2
6 in B 10 in B 10 in B 10 in B 10 in B 10 in B 21 in A 17 in A 21 in A 17 in A 21 in A 16 in B 19 in B 19 in B 19 in B 19 in B 17 in A 17 in A 17 in A 17 in A 17 in A 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 17 in A 17 in A 17 in A 6 in B 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 6 in B 7 in B 8 in B 9 in B 10 in B 16 in B 16 in B 16 in B 16 in B 16 in B 16 in B 17 in B 18 in B 19 in B 20 in B 
