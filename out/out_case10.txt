Compute Free(2, 0)
If select 2 in Tree A #Subproblem: 5 Direction: LeftCompute Free(2, 1)
If select 2 in Tree A #Subproblem: 3 Direction: LeftCompute Free(2, 2)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[2][2] freeSumA = 0 freeSumB = 0
Free[2][2] = 1
FreeS(2, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(2, 3)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[2][3] freeSumA = 0 freeSumB = 0
Free[2][3] = 1
FreeS(2, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[2][1] freeSumA = 0 freeSumB = 2
Compute Free(2, 1)
If select 2(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(2, 1)
If select 3(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[2][1] = 3
FreeS(2, 1)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
Compute Free(2, 4)
If select 2 in Tree A #Subproblem: 1 Direction: LeftCompute Free(2, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[2][4] freeSumA = 0 freeSumB = 0
Free[2][4] = 1
FreeS(2, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[2][0] freeSumA = 0 freeSumB = 4
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 7 Direction: Right
Compute Free(2, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[2][0] = 5
FreeS(2, 0)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
Compute Free(3, 0)
If select 3 in Tree A #Subproblem: 5 Direction: LeftCompute Free(3, 1)
If select 3 in Tree A #Subproblem: 3 Direction: LeftCompute Free(3, 2)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[3][2] freeSumA = 0 freeSumB = 0
Free[3][2] = 1
FreeS(3, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(3, 3)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[3][3] freeSumA = 0 freeSumB = 0
Free[3][3] = 1
FreeS(3, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[3][1] freeSumA = 0 freeSumB = 2
Compute Free(3, 1)
If select 2(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(3, 1)
If select 3(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[3][1] = 3
FreeS(3, 1)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(3, 4)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[3][4] freeSumA = 0 freeSumB = 0
Free[3][4] = 1
FreeS(3, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[3][0] freeSumA = 0 freeSumB = 4
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 7 Direction: Right
Compute Free(3, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[3][0] = 5
FreeS(3, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(1, 2)
If select 2 in Tree B #Subproblem: 3 Direction: Leftfree[1][2] freeSumA = 2 freeSumB = 0
Compute Free(1, 2)
If select 2(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(1, 2)
If select 3(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[1][2] = 3
FreeS(1, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(1, 3)
If select 3 in Tree B #Subproblem: 3 Direction: Leftfree[1][3] freeSumA = 2 freeSumB = 0
Compute Free(1, 3)
If select 2(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(1, 3)
If select 3(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[1][3] = 3
FreeS(1, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[1][1] freeSumA = 6 freeSumB = 6
Compute Free(1, 1)
If select 2(leftmost) in Tree A #Subproblem: 15 Direction: Right
Compute Free(1, 1)
If select 3(rightmost) in Tree A #Subproblem: 15 Direction: Left
Compute Free(1, 1)
If select 2(leftmost) in Tree B #Subproblem: 15 Direction: Right
Compute Free(1, 1)
If select 3(rightmost) in Tree B #Subproblem: 15 Direction: Left
Free[1][1] = 15
FreeS(1, 1)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
Compute Free(1, 4)
If select 4 in Tree B #Subproblem: 3 Direction: Leftfree[1][4] freeSumA = 2 freeSumB = 0
Compute Free(1, 4)
If select 2(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(1, 4)
If select 3(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[1][4] = 3
FreeS(1, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[1][0] freeSumA = 10 freeSumB = 18
Compute Free(1, 0)
If select 2(leftmost) in Tree A #Subproblem: 26 Direction: Right
Compute Free(1, 0)
If select 3(rightmost) in Tree A #Subproblem: 32 Direction: Left
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 26 Direction: Right
Compute Free(1, 0)
If select 4(rightmost) in Tree B #Subproblem: 35 Direction: Left
Free[1][0] = 26
FreeS(1, 0)
Keynode: 2 in Tree A
Direction: rightLeaf: 2
Compute Free(4, 0)
If select 4 in Tree A #Subproblem: 5 Direction: LeftCompute Free(4, 1)
If select 4 in Tree A #Subproblem: 3 Direction: LeftCompute Free(4, 2)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[4][2] freeSumA = 0 freeSumB = 0
Free[4][2] = 1
FreeS(4, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(4, 3)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[4][3] freeSumA = 0 freeSumB = 0
Free[4][3] = 1
FreeS(4, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[4][1] freeSumA = 0 freeSumB = 2
Compute Free(4, 1)
If select 2(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(4, 1)
If select 3(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[4][1] = 3
FreeS(4, 1)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(4, 4)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[4][4] freeSumA = 0 freeSumB = 0
Free[4][4] = 1
FreeS(4, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[4][0] freeSumA = 0 freeSumB = 4
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 7 Direction: Right
Compute Free(4, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[4][0] = 5
FreeS(4, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(0, 2)
If select 2 in Tree B #Subproblem: 5 Direction: Leftfree[0][2] freeSumA = 4 freeSumB = 0
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 7 Direction: Right
Compute Free(0, 2)
If select 4(rightmost) in Tree A #Subproblem: 8 Direction: Left
Free[0][2] = 5
FreeS(0, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
Compute Free(0, 3)
If select 3 in Tree B #Subproblem: 5 Direction: Leftfree[0][3] freeSumA = 4 freeSumB = 0
Compute Free(0, 3)
If select 1(leftmost) in Tree A #Subproblem: 7 Direction: Right
Compute Free(0, 3)
If select 4(rightmost) in Tree A #Subproblem: 8 Direction: Left
Free[0][3] = 5
FreeS(0, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[0][1] freeSumA = 18 freeSumB = 10
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 26 Direction: Right
Compute Free(0, 1)
If select 4(rightmost) in Tree A #Subproblem: 35 Direction: Left
Compute Free(0, 1)
If select 2(leftmost) in Tree B #Subproblem: 26 Direction: Right
Compute Free(0, 1)
If select 3(rightmost) in Tree B #Subproblem: 32 Direction: Left
Free[0][1] = 26
FreeS(0, 1)
Keynode: 1 in Tree A
Direction: rightLeaf: 2
Compute Free(0, 4)
If select 4 in Tree B #Subproblem: 5 Direction: Leftfree[0][4] freeSumA = 4 freeSumB = 0
Compute Free(0, 4)
If select 1(leftmost) in Tree A #Subproblem: 7 Direction: Right
Compute Free(0, 4)
If select 4(rightmost) in Tree A #Subproblem: 8 Direction: Left
Free[0][4] = 5
FreeS(0, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[0][0] freeSumA = 31 freeSumB = 31
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 45 Direction: Right
Compute Free(0, 0)
If select 4(rightmost) in Tree A #Subproblem: 71 Direction: Left
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 45 Direction: Right
Compute Free(0, 0)
If select 4(rightmost) in Tree B #Subproblem: 71 Direction: Left
Free[0][0] = 45
FreeS(0, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 2
RESULT
2 in A 2 in A 2 in B 3 in B 4 in B 
2 in A 2 in A 2 in B 3 in B 4 in B 
2 in A 2 in A 2 in B 3 in B 4 in B 
3 in A 3 in A 2 in B 3 in B 4 in B 
4 in A 4 in A 2 in B 3 in B 4 in B 
Free
45 26 5 5 5 
26 15 3 3 3 
5 3 1 1 1 
5 3 1 1 1 
5 3 1 1 1 

LeftA
-1 -1 -1 -1 -1 
26 15 4 4 4 
7 4 1 1 1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 

RightA
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
9 4 1 1 1 
9 4 1 1 1 

AllA
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
9 4 1 1 1 
-1 -1 -1 -1 -1 

LeftB
-1 26 7 -1 -1 
-1 15 4 -1 -1 
-1 4 1 -1 -1 
-1 4 1 -1 -1 
-1 4 1 -1 -1 

RightB
-1 -1 -1 9 9 
-1 -1 -1 4 4 
-1 -1 -1 1 1 
-1 -1 -1 1 1 
-1 -1 -1 1 1 

AllB
-1 -1 -1 9 -1 
-1 -1 -1 4 -1 
-1 -1 -1 1 -1 
-1 -1 -1 1 -1 
-1 -1 -1 1 -1 

TreeDistance(0, 3)
Compute forestdist(2, 3)
forestdist[1, 1] = 1.000000
Compute forestdist(3, 3)
forestdist[2, 1] = 2.000000
Compute forestdist(1, 3)
forestdist[3, 1] = 3.000000
Compute forestdist(4, 3)
forestdist[4, 1] = 4.000000
Compute forestdist(0, 3)
forestdist[5, 1] = 5.000000
TreeDistance(0, 1)
Compute forestdist(2, 2)
forestdist[1, 1] = 1.000000
Compute forestdist(2, 3)
forestdist[1, 2] = 2.000000
Compute forestdist(2, 1)
forestdist[1, 3] = 3.000000
Compute forestdist(3, 2)
forestdist[2, 1] = 2.000000
Compute forestdist(3, 3)
forestdist[2, 2] = 2.000000
Compute forestdist(3, 1)
forestdist[2, 3] = 3.000000
Compute forestdist(1, 2)
forestdist[3, 1] = 3.000000
Compute forestdist(1, 3)
forestdist[3, 2] = 3.000000
Compute forestdist(1, 1)
forestdist[3, 3] = 3.000000
Compute forestdist(4, 2)
forestdist[4, 1] = 4.000000
Compute forestdist(4, 3)
forestdist[4, 2] = 4.000000
Compute forestdist(4, 1)
forestdist[4, 3] = 4.000000
Compute forestdist(0, 2)
forestdist[5, 1] = 5.000000
Compute forestdist(0, 3)
forestdist[5, 2] = 5.000000
Compute forestdist(0, 1)
forestdist[5, 3] = 5.000000
TreeDistance(0, 0)
Compute forestdist(2, 2)
forestdist[1, 1] = 1.000000
Compute forestdist(2, 3)
forestdist[1, 2] = 2.000000
Compute forestdist(2, 1)
forestdist[1, 3] = 3.000000
Compute forestdist(2, 4)
forestdist[1, 4] = 4.000000
Compute forestdist(2, 0)
forestdist[1, 5] = 5.000000
Compute forestdist(3, 2)
forestdist[2, 1] = 2.000000
Compute forestdist(3, 3)
forestdist[2, 2] = 2.000000
Compute forestdist(3, 1)
forestdist[2, 3] = 3.000000
Compute forestdist(3, 4)
forestdist[2, 4] = 4.000000
Compute forestdist(3, 0)
forestdist[2, 5] = 5.000000
Compute forestdist(1, 2)
forestdist[3, 1] = 3.000000
Compute forestdist(1, 3)
forestdist[3, 2] = 3.000000
Compute forestdist(1, 1)
forestdist[3, 3] = 3.000000
Compute forestdist(1, 4)
forestdist[3, 4] = 4.000000
Compute forestdist(1, 0)
forestdist[3, 5] = 5.000000
Compute forestdist(4, 2)
forestdist[4, 1] = 4.000000
Compute forestdist(4, 3)
forestdist[4, 2] = 4.000000
Compute forestdist(4, 1)
forestdist[4, 3] = 4.000000
Compute forestdist(4, 4)
forestdist[4, 4] = 4.000000
Compute forestdist(4, 0)
forestdist[4, 5] = 5.000000
Compute forestdist(0, 2)
forestdist[5, 1] = 5.000000
Compute forestdist(0, 3)
forestdist[5, 2] = 5.000000
Compute forestdist(0, 1)
forestdist[5, 3] = 5.000000
Compute forestdist(0, 4)
forestdist[5, 4] = 5.000000
Compute forestdist(0, 0)
forestdist[5, 5] = 5.000000
