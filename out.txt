Compute Free(1, 0)
If select 1 in Tree A #Subproblem: 39 Direction: Right
Compute Free(1, 1)
If select 1 in Tree A #Subproblem: 14 Direction: Left
Compute Free(1, 2)
If select 1 in Tree A #Subproblem: 13 Direction: Left
Compute Free(1, 3)
If select 1 in Tree A #Subproblem: 12 Direction: Left
Compute Free(1, 4)
If select 1 in Tree A #Subproblem: 11 Direction: Left
Compute Free(1, 5)
If select 1 in Tree A #Subproblem: 10 Direction: Left
Compute Free(1, 6)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 6)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 7)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 7)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 8)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 8)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 9)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 9)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 10)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 10)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(1, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(1, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(1, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(1, 10) = 10
Compute Free(1, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(1, 5)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(1, 5) = 10
Compute Free(1, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(1, 4)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(1, 4) = 10
Compute Free(1, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(1, 3)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(1, 3) = 10
Compute Free(1, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(1, 2)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(1, 2) = 10
Compute Free(1, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(1, 1)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 11)
If select 1 in Tree A #Subproblem: 14 Direction: Right
Compute Free(1, 12)
If select 1 in Tree A #Subproblem: 11 Direction: Left
Compute Free(1, 13)
If select 1 in Tree A #Subproblem: 10 Direction: Left
Compute Free(1, 14)
If select 1 in Tree A #Subproblem: 9 Direction: Left
Compute Free(1, 15)
If select 1 in Tree A #Subproblem: 8 Direction: Left
Compute Free(1, 16)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 16)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 17)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 17)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 18)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 18)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 19)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 19)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(1, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(1, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(1, 19) = 19
Compute Free(1, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(1, 15)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(1, 15) = 19
Compute Free(1, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(1, 14)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(1, 14) = 19
Compute Free(1, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(1, 13)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(1, 13) = 19
Compute Free(1, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(1, 12)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 20)
If select 1 in Tree A #Subproblem: 1 Direction: Left
Compute Free(1, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(1, 20)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(1, 20) = 20
Compute Free(1, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(1, 11)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(1, 11) = 16
Compute Free(1, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(1, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(6, 0)
If select 6 in Tree A #Subproblem: 39 Direction: Right
Compute Free(6, 1)
If select 6 in Tree A #Subproblem: 14 Direction: Left
Compute Free(6, 2)
If select 6 in Tree A #Subproblem: 13 Direction: Left
Compute Free(6, 3)
If select 6 in Tree A #Subproblem: 12 Direction: Left
Compute Free(6, 4)
If select 6 in Tree A #Subproblem: 11 Direction: Left
Compute Free(6, 5)
If select 6 in Tree A #Subproblem: 10 Direction: Left
Compute Free(6, 6)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 6)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 7)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 7)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 8)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 8)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 9)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 9)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 10)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 10)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(6, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(6, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(6, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(6, 10) = 10
Compute Free(6, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(6, 5)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(6, 5) = 10
Compute Free(6, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(6, 4)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(6, 4) = 10
Compute Free(6, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(6, 3)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(6, 3) = 10
Compute Free(6, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(6, 2)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(6, 2) = 10
Compute Free(6, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(6, 1)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 11)
If select 6 in Tree A #Subproblem: 14 Direction: Right
Compute Free(6, 12)
If select 6 in Tree A #Subproblem: 11 Direction: Left
Compute Free(6, 13)
If select 6 in Tree A #Subproblem: 10 Direction: Left
Compute Free(6, 14)
If select 6 in Tree A #Subproblem: 9 Direction: Left
Compute Free(6, 15)
If select 6 in Tree A #Subproblem: 8 Direction: Left
Compute Free(6, 16)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 16)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 17)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 17)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 18)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 18)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 19)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 19)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(6, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(6, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(6, 19) = 19
Compute Free(6, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(6, 15)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(6, 15) = 19
Compute Free(6, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(6, 14)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(6, 14) = 19
Compute Free(6, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(6, 13)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(6, 13) = 19
Compute Free(6, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(6, 12)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 20)
If select 6 in Tree A #Subproblem: 1 Direction: Left
Compute Free(6, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(6, 20)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(6, 20) = 20
Compute Free(6, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(6, 11)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(6, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(6, 11) = 16
Compute Free(6, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(6, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(7, 0)
If select 7 in Tree A #Subproblem: 39 Direction: Right
Compute Free(7, 1)
If select 7 in Tree A #Subproblem: 14 Direction: Left
Compute Free(7, 2)
If select 7 in Tree A #Subproblem: 13 Direction: Left
Compute Free(7, 3)
If select 7 in Tree A #Subproblem: 12 Direction: Left
Compute Free(7, 4)
If select 7 in Tree A #Subproblem: 11 Direction: Left
Compute Free(7, 5)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(7, 6)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 6)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 7)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 7)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 8)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 8)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 9)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 9)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 10)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 10)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(7, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(7, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(7, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(7, 10) = 10
Compute Free(7, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(7, 5)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(7, 5) = 10
Compute Free(7, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(7, 4)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(7, 4) = 10
Compute Free(7, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(7, 3)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(7, 3) = 10
Compute Free(7, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(7, 2)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(7, 2) = 10
Compute Free(7, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(7, 1)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 11)
If select 7 in Tree A #Subproblem: 14 Direction: Right
Compute Free(7, 12)
If select 7 in Tree A #Subproblem: 11 Direction: Left
Compute Free(7, 13)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(7, 14)
If select 7 in Tree A #Subproblem: 9 Direction: Left
Compute Free(7, 15)
If select 7 in Tree A #Subproblem: 8 Direction: Left
Compute Free(7, 16)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 16)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 17)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 17)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 18)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 18)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 19)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 19)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(7, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(7, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(7, 19) = 19
Compute Free(7, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(7, 15)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(7, 15) = 19
Compute Free(7, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(7, 14)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(7, 14) = 19
Compute Free(7, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(7, 13)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(7, 13) = 19
Compute Free(7, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(7, 12)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 20)
If select 7 in Tree A #Subproblem: 1 Direction: Left
Compute Free(7, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(7, 20)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(7, 20) = 20
Compute Free(7, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(7, 11)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(7, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(7, 11) = 16
Compute Free(7, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(7, 0)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(8, 0)
If select 8 in Tree A #Subproblem: 39 Direction: Right
Compute Free(8, 1)
If select 8 in Tree A #Subproblem: 14 Direction: Left
Compute Free(8, 2)
If select 8 in Tree A #Subproblem: 13 Direction: Left
Compute Free(8, 3)
If select 8 in Tree A #Subproblem: 12 Direction: Left
Compute Free(8, 4)
If select 8 in Tree A #Subproblem: 11 Direction: Left
Compute Free(8, 5)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(8, 6)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 6)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 7)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 7)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 8)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 8)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 9)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 9)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 10)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 10)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(8, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(8, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(8, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(8, 10) = 10
Compute Free(8, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(8, 5)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(8, 5) = 10
Compute Free(8, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(8, 4)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(8, 4) = 10
Compute Free(8, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(8, 3)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(8, 3) = 10
Compute Free(8, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(8, 2)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(8, 2) = 10
Compute Free(8, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(8, 1)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 11)
If select 8 in Tree A #Subproblem: 14 Direction: Right
Compute Free(8, 12)
If select 8 in Tree A #Subproblem: 11 Direction: Left
Compute Free(8, 13)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(8, 14)
If select 8 in Tree A #Subproblem: 9 Direction: Left
Compute Free(8, 15)
If select 8 in Tree A #Subproblem: 8 Direction: Left
Compute Free(8, 16)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 16)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 17)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 17)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 18)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 18)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 19)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 19)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(8, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(8, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(8, 19) = 19
Compute Free(8, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(8, 15)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(8, 15) = 19
Compute Free(8, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(8, 14)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(8, 14) = 19
Compute Free(8, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(8, 13)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(8, 13) = 19
Compute Free(8, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(8, 12)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 20)
If select 8 in Tree A #Subproblem: 1 Direction: Left
Compute Free(8, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(8, 20)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(8, 20) = 20
Compute Free(8, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(8, 11)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(8, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(8, 11) = 16
Compute Free(8, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(8, 0)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(9, 0)
If select 9 in Tree A #Subproblem: 39 Direction: Right
Compute Free(9, 1)
If select 9 in Tree A #Subproblem: 14 Direction: Left
Compute Free(9, 2)
If select 9 in Tree A #Subproblem: 13 Direction: Left
Compute Free(9, 3)
If select 9 in Tree A #Subproblem: 12 Direction: Left
Compute Free(9, 4)
If select 9 in Tree A #Subproblem: 11 Direction: Left
Compute Free(9, 5)
If select 9 in Tree A #Subproblem: 10 Direction: Left
Compute Free(9, 6)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 6)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 7)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 7)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 8)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 8)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 9)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 9)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 10)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 10)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(9, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(9, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(9, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(9, 10) = 10
Compute Free(9, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(9, 5)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(9, 5) = 10
Compute Free(9, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(9, 4)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(9, 4) = 10
Compute Free(9, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(9, 3)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(9, 3) = 10
Compute Free(9, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(9, 2)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(9, 2) = 10
Compute Free(9, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(9, 1)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 11)
If select 9 in Tree A #Subproblem: 14 Direction: Right
Compute Free(9, 12)
If select 9 in Tree A #Subproblem: 11 Direction: Left
Compute Free(9, 13)
If select 9 in Tree A #Subproblem: 10 Direction: Left
Compute Free(9, 14)
If select 9 in Tree A #Subproblem: 9 Direction: Left
Compute Free(9, 15)
If select 9 in Tree A #Subproblem: 8 Direction: Left
Compute Free(9, 16)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 16)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 17)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 17)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 18)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 18)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 19)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 19)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(9, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(9, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(9, 19) = 19
Compute Free(9, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(9, 15)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(9, 15) = 19
Compute Free(9, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(9, 14)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(9, 14) = 19
Compute Free(9, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(9, 13)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(9, 13) = 19
Compute Free(9, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(9, 12)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 20)
If select 9 in Tree A #Subproblem: 1 Direction: Left
Compute Free(9, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(9, 20)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(9, 20) = 20
Compute Free(9, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(9, 11)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(9, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(9, 11) = 16
Compute Free(9, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(9, 0)
Keynode: 9 in Tree A
Direction: rightLeaf: 9
Compute Free(10, 0)
If select 10 in Tree A #Subproblem: 39 Direction: Right
Compute Free(10, 1)
If select 10 in Tree A #Subproblem: 14 Direction: Left
Compute Free(10, 2)
If select 10 in Tree A #Subproblem: 13 Direction: Left
Compute Free(10, 3)
If select 10 in Tree A #Subproblem: 12 Direction: Left
Compute Free(10, 4)
If select 10 in Tree A #Subproblem: 11 Direction: Left
Compute Free(10, 5)
If select 10 in Tree A #Subproblem: 10 Direction: Left
Compute Free(10, 6)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 6)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 7)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 7)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 8)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 8)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 9)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 9)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 10)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 10)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(10, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(10, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(10, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(10, 10) = 10
Compute Free(10, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(10, 5)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(10, 5) = 10
Compute Free(10, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(10, 4)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(10, 4) = 10
Compute Free(10, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(10, 3)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(10, 3) = 10
Compute Free(10, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(10, 2)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(10, 2) = 10
Compute Free(10, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(10, 1)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 11)
If select 10 in Tree A #Subproblem: 14 Direction: Right
Compute Free(10, 12)
If select 10 in Tree A #Subproblem: 11 Direction: Left
Compute Free(10, 13)
If select 10 in Tree A #Subproblem: 10 Direction: Left
Compute Free(10, 14)
If select 10 in Tree A #Subproblem: 9 Direction: Left
Compute Free(10, 15)
If select 10 in Tree A #Subproblem: 8 Direction: Left
Compute Free(10, 16)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 16)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 17)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 17)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 18)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 18)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 19)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 19)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(10, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(10, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(10, 19) = 19
Compute Free(10, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(10, 15)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(10, 15) = 19
Compute Free(10, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(10, 14)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(10, 14) = 19
Compute Free(10, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(10, 13)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(10, 13) = 19
Compute Free(10, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(10, 12)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 20)
If select 10 in Tree A #Subproblem: 1 Direction: Left
Compute Free(10, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(10, 20)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(10, 20) = 20
Compute Free(10, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(10, 11)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(10, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(10, 11) = 16
Compute Free(10, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(10, 0)
Keynode: 10 in Tree A
Direction: rightLeaf: 10
Compute Free(5, 6)
If select 6 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 6)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 6)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 6)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 6)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 6] set to 10
Compute Free(5, 6)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(5, 7)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 7)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 7)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 7)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 7)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 7] set to 10
Compute Free(5, 7)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(5, 8)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 8)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 8)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 8)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 8)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 8] set to 10
Compute Free(5, 8)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(5, 9)
If select 9 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 9)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 9)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 9)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 9)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 9] set to 10
Compute Free(5, 9)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(5, 10)
If select 10 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 10)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 10)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 10)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 10)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 10] set to 10
Compute Free(5, 10)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(5, 5)
If select 6(leftmost) in Tree A #Subproblem: 100 Direction: Right
Compute Free(5, 5)
If select 7 in Tree A #Subproblem: 112 Direction: Right
Compute Free(5, 5)
If select 8 in Tree A #Subproblem: 118 Direction: Left
Compute Free(5, 5)
If select 9 in Tree A #Subproblem: 112 Direction: Left
RightA[10, 5] set to 10
Compute Free(5, 5)
If select 10(rightmost) in Tree A #Subproblem: 100 Direction: Left
Compute Free(5, 5)
If select 6(leftmost) in Tree B #Subproblem: 100 Direction: Right
Compute Free(5, 5)
If select 7 in Tree B #Subproblem: 112 Direction: Right
Compute Free(5, 5)
If select 8 in Tree B #Subproblem: 118 Direction: Left
Compute Free(5, 5)
If select 9 in Tree B #Subproblem: 112 Direction: Left
RightB(5, 10) = 10
Compute Free(5, 5)
If select 10(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(5, 5)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 4)
If select 6(leftmost) in Tree A #Subproblem: 110 Direction: Right
Compute Free(5, 4)
If select 7 in Tree A #Subproblem: 122 Direction: Right
Compute Free(5, 4)
If select 8 in Tree A #Subproblem: 128 Direction: Left
Compute Free(5, 4)
If select 9 in Tree A #Subproblem: 122 Direction: Left
RightA[10, 4] set to 10
Compute Free(5, 4)
If select 10(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(5, 4)
If select 5(leftmost) in Tree B #Subproblem: 110 Direction: Right
RightB(5, 5) = 10
Compute Free(5, 4)
If select 5(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(5, 4)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 3)
If select 6(leftmost) in Tree A #Subproblem: 120 Direction: Right
Compute Free(5, 3)
If select 7 in Tree A #Subproblem: 132 Direction: Right
Compute Free(5, 3)
If select 8 in Tree A #Subproblem: 138 Direction: Left
Compute Free(5, 3)
If select 9 in Tree A #Subproblem: 132 Direction: Left
RightA[10, 3] set to 10
Compute Free(5, 3)
If select 10(rightmost) in Tree A #Subproblem: 120 Direction: Left
Compute Free(5, 3)
If select 4(leftmost) in Tree B #Subproblem: 120 Direction: Right
RightB(5, 4) = 10
Compute Free(5, 3)
If select 4(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(5, 3)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 2)
If select 6(leftmost) in Tree A #Subproblem: 130 Direction: Right
Compute Free(5, 2)
If select 7 in Tree A #Subproblem: 142 Direction: Right
Compute Free(5, 2)
If select 8 in Tree A #Subproblem: 148 Direction: Left
Compute Free(5, 2)
If select 9 in Tree A #Subproblem: 142 Direction: Left
RightA[10, 2] set to 10
Compute Free(5, 2)
If select 10(rightmost) in Tree A #Subproblem: 130 Direction: Left
Compute Free(5, 2)
If select 3(leftmost) in Tree B #Subproblem: 130 Direction: Right
RightB(5, 3) = 10
Compute Free(5, 2)
If select 3(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(5, 2)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 1)
If select 6(leftmost) in Tree A #Subproblem: 140 Direction: Right
Compute Free(5, 1)
If select 7 in Tree A #Subproblem: 152 Direction: Right
Compute Free(5, 1)
If select 8 in Tree A #Subproblem: 158 Direction: Left
Compute Free(5, 1)
If select 9 in Tree A #Subproblem: 152 Direction: Left
RightA[10, 1] set to 10
Compute Free(5, 1)
If select 10(rightmost) in Tree A #Subproblem: 140 Direction: Left
Compute Free(5, 1)
If select 2(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(5, 2) = 10
Compute Free(5, 1)
If select 2(rightmost) in Tree B #Subproblem: 140 Direction: Left
FreeS(5, 1)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 16)
If select 16 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 16)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 16)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 16)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 16)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 16] set to 10
Compute Free(5, 16)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(5, 17)
If select 17 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 17)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 17)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 17)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 17)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 17] set to 10
Compute Free(5, 17)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(5, 18)
If select 18 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 18)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 18)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 18)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 18)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 18] set to 10
Compute Free(5, 18)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(5, 19)
If select 19 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 19)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 19)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 19)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 19)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 19] set to 10
Compute Free(5, 19)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(5, 15)
If select 6(leftmost) in Tree A #Subproblem: 80 Direction: Right
Compute Free(5, 15)
If select 7 in Tree A #Subproblem: 86 Direction: Right
Compute Free(5, 15)
If select 8 in Tree A #Subproblem: 89 Direction: Left
Compute Free(5, 15)
If select 9 in Tree A #Subproblem: 86 Direction: Left
RightA[10, 15] set to 10
Compute Free(5, 15)
If select 10(rightmost) in Tree A #Subproblem: 80 Direction: Left
Compute Free(5, 15)
If select 16(leftmost) in Tree B #Subproblem: 80 Direction: Right
Compute Free(5, 15)
If select 17 in Tree B #Subproblem: 92 Direction: Right
Compute Free(5, 15)
If select 18 in Tree B #Subproblem: 92 Direction: Left
RightB(5, 19) = 19
Compute Free(5, 15)
If select 19(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(5, 15)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 14)
If select 6(leftmost) in Tree A #Subproblem: 90 Direction: Right
Compute Free(5, 14)
If select 7 in Tree A #Subproblem: 96 Direction: Right
Compute Free(5, 14)
If select 8 in Tree A #Subproblem: 99 Direction: Left
Compute Free(5, 14)
If select 9 in Tree A #Subproblem: 96 Direction: Left
RightA[10, 14] set to 10
Compute Free(5, 14)
If select 10(rightmost) in Tree A #Subproblem: 90 Direction: Left
Compute Free(5, 14)
If select 15(leftmost) in Tree B #Subproblem: 90 Direction: Right
RightB(5, 15) = 19
Compute Free(5, 14)
If select 15(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(5, 14)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 13)
If select 6(leftmost) in Tree A #Subproblem: 100 Direction: Right
Compute Free(5, 13)
If select 7 in Tree A #Subproblem: 106 Direction: Right
Compute Free(5, 13)
If select 8 in Tree A #Subproblem: 109 Direction: Left
Compute Free(5, 13)
If select 9 in Tree A #Subproblem: 106 Direction: Left
RightA[10, 13] set to 10
Compute Free(5, 13)
If select 10(rightmost) in Tree A #Subproblem: 100 Direction: Left
Compute Free(5, 13)
If select 14(leftmost) in Tree B #Subproblem: 100 Direction: Right
RightB(5, 14) = 19
Compute Free(5, 13)
If select 14(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(5, 13)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 12)
If select 6(leftmost) in Tree A #Subproblem: 110 Direction: Right
Compute Free(5, 12)
If select 7 in Tree A #Subproblem: 116 Direction: Right
Compute Free(5, 12)
If select 8 in Tree A #Subproblem: 119 Direction: Left
Compute Free(5, 12)
If select 9 in Tree A #Subproblem: 116 Direction: Left
RightA[10, 12] set to 10
Compute Free(5, 12)
If select 10(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(5, 12)
If select 13(leftmost) in Tree B #Subproblem: 110 Direction: Right
RightB(5, 13) = 19
Compute Free(5, 12)
If select 13(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(5, 12)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 20)
If select 20 in Tree B #Subproblem: 10 Direction: Left
Compute Free(5, 20)
If select 6(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(5, 20)
If select 7 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 20)
If select 8 in Tree A #Subproblem: 10 Direction: Left
Compute Free(5, 20)
If select 9 in Tree A #Subproblem: 10 Direction: Left
RightA[10, 20] set to 10
Compute Free(5, 20)
If select 10(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(5, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(5, 11)
If select 6(leftmost) in Tree A #Subproblem: 140 Direction: Right
Compute Free(5, 11)
If select 7 in Tree A #Subproblem: 160 Direction: Right
Compute Free(5, 11)
If select 8 in Tree A #Subproblem: 170 Direction: Right
Compute Free(5, 11)
If select 9 in Tree A #Subproblem: 180 Direction: Right
RightA[10, 11] set to 10
Compute Free(5, 11)
If select 10(rightmost) in Tree A #Subproblem: 182 Direction: Left
Compute Free(5, 11)
If select 12(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(5, 20) = 20
Compute Free(5, 11)
If select 20(rightmost) in Tree B #Subproblem: 210 Direction: Left
FreeS(5, 11)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(5, 0)
If select 6(leftmost) in Tree A #Subproblem: 390 Direction: Right
Compute Free(5, 0)
If select 7 in Tree A #Subproblem: 602 Direction: Right
Compute Free(5, 0)
If select 8 in Tree A #Subproblem: 708 Direction: Right
Compute Free(5, 0)
If select 9 in Tree A #Subproblem: 630 Direction: Left
RightA[10, 0] set to 10
Compute Free(5, 0)
If select 10(rightmost) in Tree A #Subproblem: 432 Direction: Left
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 390 Direction: Right
RightB(5, 11) = 16
Compute Free(5, 0)
If select 11(rightmost) in Tree B #Subproblem: 450 Direction: Left
FreeS(5, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 6)
If select 6 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 6)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 6] set to 10
Compute Free(4, 6)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(4, 7)
If select 7 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 7)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 7] set to 10
Compute Free(4, 7)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(4, 8)
If select 8 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 8)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 8] set to 10
Compute Free(4, 8)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(4, 9)
If select 9 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 9)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 9] set to 10
Compute Free(4, 9)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(4, 10)
If select 10 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 10)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 10] set to 10
Compute Free(4, 10)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(4, 5)
If select 5(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[5, 5] set to 10
Compute Free(4, 5)
If select 5(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(4, 5)
If select 6(leftmost) in Tree B #Subproblem: 110 Direction: Right
Compute Free(4, 5)
If select 7 in Tree B #Subproblem: 122 Direction: Right
Compute Free(4, 5)
If select 8 in Tree B #Subproblem: 128 Direction: Left
Compute Free(4, 5)
If select 9 in Tree B #Subproblem: 122 Direction: Left
RightB(4, 10) = 10
Compute Free(4, 5)
If select 10(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(4, 5)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 4)
If select 5(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[5, 4] set to 10
Compute Free(4, 4)
If select 5(rightmost) in Tree A #Subproblem: 121 Direction: Left
Compute Free(4, 4)
If select 5(leftmost) in Tree B #Subproblem: 121 Direction: Right
RightB(4, 5) = 10
Compute Free(4, 4)
If select 5(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(4, 4)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 3)
If select 5(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[5, 3] set to 10
Compute Free(4, 3)
If select 5(rightmost) in Tree A #Subproblem: 132 Direction: Left
Compute Free(4, 3)
If select 4(leftmost) in Tree B #Subproblem: 132 Direction: Right
RightB(4, 4) = 10
Compute Free(4, 3)
If select 4(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(4, 3)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 2)
If select 5(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[5, 2] set to 10
Compute Free(4, 2)
If select 5(rightmost) in Tree A #Subproblem: 143 Direction: Left
Compute Free(4, 2)
If select 3(leftmost) in Tree B #Subproblem: 143 Direction: Right
RightB(4, 3) = 10
Compute Free(4, 2)
If select 3(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(4, 2)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 1)
If select 5(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[5, 1] set to 10
Compute Free(4, 1)
If select 5(rightmost) in Tree A #Subproblem: 154 Direction: Left
Compute Free(4, 1)
If select 2(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(4, 2) = 10
Compute Free(4, 1)
If select 2(rightmost) in Tree B #Subproblem: 154 Direction: Left
FreeS(4, 1)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 16)
If select 16 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 16)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 16] set to 10
Compute Free(4, 16)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(4, 17)
If select 17 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 17)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 17] set to 10
Compute Free(4, 17)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(4, 18)
If select 18 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 18)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 18] set to 10
Compute Free(4, 18)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(4, 19)
If select 19 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 19)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 19] set to 10
Compute Free(4, 19)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(4, 15)
If select 5(leftmost) in Tree A #Subproblem: 88 Direction: Right
RightA[5, 15] set to 10
Compute Free(4, 15)
If select 5(rightmost) in Tree A #Subproblem: 88 Direction: Left
Compute Free(4, 15)
If select 16(leftmost) in Tree B #Subproblem: 88 Direction: Right
Compute Free(4, 15)
If select 17 in Tree B #Subproblem: 100 Direction: Right
Compute Free(4, 15)
If select 18 in Tree B #Subproblem: 100 Direction: Left
RightB(4, 19) = 19
Compute Free(4, 15)
If select 19(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(4, 15)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 14)
If select 5(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[5, 14] set to 10
Compute Free(4, 14)
If select 5(rightmost) in Tree A #Subproblem: 99 Direction: Left
Compute Free(4, 14)
If select 15(leftmost) in Tree B #Subproblem: 99 Direction: Right
RightB(4, 15) = 19
Compute Free(4, 14)
If select 15(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(4, 14)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 13)
If select 5(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[5, 13] set to 10
Compute Free(4, 13)
If select 5(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(4, 13)
If select 14(leftmost) in Tree B #Subproblem: 110 Direction: Right
RightB(4, 14) = 19
Compute Free(4, 13)
If select 14(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(4, 13)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 12)
If select 5(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[5, 12] set to 10
Compute Free(4, 12)
If select 5(rightmost) in Tree A #Subproblem: 121 Direction: Left
Compute Free(4, 12)
If select 13(leftmost) in Tree B #Subproblem: 121 Direction: Right
RightB(4, 13) = 19
Compute Free(4, 12)
If select 13(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(4, 12)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 20)
If select 20 in Tree B #Subproblem: 11 Direction: Left
Compute Free(4, 20)
If select 5(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[5, 20] set to 10
Compute Free(4, 20)
If select 5(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(4, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(4, 11)
If select 5(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[5, 11] set to 10
Compute Free(4, 11)
If select 5(rightmost) in Tree A #Subproblem: 168 Direction: Left
Compute Free(4, 11)
If select 12(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(4, 20) = 20
Compute Free(4, 11)
If select 20(rightmost) in Tree B #Subproblem: 231 Direction: Left
FreeS(4, 11)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(4, 0)
If select 5(leftmost) in Tree A #Subproblem: 429 Direction: Right
RightA[5, 0] set to 10
Compute Free(4, 0)
If select 5(rightmost) in Tree A #Subproblem: 443 Direction: Left
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 429 Direction: Right
RightB(4, 11) = 16
Compute Free(4, 0)
If select 11(rightmost) in Tree B #Subproblem: 489 Direction: Left
FreeS(4, 0)
Keynode: 5 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 6)
If select 6 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 6)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 6] set to 10
Compute Free(3, 6)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(3, 7)
If select 7 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 7)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 7] set to 10
Compute Free(3, 7)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(3, 8)
If select 8 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 8)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 8] set to 10
Compute Free(3, 8)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(3, 9)
If select 9 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 9)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 9] set to 10
Compute Free(3, 9)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(3, 10)
If select 10 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 10)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 10] set to 10
Compute Free(3, 10)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(3, 5)
If select 4(leftmost) in Tree A #Subproblem: 120 Direction: Right
RightA[4, 5] set to 10
Compute Free(3, 5)
If select 4(rightmost) in Tree A #Subproblem: 120 Direction: Left
Compute Free(3, 5)
If select 6(leftmost) in Tree B #Subproblem: 120 Direction: Right
Compute Free(3, 5)
If select 7 in Tree B #Subproblem: 132 Direction: Right
Compute Free(3, 5)
If select 8 in Tree B #Subproblem: 138 Direction: Left
Compute Free(3, 5)
If select 9 in Tree B #Subproblem: 132 Direction: Left
RightB(3, 10) = 10
Compute Free(3, 5)
If select 10(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(3, 5)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 4)
If select 4(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[4, 4] set to 10
Compute Free(3, 4)
If select 4(rightmost) in Tree A #Subproblem: 132 Direction: Left
Compute Free(3, 4)
If select 5(leftmost) in Tree B #Subproblem: 132 Direction: Right
RightB(3, 5) = 10
Compute Free(3, 4)
If select 5(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(3, 4)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 3)
If select 4(leftmost) in Tree A #Subproblem: 144 Direction: Right
RightA[4, 3] set to 10
Compute Free(3, 3)
If select 4(rightmost) in Tree A #Subproblem: 144 Direction: Left
Compute Free(3, 3)
If select 4(leftmost) in Tree B #Subproblem: 144 Direction: Right
RightB(3, 4) = 10
Compute Free(3, 3)
If select 4(rightmost) in Tree B #Subproblem: 144 Direction: Left
FreeS(3, 3)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 2)
If select 4(leftmost) in Tree A #Subproblem: 156 Direction: Right
RightA[4, 2] set to 10
Compute Free(3, 2)
If select 4(rightmost) in Tree A #Subproblem: 156 Direction: Left
Compute Free(3, 2)
If select 3(leftmost) in Tree B #Subproblem: 156 Direction: Right
RightB(3, 3) = 10
Compute Free(3, 2)
If select 3(rightmost) in Tree B #Subproblem: 156 Direction: Left
FreeS(3, 2)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 1)
If select 4(leftmost) in Tree A #Subproblem: 168 Direction: Right
RightA[4, 1] set to 10
Compute Free(3, 1)
If select 4(rightmost) in Tree A #Subproblem: 168 Direction: Left
Compute Free(3, 1)
If select 2(leftmost) in Tree B #Subproblem: 168 Direction: Right
RightB(3, 2) = 10
Compute Free(3, 1)
If select 2(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(3, 1)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 16)
If select 16 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 16)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 16] set to 10
Compute Free(3, 16)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(3, 17)
If select 17 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 17)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 17] set to 10
Compute Free(3, 17)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(3, 18)
If select 18 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 18)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 18] set to 10
Compute Free(3, 18)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(3, 19)
If select 19 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 19)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 19] set to 10
Compute Free(3, 19)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(3, 15)
If select 4(leftmost) in Tree A #Subproblem: 96 Direction: Right
RightA[4, 15] set to 10
Compute Free(3, 15)
If select 4(rightmost) in Tree A #Subproblem: 96 Direction: Left
Compute Free(3, 15)
If select 16(leftmost) in Tree B #Subproblem: 96 Direction: Right
Compute Free(3, 15)
If select 17 in Tree B #Subproblem: 108 Direction: Right
Compute Free(3, 15)
If select 18 in Tree B #Subproblem: 108 Direction: Left
RightB(3, 19) = 19
Compute Free(3, 15)
If select 19(rightmost) in Tree B #Subproblem: 96 Direction: Left
FreeS(3, 15)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 14)
If select 4(leftmost) in Tree A #Subproblem: 108 Direction: Right
RightA[4, 14] set to 10
Compute Free(3, 14)
If select 4(rightmost) in Tree A #Subproblem: 108 Direction: Left
Compute Free(3, 14)
If select 15(leftmost) in Tree B #Subproblem: 108 Direction: Right
RightB(3, 15) = 19
Compute Free(3, 14)
If select 15(rightmost) in Tree B #Subproblem: 108 Direction: Left
FreeS(3, 14)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 13)
If select 4(leftmost) in Tree A #Subproblem: 120 Direction: Right
RightA[4, 13] set to 10
Compute Free(3, 13)
If select 4(rightmost) in Tree A #Subproblem: 120 Direction: Left
Compute Free(3, 13)
If select 14(leftmost) in Tree B #Subproblem: 120 Direction: Right
RightB(3, 14) = 19
Compute Free(3, 13)
If select 14(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(3, 13)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 12)
If select 4(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[4, 12] set to 10
Compute Free(3, 12)
If select 4(rightmost) in Tree A #Subproblem: 132 Direction: Left
Compute Free(3, 12)
If select 13(leftmost) in Tree B #Subproblem: 132 Direction: Right
RightB(3, 13) = 19
Compute Free(3, 12)
If select 13(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(3, 12)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 20)
If select 20 in Tree B #Subproblem: 12 Direction: Left
Compute Free(3, 20)
If select 4(leftmost) in Tree A #Subproblem: 12 Direction: Right
RightA[4, 20] set to 10
Compute Free(3, 20)
If select 4(rightmost) in Tree A #Subproblem: 12 Direction: Left
FreeS(3, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(3, 11)
If select 4(leftmost) in Tree A #Subproblem: 168 Direction: Right
RightA[4, 11] set to 10
Compute Free(3, 11)
If select 4(rightmost) in Tree A #Subproblem: 182 Direction: Left
Compute Free(3, 11)
If select 12(leftmost) in Tree B #Subproblem: 168 Direction: Right
RightB(3, 20) = 20
Compute Free(3, 11)
If select 20(rightmost) in Tree B #Subproblem: 252 Direction: Left
FreeS(3, 11)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 0)
If select 4(leftmost) in Tree A #Subproblem: 468 Direction: Right
RightA[4, 0] set to 10
Compute Free(3, 0)
If select 4(rightmost) in Tree A #Subproblem: 482 Direction: Left
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 468 Direction: Right
RightB(3, 11) = 16
Compute Free(3, 0)
If select 11(rightmost) in Tree B #Subproblem: 528 Direction: Left
FreeS(3, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 6)
If select 6 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 6)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 6] set to 10
Compute Free(2, 6)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(2, 7)
If select 7 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 7)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 7] set to 10
Compute Free(2, 7)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(2, 8)
If select 8 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 8)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 8] set to 10
Compute Free(2, 8)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(2, 9)
If select 9 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 9)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 9] set to 10
Compute Free(2, 9)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(2, 10)
If select 10 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 10)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 10] set to 10
Compute Free(2, 10)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(2, 5)
If select 3(leftmost) in Tree A #Subproblem: 130 Direction: Right
RightA[3, 5] set to 10
Compute Free(2, 5)
If select 3(rightmost) in Tree A #Subproblem: 130 Direction: Left
Compute Free(2, 5)
If select 6(leftmost) in Tree B #Subproblem: 130 Direction: Right
Compute Free(2, 5)
If select 7 in Tree B #Subproblem: 142 Direction: Right
Compute Free(2, 5)
If select 8 in Tree B #Subproblem: 148 Direction: Left
Compute Free(2, 5)
If select 9 in Tree B #Subproblem: 142 Direction: Left
RightB(2, 10) = 10
Compute Free(2, 5)
If select 10(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(2, 5)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 4)
If select 3(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[3, 4] set to 10
Compute Free(2, 4)
If select 3(rightmost) in Tree A #Subproblem: 143 Direction: Left
Compute Free(2, 4)
If select 5(leftmost) in Tree B #Subproblem: 143 Direction: Right
RightB(2, 5) = 10
Compute Free(2, 4)
If select 5(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(2, 4)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 3)
If select 3(leftmost) in Tree A #Subproblem: 156 Direction: Right
RightA[3, 3] set to 10
Compute Free(2, 3)
If select 3(rightmost) in Tree A #Subproblem: 156 Direction: Left
Compute Free(2, 3)
If select 4(leftmost) in Tree B #Subproblem: 156 Direction: Right
RightB(2, 4) = 10
Compute Free(2, 3)
If select 4(rightmost) in Tree B #Subproblem: 156 Direction: Left
FreeS(2, 3)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 2)
If select 3(leftmost) in Tree A #Subproblem: 169 Direction: Right
RightA[3, 2] set to 10
Compute Free(2, 2)
If select 3(rightmost) in Tree A #Subproblem: 169 Direction: Left
Compute Free(2, 2)
If select 3(leftmost) in Tree B #Subproblem: 169 Direction: Right
RightB(2, 3) = 10
Compute Free(2, 2)
If select 3(rightmost) in Tree B #Subproblem: 169 Direction: Left
FreeS(2, 2)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 1)
If select 3(leftmost) in Tree A #Subproblem: 182 Direction: Right
RightA[3, 1] set to 10
Compute Free(2, 1)
If select 3(rightmost) in Tree A #Subproblem: 182 Direction: Left
Compute Free(2, 1)
If select 2(leftmost) in Tree B #Subproblem: 182 Direction: Right
RightB(2, 2) = 10
Compute Free(2, 1)
If select 2(rightmost) in Tree B #Subproblem: 182 Direction: Left
FreeS(2, 1)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 16)
If select 16 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 16)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 16] set to 10
Compute Free(2, 16)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(2, 17)
If select 17 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 17)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 17] set to 10
Compute Free(2, 17)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(2, 18)
If select 18 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 18)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 18] set to 10
Compute Free(2, 18)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(2, 19)
If select 19 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 19)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 19] set to 10
Compute Free(2, 19)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(2, 15)
If select 3(leftmost) in Tree A #Subproblem: 104 Direction: Right
RightA[3, 15] set to 10
Compute Free(2, 15)
If select 3(rightmost) in Tree A #Subproblem: 104 Direction: Left
Compute Free(2, 15)
If select 16(leftmost) in Tree B #Subproblem: 104 Direction: Right
Compute Free(2, 15)
If select 17 in Tree B #Subproblem: 116 Direction: Right
Compute Free(2, 15)
If select 18 in Tree B #Subproblem: 116 Direction: Left
RightB(2, 19) = 19
Compute Free(2, 15)
If select 19(rightmost) in Tree B #Subproblem: 104 Direction: Left
FreeS(2, 15)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 14)
If select 3(leftmost) in Tree A #Subproblem: 117 Direction: Right
RightA[3, 14] set to 10
Compute Free(2, 14)
If select 3(rightmost) in Tree A #Subproblem: 117 Direction: Left
Compute Free(2, 14)
If select 15(leftmost) in Tree B #Subproblem: 117 Direction: Right
RightB(2, 15) = 19
Compute Free(2, 14)
If select 15(rightmost) in Tree B #Subproblem: 117 Direction: Left
FreeS(2, 14)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 13)
If select 3(leftmost) in Tree A #Subproblem: 130 Direction: Right
RightA[3, 13] set to 10
Compute Free(2, 13)
If select 3(rightmost) in Tree A #Subproblem: 130 Direction: Left
Compute Free(2, 13)
If select 14(leftmost) in Tree B #Subproblem: 130 Direction: Right
RightB(2, 14) = 19
Compute Free(2, 13)
If select 14(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(2, 13)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 12)
If select 3(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[3, 12] set to 10
Compute Free(2, 12)
If select 3(rightmost) in Tree A #Subproblem: 143 Direction: Left
Compute Free(2, 12)
If select 13(leftmost) in Tree B #Subproblem: 143 Direction: Right
RightB(2, 13) = 19
Compute Free(2, 12)
If select 13(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(2, 12)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 20)
If select 20 in Tree B #Subproblem: 13 Direction: Left
Compute Free(2, 20)
If select 3(leftmost) in Tree A #Subproblem: 13 Direction: Right
RightA[3, 20] set to 10
Compute Free(2, 20)
If select 3(rightmost) in Tree A #Subproblem: 13 Direction: Left
FreeS(2, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(2, 11)
If select 3(leftmost) in Tree A #Subproblem: 182 Direction: Right
RightA[3, 11] set to 10
Compute Free(2, 11)
If select 3(rightmost) in Tree A #Subproblem: 196 Direction: Left
Compute Free(2, 11)
If select 12(leftmost) in Tree B #Subproblem: 182 Direction: Right
RightB(2, 20) = 20
Compute Free(2, 11)
If select 20(rightmost) in Tree B #Subproblem: 273 Direction: Left
FreeS(2, 11)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(2, 0)
If select 3(leftmost) in Tree A #Subproblem: 507 Direction: Right
RightA[3, 0] set to 10
Compute Free(2, 0)
If select 3(rightmost) in Tree A #Subproblem: 521 Direction: Left
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 507 Direction: Right
RightB(2, 11) = 16
Compute Free(2, 0)
If select 11(rightmost) in Tree B #Subproblem: 567 Direction: Left
FreeS(2, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(11, 0)
If select 11 in Tree A #Subproblem: 39 Direction: Right
Compute Free(11, 1)
If select 11 in Tree A #Subproblem: 14 Direction: Left
Compute Free(11, 2)
If select 11 in Tree A #Subproblem: 13 Direction: Left
Compute Free(11, 3)
If select 11 in Tree A #Subproblem: 12 Direction: Left
Compute Free(11, 4)
If select 11 in Tree A #Subproblem: 11 Direction: Left
Compute Free(11, 5)
If select 11 in Tree A #Subproblem: 10 Direction: Left
Compute Free(11, 6)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 6)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 7)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 7)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 8)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 8)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 9)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 9)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 10)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 10)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(11, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(11, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(11, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(11, 10) = 10
Compute Free(11, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(11, 5)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(11, 5) = 10
Compute Free(11, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(11, 4)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(11, 4) = 10
Compute Free(11, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(11, 3)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(11, 3) = 10
Compute Free(11, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(11, 2)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(11, 2) = 10
Compute Free(11, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(11, 1)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 11)
If select 11 in Tree A #Subproblem: 14 Direction: Right
Compute Free(11, 12)
If select 11 in Tree A #Subproblem: 11 Direction: Left
Compute Free(11, 13)
If select 11 in Tree A #Subproblem: 10 Direction: Left
Compute Free(11, 14)
If select 11 in Tree A #Subproblem: 9 Direction: Left
Compute Free(11, 15)
If select 11 in Tree A #Subproblem: 8 Direction: Left
Compute Free(11, 16)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 16)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 17)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 17)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 18)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 18)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 19)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 19)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(11, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(11, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(11, 19) = 19
Compute Free(11, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(11, 15)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(11, 15) = 19
Compute Free(11, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(11, 14)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(11, 14) = 19
Compute Free(11, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(11, 13)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(11, 13) = 19
Compute Free(11, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(11, 12)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 20)
If select 11 in Tree A #Subproblem: 1 Direction: Left
Compute Free(11, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(11, 20)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(11, 20) = 20
Compute Free(11, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(11, 11)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(11, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(11, 11) = 16
Compute Free(11, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(11, 0)
Keynode: 11 in Tree A
Direction: rightLeaf: 11
Compute Free(17, 0)
If select 17 in Tree A #Subproblem: 39 Direction: Right
Compute Free(17, 1)
If select 17 in Tree A #Subproblem: 14 Direction: Left
Compute Free(17, 2)
If select 17 in Tree A #Subproblem: 13 Direction: Left
Compute Free(17, 3)
If select 17 in Tree A #Subproblem: 12 Direction: Left
Compute Free(17, 4)
If select 17 in Tree A #Subproblem: 11 Direction: Left
Compute Free(17, 5)
If select 17 in Tree A #Subproblem: 10 Direction: Left
Compute Free(17, 6)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 6)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 7)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 7)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 8)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 8)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 9)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 9)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 10)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 10)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(17, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(17, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(17, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(17, 10) = 10
Compute Free(17, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(17, 5)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(17, 5) = 10
Compute Free(17, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(17, 4)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(17, 4) = 10
Compute Free(17, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(17, 3)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(17, 3) = 10
Compute Free(17, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(17, 2)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(17, 2) = 10
Compute Free(17, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(17, 1)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 11)
If select 17 in Tree A #Subproblem: 14 Direction: Right
Compute Free(17, 12)
If select 17 in Tree A #Subproblem: 11 Direction: Left
Compute Free(17, 13)
If select 17 in Tree A #Subproblem: 10 Direction: Left
Compute Free(17, 14)
If select 17 in Tree A #Subproblem: 9 Direction: Left
Compute Free(17, 15)
If select 17 in Tree A #Subproblem: 8 Direction: Left
Compute Free(17, 16)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 16)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 17)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 17)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 18)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 18)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 19)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 19)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(17, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(17, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(17, 19) = 19
Compute Free(17, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(17, 15)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(17, 15) = 19
Compute Free(17, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(17, 14)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(17, 14) = 19
Compute Free(17, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(17, 13)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(17, 13) = 19
Compute Free(17, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(17, 12)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 20)
If select 17 in Tree A #Subproblem: 1 Direction: Left
Compute Free(17, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(17, 20)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(17, 20) = 20
Compute Free(17, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(17, 11)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(17, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(17, 11) = 16
Compute Free(17, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(17, 0)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(18, 0)
If select 18 in Tree A #Subproblem: 39 Direction: Right
Compute Free(18, 1)
If select 18 in Tree A #Subproblem: 14 Direction: Left
Compute Free(18, 2)
If select 18 in Tree A #Subproblem: 13 Direction: Left
Compute Free(18, 3)
If select 18 in Tree A #Subproblem: 12 Direction: Left
Compute Free(18, 4)
If select 18 in Tree A #Subproblem: 11 Direction: Left
Compute Free(18, 5)
If select 18 in Tree A #Subproblem: 10 Direction: Left
Compute Free(18, 6)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 6)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 7)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 7)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 8)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 8)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 9)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 9)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 10)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 10)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(18, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(18, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(18, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(18, 10) = 10
Compute Free(18, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(18, 5)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(18, 5) = 10
Compute Free(18, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(18, 4)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(18, 4) = 10
Compute Free(18, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(18, 3)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(18, 3) = 10
Compute Free(18, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(18, 2)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(18, 2) = 10
Compute Free(18, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(18, 1)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 11)
If select 18 in Tree A #Subproblem: 14 Direction: Right
Compute Free(18, 12)
If select 18 in Tree A #Subproblem: 11 Direction: Left
Compute Free(18, 13)
If select 18 in Tree A #Subproblem: 10 Direction: Left
Compute Free(18, 14)
If select 18 in Tree A #Subproblem: 9 Direction: Left
Compute Free(18, 15)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(18, 16)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 16)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 17)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 17)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 18)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 18)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 19)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 19)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(18, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(18, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(18, 19) = 19
Compute Free(18, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(18, 15)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(18, 15) = 19
Compute Free(18, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(18, 14)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(18, 14) = 19
Compute Free(18, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(18, 13)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(18, 13) = 19
Compute Free(18, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(18, 12)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 20)
If select 18 in Tree A #Subproblem: 1 Direction: Left
Compute Free(18, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(18, 20)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(18, 20) = 20
Compute Free(18, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(18, 11)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(18, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(18, 11) = 16
Compute Free(18, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(18, 0)
Keynode: 18 in Tree A
Direction: rightLeaf: 18
Compute Free(19, 0)
If select 19 in Tree A #Subproblem: 39 Direction: Right
Compute Free(19, 1)
If select 19 in Tree A #Subproblem: 14 Direction: Left
Compute Free(19, 2)
If select 19 in Tree A #Subproblem: 13 Direction: Left
Compute Free(19, 3)
If select 19 in Tree A #Subproblem: 12 Direction: Left
Compute Free(19, 4)
If select 19 in Tree A #Subproblem: 11 Direction: Left
Compute Free(19, 5)
If select 19 in Tree A #Subproblem: 10 Direction: Left
Compute Free(19, 6)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 6)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 7)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 7)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 8)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 8)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 9)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 9)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 10)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 10)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(19, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(19, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(19, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(19, 10) = 10
Compute Free(19, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(19, 5)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(19, 5) = 10
Compute Free(19, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(19, 4)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(19, 4) = 10
Compute Free(19, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(19, 3)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(19, 3) = 10
Compute Free(19, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(19, 2)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(19, 2) = 10
Compute Free(19, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(19, 1)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 11)
If select 19 in Tree A #Subproblem: 14 Direction: Right
Compute Free(19, 12)
If select 19 in Tree A #Subproblem: 11 Direction: Left
Compute Free(19, 13)
If select 19 in Tree A #Subproblem: 10 Direction: Left
Compute Free(19, 14)
If select 19 in Tree A #Subproblem: 9 Direction: Left
Compute Free(19, 15)
If select 19 in Tree A #Subproblem: 8 Direction: Left
Compute Free(19, 16)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 16)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 17)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 17)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 18)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 18)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 19)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 19)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(19, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(19, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(19, 19) = 19
Compute Free(19, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(19, 15)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(19, 15) = 19
Compute Free(19, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(19, 14)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(19, 14) = 19
Compute Free(19, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(19, 13)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(19, 13) = 19
Compute Free(19, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(19, 12)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 20)
If select 19 in Tree A #Subproblem: 1 Direction: Left
Compute Free(19, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(19, 20)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(19, 20) = 20
Compute Free(19, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(19, 11)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(19, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(19, 11) = 16
Compute Free(19, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(19, 0)
Keynode: 19 in Tree A
Direction: rightLeaf: 19
Compute Free(20, 0)
If select 20 in Tree A #Subproblem: 39 Direction: Right
Compute Free(20, 1)
If select 20 in Tree A #Subproblem: 14 Direction: Left
Compute Free(20, 2)
If select 20 in Tree A #Subproblem: 13 Direction: Left
Compute Free(20, 3)
If select 20 in Tree A #Subproblem: 12 Direction: Left
Compute Free(20, 4)
If select 20 in Tree A #Subproblem: 11 Direction: Left
Compute Free(20, 5)
If select 20 in Tree A #Subproblem: 10 Direction: Left
Compute Free(20, 6)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 6)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 7)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 7)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 8)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 8)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 9)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 9)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 10)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 10)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(20, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(20, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(20, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(20, 10) = 10
Compute Free(20, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(20, 5)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(20, 5) = 10
Compute Free(20, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(20, 4)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(20, 4) = 10
Compute Free(20, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(20, 3)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(20, 3) = 10
Compute Free(20, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(20, 2)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(20, 2) = 10
Compute Free(20, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(20, 1)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 11)
If select 20 in Tree A #Subproblem: 14 Direction: Right
Compute Free(20, 12)
If select 20 in Tree A #Subproblem: 11 Direction: Left
Compute Free(20, 13)
If select 20 in Tree A #Subproblem: 10 Direction: Left
Compute Free(20, 14)
If select 20 in Tree A #Subproblem: 9 Direction: Left
Compute Free(20, 15)
If select 20 in Tree A #Subproblem: 8 Direction: Left
Compute Free(20, 16)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 16)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 17)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 17)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 18)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 18)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 19)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 19)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(20, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(20, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(20, 19) = 19
Compute Free(20, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(20, 15)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(20, 15) = 19
Compute Free(20, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(20, 14)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(20, 14) = 19
Compute Free(20, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(20, 13)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(20, 13) = 19
Compute Free(20, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(20, 12)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 20)
If select 20 in Tree A #Subproblem: 1 Direction: Left
Compute Free(20, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(20, 20)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(20, 20) = 20
Compute Free(20, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(20, 11)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(20, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(20, 11) = 16
Compute Free(20, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(20, 0)
Keynode: 20 in Tree A
Direction: rightLeaf: 20
Compute Free(16, 6)
If select 6 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 6)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 6)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 6)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 6] set to 20
Compute Free(16, 6)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(16, 7)
If select 7 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 7)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 7)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 7)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 7] set to 20
Compute Free(16, 7)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(16, 8)
If select 8 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 8)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 8)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 8)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 8] set to 20
Compute Free(16, 8)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(16, 9)
If select 9 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 9)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 9)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 9)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 9] set to 20
Compute Free(16, 9)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(16, 10)
If select 10 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 10)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 10)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 10)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 10] set to 20
Compute Free(16, 10)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(16, 5)
If select 17(leftmost) in Tree A #Subproblem: 80 Direction: Right
Compute Free(16, 5)
If select 18 in Tree A #Subproblem: 92 Direction: Right
Compute Free(16, 5)
If select 19 in Tree A #Subproblem: 92 Direction: Left
RightA[20, 5] set to 20
Compute Free(16, 5)
If select 20(rightmost) in Tree A #Subproblem: 80 Direction: Left
Compute Free(16, 5)
If select 6(leftmost) in Tree B #Subproblem: 80 Direction: Right
Compute Free(16, 5)
If select 7 in Tree B #Subproblem: 86 Direction: Right
Compute Free(16, 5)
If select 8 in Tree B #Subproblem: 89 Direction: Left
Compute Free(16, 5)
If select 9 in Tree B #Subproblem: 86 Direction: Left
RightB(16, 10) = 10
Compute Free(16, 5)
If select 10(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(16, 5)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 4)
If select 17(leftmost) in Tree A #Subproblem: 88 Direction: Right
Compute Free(16, 4)
If select 18 in Tree A #Subproblem: 100 Direction: Right
Compute Free(16, 4)
If select 19 in Tree A #Subproblem: 100 Direction: Left
RightA[20, 4] set to 20
Compute Free(16, 4)
If select 20(rightmost) in Tree A #Subproblem: 88 Direction: Left
Compute Free(16, 4)
If select 5(leftmost) in Tree B #Subproblem: 88 Direction: Right
RightB(16, 5) = 10
Compute Free(16, 4)
If select 5(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(16, 4)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 3)
If select 17(leftmost) in Tree A #Subproblem: 96 Direction: Right
Compute Free(16, 3)
If select 18 in Tree A #Subproblem: 108 Direction: Right
Compute Free(16, 3)
If select 19 in Tree A #Subproblem: 108 Direction: Left
RightA[20, 3] set to 20
Compute Free(16, 3)
If select 20(rightmost) in Tree A #Subproblem: 96 Direction: Left
Compute Free(16, 3)
If select 4(leftmost) in Tree B #Subproblem: 96 Direction: Right
RightB(16, 4) = 10
Compute Free(16, 3)
If select 4(rightmost) in Tree B #Subproblem: 96 Direction: Left
FreeS(16, 3)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 2)
If select 17(leftmost) in Tree A #Subproblem: 104 Direction: Right
Compute Free(16, 2)
If select 18 in Tree A #Subproblem: 116 Direction: Right
Compute Free(16, 2)
If select 19 in Tree A #Subproblem: 116 Direction: Left
RightA[20, 2] set to 20
Compute Free(16, 2)
If select 20(rightmost) in Tree A #Subproblem: 104 Direction: Left
Compute Free(16, 2)
If select 3(leftmost) in Tree B #Subproblem: 104 Direction: Right
RightB(16, 3) = 10
Compute Free(16, 2)
If select 3(rightmost) in Tree B #Subproblem: 104 Direction: Left
FreeS(16, 2)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 1)
If select 17(leftmost) in Tree A #Subproblem: 112 Direction: Right
Compute Free(16, 1)
If select 18 in Tree A #Subproblem: 124 Direction: Right
Compute Free(16, 1)
If select 19 in Tree A #Subproblem: 124 Direction: Left
RightA[20, 1] set to 20
Compute Free(16, 1)
If select 20(rightmost) in Tree A #Subproblem: 112 Direction: Left
Compute Free(16, 1)
If select 2(leftmost) in Tree B #Subproblem: 112 Direction: Right
RightB(16, 2) = 10
Compute Free(16, 1)
If select 2(rightmost) in Tree B #Subproblem: 112 Direction: Left
FreeS(16, 1)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 16)
If select 16 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 16)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 16)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 16)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 16] set to 20
Compute Free(16, 16)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(16, 17)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 17)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 17)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 17)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 17] set to 20
Compute Free(16, 17)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(16, 18)
If select 18 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 18)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 18)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 18)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 18] set to 20
Compute Free(16, 18)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(16, 19)
If select 19 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 19)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 19)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 19)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 19] set to 20
Compute Free(16, 19)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(16, 15)
If select 17(leftmost) in Tree A #Subproblem: 64 Direction: Right
Compute Free(16, 15)
If select 18 in Tree A #Subproblem: 70 Direction: Right
Compute Free(16, 15)
If select 19 in Tree A #Subproblem: 70 Direction: Left
RightA[20, 15] set to 20
Compute Free(16, 15)
If select 20(rightmost) in Tree A #Subproblem: 64 Direction: Left
Compute Free(16, 15)
If select 16(leftmost) in Tree B #Subproblem: 64 Direction: Right
Compute Free(16, 15)
If select 17 in Tree B #Subproblem: 70 Direction: Right
Compute Free(16, 15)
If select 18 in Tree B #Subproblem: 70 Direction: Left
RightB(16, 19) = 19
Compute Free(16, 15)
If select 19(rightmost) in Tree B #Subproblem: 64 Direction: Left
FreeS(16, 15)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 14)
If select 17(leftmost) in Tree A #Subproblem: 72 Direction: Right
Compute Free(16, 14)
If select 18 in Tree A #Subproblem: 78 Direction: Right
Compute Free(16, 14)
If select 19 in Tree A #Subproblem: 78 Direction: Left
RightA[20, 14] set to 20
Compute Free(16, 14)
If select 20(rightmost) in Tree A #Subproblem: 72 Direction: Left
Compute Free(16, 14)
If select 15(leftmost) in Tree B #Subproblem: 72 Direction: Right
RightB(16, 15) = 19
Compute Free(16, 14)
If select 15(rightmost) in Tree B #Subproblem: 72 Direction: Left
FreeS(16, 14)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 13)
If select 17(leftmost) in Tree A #Subproblem: 80 Direction: Right
Compute Free(16, 13)
If select 18 in Tree A #Subproblem: 86 Direction: Right
Compute Free(16, 13)
If select 19 in Tree A #Subproblem: 86 Direction: Left
RightA[20, 13] set to 20
Compute Free(16, 13)
If select 20(rightmost) in Tree A #Subproblem: 80 Direction: Left
Compute Free(16, 13)
If select 14(leftmost) in Tree B #Subproblem: 80 Direction: Right
RightB(16, 14) = 19
Compute Free(16, 13)
If select 14(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(16, 13)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 12)
If select 17(leftmost) in Tree A #Subproblem: 88 Direction: Right
Compute Free(16, 12)
If select 18 in Tree A #Subproblem: 94 Direction: Right
Compute Free(16, 12)
If select 19 in Tree A #Subproblem: 94 Direction: Left
RightA[20, 12] set to 20
Compute Free(16, 12)
If select 20(rightmost) in Tree A #Subproblem: 88 Direction: Left
Compute Free(16, 12)
If select 13(leftmost) in Tree B #Subproblem: 88 Direction: Right
RightB(16, 13) = 19
Compute Free(16, 12)
If select 13(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(16, 12)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 20)
If select 20 in Tree B #Subproblem: 8 Direction: Left
Compute Free(16, 20)
If select 17(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(16, 20)
If select 18 in Tree A #Subproblem: 8 Direction: Left
Compute Free(16, 20)
If select 19 in Tree A #Subproblem: 8 Direction: Left
RightA[20, 20] set to 20
Compute Free(16, 20)
If select 20(rightmost) in Tree A #Subproblem: 8 Direction: Left
FreeS(16, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(16, 11)
If select 17(leftmost) in Tree A #Subproblem: 112 Direction: Right
Compute Free(16, 11)
If select 18 in Tree A #Subproblem: 132 Direction: Right
Compute Free(16, 11)
If select 19 in Tree A #Subproblem: 142 Direction: Right
RightA[20, 11] set to 20
Compute Free(16, 11)
If select 20(rightmost) in Tree A #Subproblem: 147 Direction: Left
Compute Free(16, 11)
If select 12(leftmost) in Tree B #Subproblem: 112 Direction: Right
RightB(16, 20) = 20
Compute Free(16, 11)
If select 20(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(16, 11)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(16, 0)
If select 17(leftmost) in Tree A #Subproblem: 312 Direction: Right
Compute Free(16, 0)
If select 18 in Tree A #Subproblem: 524 Direction: Right
Compute Free(16, 0)
If select 19 in Tree A #Subproblem: 545 Direction: Left
RightA[20, 0] set to 20
Compute Free(16, 0)
If select 20(rightmost) in Tree A #Subproblem: 347 Direction: Left
Compute Free(16, 0)
If select 1(leftmost) in Tree B #Subproblem: 312 Direction: Right
RightB(16, 11) = 16
Compute Free(16, 0)
If select 11(rightmost) in Tree B #Subproblem: 342 Direction: Left
FreeS(16, 0)
Keynode: 17 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 6)
If select 6 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 6)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 6] set to 20
Compute Free(15, 6)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(15, 7)
If select 7 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 7)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 7] set to 20
Compute Free(15, 7)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(15, 8)
If select 8 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 8)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 8] set to 20
Compute Free(15, 8)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(15, 9)
If select 9 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 9)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 9] set to 20
Compute Free(15, 9)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(15, 10)
If select 10 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 10)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 10] set to 20
Compute Free(15, 10)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(15, 5)
If select 16(leftmost) in Tree A #Subproblem: 90 Direction: Right
RightA[16, 5] set to 20
Compute Free(15, 5)
If select 16(rightmost) in Tree A #Subproblem: 90 Direction: Left
Compute Free(15, 5)
If select 6(leftmost) in Tree B #Subproblem: 90 Direction: Right
Compute Free(15, 5)
If select 7 in Tree B #Subproblem: 96 Direction: Right
Compute Free(15, 5)
If select 8 in Tree B #Subproblem: 99 Direction: Left
Compute Free(15, 5)
If select 9 in Tree B #Subproblem: 96 Direction: Left
RightB(15, 10) = 10
Compute Free(15, 5)
If select 10(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(15, 5)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 4)
If select 16(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[16, 4] set to 20
Compute Free(15, 4)
If select 16(rightmost) in Tree A #Subproblem: 99 Direction: Left
Compute Free(15, 4)
If select 5(leftmost) in Tree B #Subproblem: 99 Direction: Right
RightB(15, 5) = 10
Compute Free(15, 4)
If select 5(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(15, 4)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 3)
If select 16(leftmost) in Tree A #Subproblem: 108 Direction: Right
RightA[16, 3] set to 20
Compute Free(15, 3)
If select 16(rightmost) in Tree A #Subproblem: 108 Direction: Left
Compute Free(15, 3)
If select 4(leftmost) in Tree B #Subproblem: 108 Direction: Right
RightB(15, 4) = 10
Compute Free(15, 3)
If select 4(rightmost) in Tree B #Subproblem: 108 Direction: Left
FreeS(15, 3)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 2)
If select 16(leftmost) in Tree A #Subproblem: 117 Direction: Right
RightA[16, 2] set to 20
Compute Free(15, 2)
If select 16(rightmost) in Tree A #Subproblem: 117 Direction: Left
Compute Free(15, 2)
If select 3(leftmost) in Tree B #Subproblem: 117 Direction: Right
RightB(15, 3) = 10
Compute Free(15, 2)
If select 3(rightmost) in Tree B #Subproblem: 117 Direction: Left
FreeS(15, 2)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 1)
If select 16(leftmost) in Tree A #Subproblem: 126 Direction: Right
RightA[16, 1] set to 20
Compute Free(15, 1)
If select 16(rightmost) in Tree A #Subproblem: 126 Direction: Left
Compute Free(15, 1)
If select 2(leftmost) in Tree B #Subproblem: 126 Direction: Right
RightB(15, 2) = 10
Compute Free(15, 1)
If select 2(rightmost) in Tree B #Subproblem: 126 Direction: Left
FreeS(15, 1)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 16)
If select 16 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 16)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 16] set to 20
Compute Free(15, 16)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(15, 17)
If select 17 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 17)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 17] set to 20
Compute Free(15, 17)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(15, 18)
If select 18 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 18)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 18] set to 20
Compute Free(15, 18)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(15, 19)
If select 19 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 19)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 19] set to 20
Compute Free(15, 19)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(15, 15)
If select 16(leftmost) in Tree A #Subproblem: 72 Direction: Right
RightA[16, 15] set to 20
Compute Free(15, 15)
If select 16(rightmost) in Tree A #Subproblem: 72 Direction: Left
Compute Free(15, 15)
If select 16(leftmost) in Tree B #Subproblem: 72 Direction: Right
Compute Free(15, 15)
If select 17 in Tree B #Subproblem: 78 Direction: Right
Compute Free(15, 15)
If select 18 in Tree B #Subproblem: 78 Direction: Left
RightB(15, 19) = 19
Compute Free(15, 15)
If select 19(rightmost) in Tree B #Subproblem: 72 Direction: Left
FreeS(15, 15)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 14)
If select 16(leftmost) in Tree A #Subproblem: 81 Direction: Right
RightA[16, 14] set to 20
Compute Free(15, 14)
If select 16(rightmost) in Tree A #Subproblem: 81 Direction: Left
Compute Free(15, 14)
If select 15(leftmost) in Tree B #Subproblem: 81 Direction: Right
RightB(15, 15) = 19
Compute Free(15, 14)
If select 15(rightmost) in Tree B #Subproblem: 81 Direction: Left
FreeS(15, 14)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 13)
If select 16(leftmost) in Tree A #Subproblem: 90 Direction: Right
RightA[16, 13] set to 20
Compute Free(15, 13)
If select 16(rightmost) in Tree A #Subproblem: 90 Direction: Left
Compute Free(15, 13)
If select 14(leftmost) in Tree B #Subproblem: 90 Direction: Right
RightB(15, 14) = 19
Compute Free(15, 13)
If select 14(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(15, 13)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 12)
If select 16(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[16, 12] set to 20
Compute Free(15, 12)
If select 16(rightmost) in Tree A #Subproblem: 99 Direction: Left
Compute Free(15, 12)
If select 13(leftmost) in Tree B #Subproblem: 99 Direction: Right
RightB(15, 13) = 19
Compute Free(15, 12)
If select 13(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(15, 12)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 20)
If select 20 in Tree B #Subproblem: 9 Direction: Left
Compute Free(15, 20)
If select 16(leftmost) in Tree A #Subproblem: 9 Direction: Right
RightA[16, 20] set to 20
Compute Free(15, 20)
If select 16(rightmost) in Tree A #Subproblem: 9 Direction: Left
FreeS(15, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(15, 11)
If select 16(leftmost) in Tree A #Subproblem: 126 Direction: Right
RightA[16, 11] set to 20
Compute Free(15, 11)
If select 16(rightmost) in Tree A #Subproblem: 140 Direction: Left
Compute Free(15, 11)
If select 12(leftmost) in Tree B #Subproblem: 126 Direction: Right
RightB(15, 20) = 20
Compute Free(15, 11)
If select 20(rightmost) in Tree B #Subproblem: 189 Direction: Left
FreeS(15, 11)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(15, 0)
If select 16(leftmost) in Tree A #Subproblem: 351 Direction: Right
RightA[16, 0] set to 20
Compute Free(15, 0)
If select 16(rightmost) in Tree A #Subproblem: 365 Direction: Left
Compute Free(15, 0)
If select 1(leftmost) in Tree B #Subproblem: 351 Direction: Right
RightB(15, 11) = 16
Compute Free(15, 0)
If select 11(rightmost) in Tree B #Subproblem: 381 Direction: Left
FreeS(15, 0)
Keynode: 16 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 6)
If select 6 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 6)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 6] set to 20
Compute Free(14, 6)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(14, 7)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 7)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 7] set to 20
Compute Free(14, 7)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(14, 8)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 8)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 8] set to 20
Compute Free(14, 8)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(14, 9)
If select 9 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 9)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 9] set to 20
Compute Free(14, 9)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(14, 10)
If select 10 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 10)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 10] set to 20
Compute Free(14, 10)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(14, 5)
If select 15(leftmost) in Tree A #Subproblem: 100 Direction: Right
RightA[15, 5] set to 20
Compute Free(14, 5)
If select 15(rightmost) in Tree A #Subproblem: 100 Direction: Left
Compute Free(14, 5)
If select 6(leftmost) in Tree B #Subproblem: 100 Direction: Right
Compute Free(14, 5)
If select 7 in Tree B #Subproblem: 106 Direction: Right
Compute Free(14, 5)
If select 8 in Tree B #Subproblem: 109 Direction: Left
Compute Free(14, 5)
If select 9 in Tree B #Subproblem: 106 Direction: Left
RightB(14, 10) = 10
Compute Free(14, 5)
If select 10(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(14, 5)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 4)
If select 15(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[15, 4] set to 20
Compute Free(14, 4)
If select 15(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(14, 4)
If select 5(leftmost) in Tree B #Subproblem: 110 Direction: Right
RightB(14, 5) = 10
Compute Free(14, 4)
If select 5(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(14, 4)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 3)
If select 15(leftmost) in Tree A #Subproblem: 120 Direction: Right
RightA[15, 3] set to 20
Compute Free(14, 3)
If select 15(rightmost) in Tree A #Subproblem: 120 Direction: Left
Compute Free(14, 3)
If select 4(leftmost) in Tree B #Subproblem: 120 Direction: Right
RightB(14, 4) = 10
Compute Free(14, 3)
If select 4(rightmost) in Tree B #Subproblem: 120 Direction: Left
FreeS(14, 3)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 2)
If select 15(leftmost) in Tree A #Subproblem: 130 Direction: Right
RightA[15, 2] set to 20
Compute Free(14, 2)
If select 15(rightmost) in Tree A #Subproblem: 130 Direction: Left
Compute Free(14, 2)
If select 3(leftmost) in Tree B #Subproblem: 130 Direction: Right
RightB(14, 3) = 10
Compute Free(14, 2)
If select 3(rightmost) in Tree B #Subproblem: 130 Direction: Left
FreeS(14, 2)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 1)
If select 15(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[15, 1] set to 20
Compute Free(14, 1)
If select 15(rightmost) in Tree A #Subproblem: 140 Direction: Left
Compute Free(14, 1)
If select 2(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(14, 2) = 10
Compute Free(14, 1)
If select 2(rightmost) in Tree B #Subproblem: 140 Direction: Left
FreeS(14, 1)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 16)
If select 16 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 16)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 16] set to 20
Compute Free(14, 16)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(14, 17)
If select 17 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 17)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 17] set to 20
Compute Free(14, 17)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(14, 18)
If select 18 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 18)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 18] set to 20
Compute Free(14, 18)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(14, 19)
If select 19 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 19)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 19] set to 20
Compute Free(14, 19)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(14, 15)
If select 15(leftmost) in Tree A #Subproblem: 80 Direction: Right
RightA[15, 15] set to 20
Compute Free(14, 15)
If select 15(rightmost) in Tree A #Subproblem: 80 Direction: Left
Compute Free(14, 15)
If select 16(leftmost) in Tree B #Subproblem: 80 Direction: Right
Compute Free(14, 15)
If select 17 in Tree B #Subproblem: 86 Direction: Right
Compute Free(14, 15)
If select 18 in Tree B #Subproblem: 86 Direction: Left
RightB(14, 19) = 19
Compute Free(14, 15)
If select 19(rightmost) in Tree B #Subproblem: 80 Direction: Left
FreeS(14, 15)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 14)
If select 15(leftmost) in Tree A #Subproblem: 90 Direction: Right
RightA[15, 14] set to 20
Compute Free(14, 14)
If select 15(rightmost) in Tree A #Subproblem: 90 Direction: Left
Compute Free(14, 14)
If select 15(leftmost) in Tree B #Subproblem: 90 Direction: Right
RightB(14, 15) = 19
Compute Free(14, 14)
If select 15(rightmost) in Tree B #Subproblem: 90 Direction: Left
FreeS(14, 14)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 13)
If select 15(leftmost) in Tree A #Subproblem: 100 Direction: Right
RightA[15, 13] set to 20
Compute Free(14, 13)
If select 15(rightmost) in Tree A #Subproblem: 100 Direction: Left
Compute Free(14, 13)
If select 14(leftmost) in Tree B #Subproblem: 100 Direction: Right
RightB(14, 14) = 19
Compute Free(14, 13)
If select 14(rightmost) in Tree B #Subproblem: 100 Direction: Left
FreeS(14, 13)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 12)
If select 15(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[15, 12] set to 20
Compute Free(14, 12)
If select 15(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(14, 12)
If select 13(leftmost) in Tree B #Subproblem: 110 Direction: Right
RightB(14, 13) = 19
Compute Free(14, 12)
If select 13(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(14, 12)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 20)
If select 20 in Tree B #Subproblem: 10 Direction: Left
Compute Free(14, 20)
If select 15(leftmost) in Tree A #Subproblem: 10 Direction: Right
RightA[15, 20] set to 20
Compute Free(14, 20)
If select 15(rightmost) in Tree A #Subproblem: 10 Direction: Left
FreeS(14, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(14, 11)
If select 15(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[15, 11] set to 20
Compute Free(14, 11)
If select 15(rightmost) in Tree A #Subproblem: 154 Direction: Left
Compute Free(14, 11)
If select 12(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(14, 20) = 20
Compute Free(14, 11)
If select 20(rightmost) in Tree B #Subproblem: 210 Direction: Left
FreeS(14, 11)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(14, 0)
If select 15(leftmost) in Tree A #Subproblem: 390 Direction: Right
RightA[15, 0] set to 20
Compute Free(14, 0)
If select 15(rightmost) in Tree A #Subproblem: 404 Direction: Left
Compute Free(14, 0)
If select 1(leftmost) in Tree B #Subproblem: 390 Direction: Right
RightB(14, 11) = 16
Compute Free(14, 0)
If select 11(rightmost) in Tree B #Subproblem: 420 Direction: Left
FreeS(14, 0)
Keynode: 15 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 6)
If select 6 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 6)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 6] set to 20
Compute Free(13, 6)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(13, 7)
If select 7 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 7)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 7] set to 20
Compute Free(13, 7)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(13, 8)
If select 8 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 8)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 8] set to 20
Compute Free(13, 8)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(13, 9)
If select 9 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 9)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 9] set to 20
Compute Free(13, 9)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(13, 10)
If select 10 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 10)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 10] set to 20
Compute Free(13, 10)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(13, 5)
If select 14(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[14, 5] set to 20
Compute Free(13, 5)
If select 14(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(13, 5)
If select 6(leftmost) in Tree B #Subproblem: 110 Direction: Right
Compute Free(13, 5)
If select 7 in Tree B #Subproblem: 116 Direction: Right
Compute Free(13, 5)
If select 8 in Tree B #Subproblem: 119 Direction: Left
Compute Free(13, 5)
If select 9 in Tree B #Subproblem: 116 Direction: Left
RightB(13, 10) = 10
Compute Free(13, 5)
If select 10(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(13, 5)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 4)
If select 14(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[14, 4] set to 20
Compute Free(13, 4)
If select 14(rightmost) in Tree A #Subproblem: 121 Direction: Left
Compute Free(13, 4)
If select 5(leftmost) in Tree B #Subproblem: 121 Direction: Right
RightB(13, 5) = 10
Compute Free(13, 4)
If select 5(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(13, 4)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 3)
If select 14(leftmost) in Tree A #Subproblem: 132 Direction: Right
RightA[14, 3] set to 20
Compute Free(13, 3)
If select 14(rightmost) in Tree A #Subproblem: 132 Direction: Left
Compute Free(13, 3)
If select 4(leftmost) in Tree B #Subproblem: 132 Direction: Right
RightB(13, 4) = 10
Compute Free(13, 3)
If select 4(rightmost) in Tree B #Subproblem: 132 Direction: Left
FreeS(13, 3)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 2)
If select 14(leftmost) in Tree A #Subproblem: 143 Direction: Right
RightA[14, 2] set to 20
Compute Free(13, 2)
If select 14(rightmost) in Tree A #Subproblem: 143 Direction: Left
Compute Free(13, 2)
If select 3(leftmost) in Tree B #Subproblem: 143 Direction: Right
RightB(13, 3) = 10
Compute Free(13, 2)
If select 3(rightmost) in Tree B #Subproblem: 143 Direction: Left
FreeS(13, 2)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 1)
If select 14(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[14, 1] set to 20
Compute Free(13, 1)
If select 14(rightmost) in Tree A #Subproblem: 154 Direction: Left
Compute Free(13, 1)
If select 2(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(13, 2) = 10
Compute Free(13, 1)
If select 2(rightmost) in Tree B #Subproblem: 154 Direction: Left
FreeS(13, 1)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 16)
If select 16 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 16)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 16] set to 20
Compute Free(13, 16)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(13, 17)
If select 17 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 17)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 17] set to 20
Compute Free(13, 17)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(13, 18)
If select 18 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 18)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 18] set to 20
Compute Free(13, 18)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(13, 19)
If select 19 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 19)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 19] set to 20
Compute Free(13, 19)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(13, 15)
If select 14(leftmost) in Tree A #Subproblem: 88 Direction: Right
RightA[14, 15] set to 20
Compute Free(13, 15)
If select 14(rightmost) in Tree A #Subproblem: 88 Direction: Left
Compute Free(13, 15)
If select 16(leftmost) in Tree B #Subproblem: 88 Direction: Right
Compute Free(13, 15)
If select 17 in Tree B #Subproblem: 94 Direction: Right
Compute Free(13, 15)
If select 18 in Tree B #Subproblem: 94 Direction: Left
RightB(13, 19) = 19
Compute Free(13, 15)
If select 19(rightmost) in Tree B #Subproblem: 88 Direction: Left
FreeS(13, 15)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 14)
If select 14(leftmost) in Tree A #Subproblem: 99 Direction: Right
RightA[14, 14] set to 20
Compute Free(13, 14)
If select 14(rightmost) in Tree A #Subproblem: 99 Direction: Left
Compute Free(13, 14)
If select 15(leftmost) in Tree B #Subproblem: 99 Direction: Right
RightB(13, 15) = 19
Compute Free(13, 14)
If select 15(rightmost) in Tree B #Subproblem: 99 Direction: Left
FreeS(13, 14)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 13)
If select 14(leftmost) in Tree A #Subproblem: 110 Direction: Right
RightA[14, 13] set to 20
Compute Free(13, 13)
If select 14(rightmost) in Tree A #Subproblem: 110 Direction: Left
Compute Free(13, 13)
If select 14(leftmost) in Tree B #Subproblem: 110 Direction: Right
RightB(13, 14) = 19
Compute Free(13, 13)
If select 14(rightmost) in Tree B #Subproblem: 110 Direction: Left
FreeS(13, 13)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 12)
If select 14(leftmost) in Tree A #Subproblem: 121 Direction: Right
RightA[14, 12] set to 20
Compute Free(13, 12)
If select 14(rightmost) in Tree A #Subproblem: 121 Direction: Left
Compute Free(13, 12)
If select 13(leftmost) in Tree B #Subproblem: 121 Direction: Right
RightB(13, 13) = 19
Compute Free(13, 12)
If select 13(rightmost) in Tree B #Subproblem: 121 Direction: Left
FreeS(13, 12)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 20)
If select 20 in Tree B #Subproblem: 11 Direction: Left
Compute Free(13, 20)
If select 14(leftmost) in Tree A #Subproblem: 11 Direction: Right
RightA[14, 20] set to 20
Compute Free(13, 20)
If select 14(rightmost) in Tree A #Subproblem: 11 Direction: Left
FreeS(13, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(13, 11)
If select 14(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[14, 11] set to 20
Compute Free(13, 11)
If select 14(rightmost) in Tree A #Subproblem: 168 Direction: Left
Compute Free(13, 11)
If select 12(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(13, 20) = 20
Compute Free(13, 11)
If select 20(rightmost) in Tree B #Subproblem: 231 Direction: Left
FreeS(13, 11)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(13, 0)
If select 14(leftmost) in Tree A #Subproblem: 429 Direction: Right
RightA[14, 0] set to 20
Compute Free(13, 0)
If select 14(rightmost) in Tree A #Subproblem: 443 Direction: Left
Compute Free(13, 0)
If select 1(leftmost) in Tree B #Subproblem: 429 Direction: Right
RightB(13, 11) = 16
Compute Free(13, 0)
If select 11(rightmost) in Tree B #Subproblem: 459 Direction: Left
FreeS(13, 0)
Keynode: 14 in Tree A
Direction: rightLeaf: 17
Compute Free(21, 0)
If select 21 in Tree A #Subproblem: 39 Direction: Right
Compute Free(21, 1)
If select 21 in Tree A #Subproblem: 14 Direction: Left
Compute Free(21, 2)
If select 21 in Tree A #Subproblem: 13 Direction: Left
Compute Free(21, 3)
If select 21 in Tree A #Subproblem: 12 Direction: Left
Compute Free(21, 4)
If select 21 in Tree A #Subproblem: 11 Direction: Left
Compute Free(21, 5)
If select 21 in Tree A #Subproblem: 10 Direction: Left
Compute Free(21, 6)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 6)
If select 6 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 6)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 7)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 7)
If select 7 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 7)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 8)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 8)
If select 8 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 8)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 9)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 9)
If select 9 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 9)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 10)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 10)
If select 10 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 10)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 5)
If select 6(leftmost) in Tree B #Subproblem: 10 Direction: Right
Compute Free(21, 5)
If select 7 in Tree B #Subproblem: 10 Direction: Left
Compute Free(21, 5)
If select 8 in Tree B #Subproblem: 10 Direction: Left
Compute Free(21, 5)
If select 9 in Tree B #Subproblem: 10 Direction: Left
RightB(21, 10) = 10
Compute Free(21, 5)
If select 10(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(21, 5)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 4)
If select 5(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(21, 5) = 10
Compute Free(21, 4)
If select 5(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(21, 4)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 3)
If select 4(leftmost) in Tree B #Subproblem: 12 Direction: Right
RightB(21, 4) = 10
Compute Free(21, 3)
If select 4(rightmost) in Tree B #Subproblem: 12 Direction: Left
FreeS(21, 3)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 2)
If select 3(leftmost) in Tree B #Subproblem: 13 Direction: Right
RightB(21, 3) = 10
Compute Free(21, 2)
If select 3(rightmost) in Tree B #Subproblem: 13 Direction: Left
FreeS(21, 2)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 1)
If select 2(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(21, 2) = 10
Compute Free(21, 1)
If select 2(rightmost) in Tree B #Subproblem: 14 Direction: Left
FreeS(21, 1)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 11)
If select 21 in Tree A #Subproblem: 14 Direction: Right
Compute Free(21, 12)
If select 21 in Tree A #Subproblem: 11 Direction: Left
Compute Free(21, 13)
If select 21 in Tree A #Subproblem: 10 Direction: Left
Compute Free(21, 14)
If select 21 in Tree A #Subproblem: 9 Direction: Left
Compute Free(21, 15)
If select 21 in Tree A #Subproblem: 8 Direction: Left
Compute Free(21, 16)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 16)
If select 16 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 16)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 17)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 17)
If select 17 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 17)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 18)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 18)
If select 18 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 18)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 19)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 19)
If select 19 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 19)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 15)
If select 16(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(21, 15)
If select 17 in Tree B #Subproblem: 8 Direction: Left
Compute Free(21, 15)
If select 18 in Tree B #Subproblem: 8 Direction: Left
RightB(21, 19) = 19
Compute Free(21, 15)
If select 19(rightmost) in Tree B #Subproblem: 8 Direction: Left
FreeS(21, 15)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 14)
If select 15(leftmost) in Tree B #Subproblem: 9 Direction: Right
RightB(21, 15) = 19
Compute Free(21, 14)
If select 15(rightmost) in Tree B #Subproblem: 9 Direction: Left
FreeS(21, 14)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 13)
If select 14(leftmost) in Tree B #Subproblem: 10 Direction: Right
RightB(21, 14) = 19
Compute Free(21, 13)
If select 14(rightmost) in Tree B #Subproblem: 10 Direction: Left
FreeS(21, 13)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 12)
If select 13(leftmost) in Tree B #Subproblem: 11 Direction: Right
RightB(21, 13) = 19
Compute Free(21, 12)
If select 13(rightmost) in Tree B #Subproblem: 11 Direction: Left
FreeS(21, 12)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 20)
If select 21 in Tree A #Subproblem: 1 Direction: Left
Compute Free(21, 20)
If select 20 in Tree B #Subproblem: 1 Direction: Left
FreeS(21, 20)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 11)
If select 12(leftmost) in Tree B #Subproblem: 14 Direction: Right
RightB(21, 20) = 20
Compute Free(21, 11)
If select 20(rightmost) in Tree B #Subproblem: 21 Direction: Left
FreeS(21, 11)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(21, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
RightB(21, 11) = 16
Compute Free(21, 0)
If select 11(rightmost) in Tree B #Subproblem: 39 Direction: Left
FreeS(21, 0)
Keynode: 21 in Tree A
Direction: rightLeaf: 21
Compute Free(12, 6)
If select 6 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 6)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 6] set to 21
Compute Free(12, 6)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 6)
Keynode: 6 in TreeB
Direction: rightLeaf: 6
Compute Free(12, 7)
If select 7 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 7)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 7] set to 21
Compute Free(12, 7)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 7)
Keynode: 7 in TreeB
Direction: rightLeaf: 7
Compute Free(12, 8)
If select 8 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 8)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 8] set to 21
Compute Free(12, 8)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 8)
Keynode: 8 in TreeB
Direction: rightLeaf: 8
Compute Free(12, 9)
If select 9 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 9)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 9] set to 21
Compute Free(12, 9)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 9)
Keynode: 9 in TreeB
Direction: rightLeaf: 9
Compute Free(12, 10)
If select 10 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 10)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 10] set to 21
Compute Free(12, 10)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 10)
Keynode: 10 in TreeB
Direction: rightLeaf: 10
Compute Free(12, 5)
If select 13(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[21, 5] set to 21
Compute Free(12, 5)
If select 21(rightmost) in Tree A #Subproblem: 210 Direction: Left
Compute Free(12, 5)
If select 6(leftmost) in Tree B #Subproblem: 140 Direction: Right
Compute Free(12, 5)
If select 7 in Tree B #Subproblem: 160 Direction: Right
Compute Free(12, 5)
If select 8 in Tree B #Subproblem: 170 Direction: Right
Compute Free(12, 5)
If select 9 in Tree B #Subproblem: 180 Direction: Right
RightB(12, 10) = 10
Compute Free(12, 5)
If select 10(rightmost) in Tree B #Subproblem: 182 Direction: Left
FreeS(12, 5)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 4)
If select 13(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[21, 4] set to 21
Compute Free(12, 4)
If select 21(rightmost) in Tree A #Subproblem: 231 Direction: Left
Compute Free(12, 4)
If select 5(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(12, 5) = 10
Compute Free(12, 4)
If select 5(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(12, 4)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 3)
If select 13(leftmost) in Tree A #Subproblem: 168 Direction: Right
RightA[21, 3] set to 21
Compute Free(12, 3)
If select 21(rightmost) in Tree A #Subproblem: 252 Direction: Left
Compute Free(12, 3)
If select 4(leftmost) in Tree B #Subproblem: 168 Direction: Right
RightB(12, 4) = 10
Compute Free(12, 3)
If select 4(rightmost) in Tree B #Subproblem: 182 Direction: Left
FreeS(12, 3)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 2)
If select 13(leftmost) in Tree A #Subproblem: 182 Direction: Right
RightA[21, 2] set to 21
Compute Free(12, 2)
If select 21(rightmost) in Tree A #Subproblem: 273 Direction: Left
Compute Free(12, 2)
If select 3(leftmost) in Tree B #Subproblem: 182 Direction: Right
RightB(12, 3) = 10
Compute Free(12, 2)
If select 3(rightmost) in Tree B #Subproblem: 196 Direction: Left
FreeS(12, 2)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 1)
If select 13(leftmost) in Tree A #Subproblem: 196 Direction: Right
RightA[21, 1] set to 21
Compute Free(12, 1)
If select 21(rightmost) in Tree A #Subproblem: 294 Direction: Left
Compute Free(12, 1)
If select 2(leftmost) in Tree B #Subproblem: 196 Direction: Right
RightB(12, 2) = 10
Compute Free(12, 1)
If select 2(rightmost) in Tree B #Subproblem: 210 Direction: Left
FreeS(12, 1)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 16)
If select 16 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 16)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 16] set to 21
Compute Free(12, 16)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 16)
Keynode: 16 in TreeB
Direction: rightLeaf: 16
Compute Free(12, 17)
If select 17 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 17)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 17] set to 21
Compute Free(12, 17)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 17)
Keynode: 17 in TreeB
Direction: rightLeaf: 17
Compute Free(12, 18)
If select 18 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 18)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 18] set to 21
Compute Free(12, 18)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 18)
Keynode: 18 in TreeB
Direction: rightLeaf: 18
Compute Free(12, 19)
If select 19 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 19)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 19] set to 21
Compute Free(12, 19)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 19)
Keynode: 19 in TreeB
Direction: rightLeaf: 19
Compute Free(12, 15)
If select 13(leftmost) in Tree A #Subproblem: 112 Direction: Right
RightA[21, 15] set to 21
Compute Free(12, 15)
If select 21(rightmost) in Tree A #Subproblem: 168 Direction: Left
Compute Free(12, 15)
If select 16(leftmost) in Tree B #Subproblem: 112 Direction: Right
Compute Free(12, 15)
If select 17 in Tree B #Subproblem: 132 Direction: Right
Compute Free(12, 15)
If select 18 in Tree B #Subproblem: 142 Direction: Right
RightB(12, 19) = 19
Compute Free(12, 15)
If select 19(rightmost) in Tree B #Subproblem: 147 Direction: Left
FreeS(12, 15)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 14)
If select 13(leftmost) in Tree A #Subproblem: 126 Direction: Right
RightA[21, 14] set to 21
Compute Free(12, 14)
If select 21(rightmost) in Tree A #Subproblem: 189 Direction: Left
Compute Free(12, 14)
If select 15(leftmost) in Tree B #Subproblem: 126 Direction: Right
RightB(12, 15) = 19
Compute Free(12, 14)
If select 15(rightmost) in Tree B #Subproblem: 140 Direction: Left
FreeS(12, 14)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 13)
If select 13(leftmost) in Tree A #Subproblem: 140 Direction: Right
RightA[21, 13] set to 21
Compute Free(12, 13)
If select 21(rightmost) in Tree A #Subproblem: 210 Direction: Left
Compute Free(12, 13)
If select 14(leftmost) in Tree B #Subproblem: 140 Direction: Right
RightB(12, 14) = 19
Compute Free(12, 13)
If select 14(rightmost) in Tree B #Subproblem: 154 Direction: Left
FreeS(12, 13)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 12)
If select 13(leftmost) in Tree A #Subproblem: 154 Direction: Right
RightA[21, 12] set to 21
Compute Free(12, 12)
If select 21(rightmost) in Tree A #Subproblem: 231 Direction: Left
Compute Free(12, 12)
If select 13(leftmost) in Tree B #Subproblem: 154 Direction: Right
RightB(12, 13) = 19
Compute Free(12, 12)
If select 13(rightmost) in Tree B #Subproblem: 168 Direction: Left
FreeS(12, 12)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 20)
If select 20 in Tree B #Subproblem: 14 Direction: Right
Compute Free(12, 20)
If select 13(leftmost) in Tree A #Subproblem: 14 Direction: Right
RightA[21, 20] set to 21
Compute Free(12, 20)
If select 21(rightmost) in Tree A #Subproblem: 21 Direction: Left
FreeS(12, 20)
Keynode: 20 in TreeB
Direction: rightLeaf: 20
Compute Free(12, 11)
If select 13(leftmost) in Tree A #Subproblem: 196 Direction: Right
RightA[21, 11] set to 21
Compute Free(12, 11)
If select 21(rightmost) in Tree A #Subproblem: 364 Direction: Left
Compute Free(12, 11)
If select 12(leftmost) in Tree B #Subproblem: 196 Direction: Right
RightB(12, 20) = 20
Compute Free(12, 11)
If select 20(rightmost) in Tree B #Subproblem: 364 Direction: Left
FreeS(12, 11)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(12, 0)
If select 13(leftmost) in Tree A #Subproblem: 546 Direction: Right
RightA[21, 0] set to 21
Compute Free(12, 0)
If select 21(rightmost) in Tree A #Subproblem: 889 Direction: Left
Compute Free(12, 0)
If select 1(leftmost) in Tree B #Subproblem: 546 Direction: Right
RightB(12, 11) = 16
Compute Free(12, 0)
If select 11(rightmost) in Tree B #Subproblem: 723 Direction: Left
FreeS(12, 0)
Keynode: 13 in Tree A
Direction: rightLeaf: 17
Compute Free(0, 6)
If select 6 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 6)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 6)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 6)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 6] set to 17
Compute Free(0, 6)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 6)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 7)
If select 7 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 7)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 7)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 7)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 7] set to 17
Compute Free(0, 7)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 7)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 8)
If select 8 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 8)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 8)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 8)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 8] set to 17
Compute Free(0, 8)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 8)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 9)
If select 9 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 9)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 9)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 9)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 9] set to 17
Compute Free(0, 9)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 9)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 10)
If select 10 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 10)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 10)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 10)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 10] set to 17
Compute Free(0, 10)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 10)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 5)
If select 1(leftmost) in Tree A #Subproblem: 500 Direction: Right
Compute Free(0, 5)
If select 2 in Tree A #Subproblem: 480 Direction: Right
Compute Free(0, 5)
If select 11 in Tree A #Subproblem: 566 Direction: Left
RightA[12, 5] set to 17
Compute Free(0, 5)
If select 12(rightmost) in Tree A #Subproblem: 470 Direction: Left
Compute Free(0, 5)
If select 6(leftmost) in Tree B #Subproblem: 464 Direction: Right
Compute Free(0, 5)
If select 7 in Tree B #Subproblem: 714 Direction: Right
Compute Free(0, 5)
If select 8 in Tree B #Subproblem: 833 Direction: Left
Compute Free(0, 5)
If select 9 in Tree B #Subproblem: 706 Direction: Left
RightB(0, 10) = 10
Compute Free(0, 5)
If select 10(rightmost) in Tree B #Subproblem: 452 Direction: Left
FreeS(0, 5)
Keynode: 10 in TreeB
Direction: left
Leaf: 10
Compute Free(0, 4)
If select 1(leftmost) in Tree A #Subproblem: 550 Direction: Right
Compute Free(0, 4)
If select 2 in Tree A #Subproblem: 522 Direction: Right
Compute Free(0, 4)
If select 11 in Tree A #Subproblem: 616 Direction: Left
RightA[12, 4] set to 17
Compute Free(0, 4)
If select 12(rightmost) in Tree A #Subproblem: 511 Direction: Left
Compute Free(0, 4)
If select 5(leftmost) in Tree B #Subproblem: 514 Direction: Right
RightB(0, 5) = 10
Compute Free(0, 4)
If select 5(rightmost) in Tree B #Subproblem: 510 Direction: Left
FreeS(0, 4)
Keynode: 5 in TreeB
Direction: left
Leaf: 10
Compute Free(0, 3)
If select 1(leftmost) in Tree A #Subproblem: 600 Direction: Right
Compute Free(0, 3)
If select 2 in Tree A #Subproblem: 564 Direction: Right
Compute Free(0, 3)
If select 11 in Tree A #Subproblem: 666 Direction: Left
RightA[12, 3] set to 17
Compute Free(0, 3)
If select 12(rightmost) in Tree A #Subproblem: 552 Direction: Left
Compute Free(0, 3)
If select 4(leftmost) in Tree B #Subproblem: 564 Direction: Right
RightB(0, 4) = 10
Compute Free(0, 3)
If select 4(rightmost) in Tree B #Subproblem: 560 Direction: Left
FreeS(0, 3)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 650 Direction: Right
Compute Free(0, 2)
If select 2 in Tree A #Subproblem: 606 Direction: Right
Compute Free(0, 2)
If select 11 in Tree A #Subproblem: 716 Direction: Left
RightA[12, 2] set to 17
Compute Free(0, 2)
If select 12(rightmost) in Tree A #Subproblem: 593 Direction: Left
Compute Free(0, 2)
If select 3(leftmost) in Tree B #Subproblem: 614 Direction: Right
RightB(0, 3) = 10
Compute Free(0, 2)
If select 3(rightmost) in Tree B #Subproblem: 610 Direction: Left
FreeS(0, 2)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 700 Direction: Right
Compute Free(0, 1)
If select 2 in Tree A #Subproblem: 648 Direction: Right
Compute Free(0, 1)
If select 11 in Tree A #Subproblem: 766 Direction: Left
RightA[12, 1] set to 17
Compute Free(0, 1)
If select 12(rightmost) in Tree A #Subproblem: 634 Direction: Left
Compute Free(0, 1)
If select 2(leftmost) in Tree B #Subproblem: 664 Direction: Right
RightB(0, 2) = 10
Compute Free(0, 1)
If select 2(rightmost) in Tree B #Subproblem: 660 Direction: Left
FreeS(0, 1)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 16)
If select 16 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 16)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 16)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 16)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 16] set to 17
Compute Free(0, 16)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 16)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 17)
If select 17 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 17)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 17)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 17)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 17] set to 17
Compute Free(0, 17)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 17)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 18)
If select 18 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 18)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 18)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 18)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 18] set to 17
Compute Free(0, 18)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 18)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 19)
If select 19 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 19)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 19)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 19)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 19] set to 17
Compute Free(0, 19)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 19)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 15)
If select 1(leftmost) in Tree A #Subproblem: 400 Direction: Right
Compute Free(0, 15)
If select 2 in Tree A #Subproblem: 366 Direction: Right
Compute Free(0, 15)
If select 11 in Tree A #Subproblem: 433 Direction: Left
RightA[12, 15] set to 17
Compute Free(0, 15)
If select 12(rightmost) in Tree A #Subproblem: 358 Direction: Left
Compute Free(0, 15)
If select 16(leftmost) in Tree B #Subproblem: 373 Direction: Right
Compute Free(0, 15)
If select 17 in Tree B #Subproblem: 623 Direction: Right
Compute Free(0, 15)
If select 18 in Tree B #Subproblem: 617 Direction: Left
RightB(0, 19) = 19
Compute Free(0, 15)
If select 19(rightmost) in Tree B #Subproblem: 363 Direction: Left
FreeS(0, 15)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 14)
If select 1(leftmost) in Tree A #Subproblem: 450 Direction: Right
Compute Free(0, 14)
If select 2 in Tree A #Subproblem: 408 Direction: Right
Compute Free(0, 14)
If select 11 in Tree A #Subproblem: 483 Direction: Left
RightA[12, 14] set to 17
Compute Free(0, 14)
If select 12(rightmost) in Tree A #Subproblem: 399 Direction: Left
Compute Free(0, 14)
If select 15(leftmost) in Tree B #Subproblem: 423 Direction: Right
RightB(0, 15) = 19
Compute Free(0, 14)
If select 15(rightmost) in Tree B #Subproblem: 419 Direction: Left
FreeS(0, 14)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 13)
If select 1(leftmost) in Tree A #Subproblem: 500 Direction: Right
Compute Free(0, 13)
If select 2 in Tree A #Subproblem: 450 Direction: Right
Compute Free(0, 13)
If select 11 in Tree A #Subproblem: 533 Direction: Left
RightA[12, 13] set to 17
Compute Free(0, 13)
If select 12(rightmost) in Tree A #Subproblem: 440 Direction: Left
Compute Free(0, 13)
If select 14(leftmost) in Tree B #Subproblem: 473 Direction: Right
RightB(0, 14) = 19
Compute Free(0, 13)
If select 14(rightmost) in Tree B #Subproblem: 469 Direction: Left
FreeS(0, 13)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 12)
If select 1(leftmost) in Tree A #Subproblem: 550 Direction: Right
Compute Free(0, 12)
If select 2 in Tree A #Subproblem: 492 Direction: Right
Compute Free(0, 12)
If select 11 in Tree A #Subproblem: 583 Direction: Left
RightA[12, 12] set to 17
Compute Free(0, 12)
If select 12(rightmost) in Tree A #Subproblem: 481 Direction: Left
Compute Free(0, 12)
If select 13(leftmost) in Tree B #Subproblem: 523 Direction: Right
RightB(0, 13) = 19
Compute Free(0, 12)
If select 13(rightmost) in Tree B #Subproblem: 519 Direction: Left
FreeS(0, 12)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 20)
If select 20 in Tree B #Subproblem: 50 Direction: Left
Compute Free(0, 20)
If select 1(leftmost) in Tree A #Subproblem: 50 Direction: Right
Compute Free(0, 20)
If select 2 in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 20)
If select 11 in Tree A #Subproblem: 50 Direction: Left
RightA[12, 20] set to 17
Compute Free(0, 20)
If select 12(rightmost) in Tree A #Subproblem: 41 Direction: Left
FreeS(0, 20)
Keynode: 12 in Tree A
Direction: left
Leaf: 17
Compute Free(0, 11)
If select 1(leftmost) in Tree A #Subproblem: 700 Direction: Right
Compute Free(0, 11)
If select 2 in Tree A #Subproblem: 688 Direction: Right
Compute Free(0, 11)
If select 11 in Tree A #Subproblem: 810 Direction: Right
RightA[12, 11] set to 17
Compute Free(0, 11)
If select 12(rightmost) in Tree A #Subproblem: 758 Direction: Left
Compute Free(0, 11)
If select 12(leftmost) in Tree B #Subproblem: 664 Direction: Right
RightB(0, 20) = 20
Compute Free(0, 11)
If select 20(rightmost) in Tree B #Subproblem: 961 Direction: Left
FreeS(0, 11)
Keynode: 12 in TreeB
Direction: rightLeaf: 16
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 1950 Direction: Right
Compute Free(0, 0)
If select 2 in Tree A #Subproblem: 2698 Direction: Right
Compute Free(0, 0)
If select 11 in Tree A #Subproblem: 3116 Direction: Right
RightA[12, 0] set to 21
Compute Free(0, 0)
If select 12(rightmost) in Tree A #Subproblem: 1963 Direction: Left
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 1878 Direction: Right
RightB(0, 11) = 20
Compute Free(0, 0)
If select 11(rightmost) in Tree B #Subproblem: 2141 Direction: Left
FreeS(0, 0)
Keynode: 1 in TreeB
Direction: rightLeaf: 6
RESULT
6 in B 17 in A 17 in A 17 in A 10 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 1 in A 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in B 7 in B 8 in B 9 in B 10 in B 6 in A 6 in A 6 in A 6 in A 6 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 6 in A 
7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 7 in A 
8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 8 in A 
9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 9 in A 
10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 10 in A 
11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 11 in A 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 6 in B 7 in B 8 in B 9 in B 10 in B 17 in A 17 in A 17 in A 17 in A 17 in A 16 in B 17 in B 18 in B 19 in B 20 in B 
17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 17 in A 
18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 18 in A 
19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 19 in A 
20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 20 in A 
21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 21 in A 
gted(0, 0)
treeSizeA = 22
treeSizeB = 21
getPathType B (0 ,6) = 0
A child = 6 currentPathNode = 6 parent = 5
A child = 7 currentPathNode = 6 parent = 5
gted(0, 0) create problem in B gted(0, 7)
gted(0, 7)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 8 currentPathNode = 6 parent = 5
gted(0, 0) create problem in B gted(0, 8)
gted(0, 8)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 9 currentPathNode = 6 parent = 5
gted(0, 0) create problem in B gted(0, 9)
gted(0, 9)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 10 currentPathNode = 6 parent = 5
gted(0, 0) create problem in B gted(0, 10)
gted(0, 10)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 5 currentPathNode = 5 parent = 4
A child = 4 currentPathNode = 4 parent = 3
A child = 3 currentPathNode = 3 parent = 2
A child = 2 currentPathNode = 2 parent = 1
A child = 1 currentPathNode = 1 parent = 0
A child = 11 currentPathNode = 1 parent = 0
gted(0, 0) create problem in B gted(0, 11)
gted(0, 11)
treeSizeA = 22
treeSizeB = 10
getPathType B (11 ,16) = 0
A child = 16 currentPathNode = 16 parent = 15
A child = 17 currentPathNode = 16 parent = 15
gted(0, 11) create problem in B gted(0, 17)
gted(0, 17)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 18 currentPathNode = 16 parent = 15
gted(0, 11) create problem in B gted(0, 18)
gted(0, 18)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 19 currentPathNode = 16 parent = 15
gted(0, 11) create problem in B gted(0, 19)
gted(0, 19)
treeSizeA = 22
treeSizeB = 1
return 0.0f
A child = 15 currentPathNode = 15 parent = 14
A child = 14 currentPathNode = 14 parent = 13
A child = 13 currentPathNode = 13 parent = 12
A child = 12 currentPathNode = 12 parent = 11
A child = 20 currentPathNode = 12 parent = 11
gted(0, 11) create problem in B gted(0, 20)
gted(0, 20)
treeSizeA = 22
treeSizeB = 1
return 0.0f
swap = true pathType = 0
spfA(11, 0) 1
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (16, 10, 21, 2)
Save to S[10, 2]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[21, 16]
T[21, 2] = S[10, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (16, 10, 20, 7)
Save to S[10, 7]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[20, 16]
T[20, 7] = S[10, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (16, 10, 19, 8)
Save to S[10, 8]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[19, 16]
T[19, 8] = S[10, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (16, 10, 18, 9)
Save to S[10, 9]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[18, 16]
T[18, 9] = S[10, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (16, 10, 17, 10)
Save to S[10, 10]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[17, 16]
Right (16, 10, 17, 9)
Save to S[10, 9]
case1_case3 -2
case2_case3 s[10, 10]
case3_case d[18, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 17, 8)
Save to S[10, 8]
case1_case3 -3
case2_case3 s[10, 9]
case3_case d[19, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 17, 7)
Save to S[10, 7]
case1_case3 -4
case2_case3 s[10, 8]
case3_case d[20, 16]
case3_case2 GcurrentForestCost - G(rG) 
Q[10] = S[10, 7]
T[17, 10] = S[10, 10]
T[17, 9] = S[10, 9]
T[17, 8] = S[10, 8]
T[17, 7] = S[10, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (16, 10, 16, 6)
Save to S[10, 6]
case3 = 0
case1_case3 = -5
case2_case2 = q[10]
case3_case3 D[16, 16]
Q[10] = S[10, 6]
T[16, 6] = S[10, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (16, 10, 15, 5)
Save to S[10, 5]
case3 = 0
case1_case3 = -6
case2_case2 = q[10]
case3_case3 D[15, 16]
Q[10] = S[10, 5]
T[15, 5] = S[10, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (16, 10, 14, 4)
Save to S[10, 4]
case3 = 0
case1_case3 = -7
case2_case2 = q[10]
case3_case3 D[14, 16]
Q[10] = S[10, 4]
T[14, 4] = S[10, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (16, 10, 13, 3)
Save to S[10, 3]
case3 = 0
case1_case3 = -8
case2_case2 = q[10]
case3_case3 D[13, 16]
Right (16, 10, 13, 2)
Save to S[10, 2]
case1_case3 -9
case2_case3 s[10, 3]
case3_case d[21, 16]
case3_case2 GcurrentForestCost - G(rG) 
Q[10] = S[10, 2]
T[13, 3] = S[10, 3]
T[13, 2] = S[10, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (16, 10, 12, 1)
Save to S[10, 1]
case3 = 0
case1_case3 = -10
case2_case2 = q[10]
case3_case3 D[12, 16]
T[12, 1] = S[10, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (16, 10, 11, 11)
Save to S[10, 11]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[11, 16]
T[11, 11] = S[10, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (16, 10, 10, 16)
Save to S[10, 16]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[10, 16]
T[10, 16] = S[10, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (16, 10, 9, 17)
Save to S[10, 17]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[9, 16]
T[9, 17] = S[10, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (16, 10, 8, 18)
Save to S[10, 18]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[8, 16]
T[8, 18] = S[10, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (16, 10, 7, 19)
Save to S[10, 19]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[7, 16]
T[7, 19] = S[10, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (16, 10, 6, 20)
Save to S[10, 20]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[6, 16]
Right (16, 10, 6, 19)
Save to S[10, 19]
case1_case3 -2
case2_case3 s[10, 20]
case3_case d[7, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 6, 18)
Save to S[10, 18]
case1_case3 -3
case2_case3 s[10, 19]
case3_case d[8, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 6, 17)
Save to S[10, 17]
case1_case3 -4
case2_case3 s[10, 18]
case3_case d[9, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 6, 16)
Save to S[10, 16]
case1_case3 -5
case2_case3 s[10, 17]
case3_case d[10, 16]
case3_case2 GcurrentForestCost - G(rG) 
Q[10] = S[10, 16]
T[6, 20] = S[10, 20]
T[6, 19] = S[10, 19]
T[6, 18] = S[10, 18]
T[6, 17] = S[10, 17]
T[6, 16] = S[10, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (16, 10, 5, 15)
Save to S[10, 15]
case3 = 0
case1_case3 = -6
case2_case2 = q[10]
case3_case3 D[5, 16]
Q[10] = S[10, 15]
T[5, 15] = S[10, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (16, 10, 4, 14)
Save to S[10, 14]
case3 = 0
case1_case3 = -7
case2_case2 = q[10]
case3_case3 D[4, 16]
Q[10] = S[10, 14]
T[4, 14] = S[10, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (16, 10, 3, 13)
Save to S[10, 13]
case3 = 0
case1_case3 = -8
case2_case2 = q[10]
case3_case3 D[3, 16]
Q[10] = S[10, 13]
T[3, 13] = S[10, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (16, 10, 2, 12)
Save to S[10, 12]
case3 = 0
case1_case3 = -9
case2_case2 = q[10]
case3_case3 D[2, 16]
T[2, 12] = S[10, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (16, 10, 1, 21)
Save to S[10, 21]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[1, 16]
Right (16, 10, 1, 20)
Save to S[10, 20]
case1_case3 -2
case2_case3 s[10, 21]
case3_case d[6, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 19)
Save to S[10, 19]
case1_case3 -3
case2_case3 s[10, 20]
case3_case d[7, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 18)
Save to S[10, 18]
case1_case3 -4
case2_case3 s[10, 19]
case3_case d[8, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 17)
Save to S[10, 17]
case1_case3 -5
case2_case3 s[10, 18]
case3_case d[9, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 16)
Save to S[10, 16]
case1_case3 -6
case2_case3 s[10, 17]
case3_case d[10, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 15)
Save to S[10, 15]
case1_case3 -7
case2_case3 s[10, 16]
case3_case d[5, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 14)
Save to S[10, 14]
case1_case3 -8
case2_case3 s[10, 15]
case3_case d[4, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 13)
Save to S[10, 13]
case1_case3 -9
case2_case3 s[10, 14]
case3_case d[3, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 12)
Save to S[10, 12]
case1_case3 -10
case2_case3 s[10, 13]
case3_case d[2, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 11)
Save to S[10, 11]
case1_case3 -11
case2_case3 s[10, 12]
case3_case d[11, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 10)
Save to S[10, 10]
case1_case3 -12
case2_case3 s[10, 11]
case3_case d[17, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 9)
Save to S[10, 9]
case1_case3 -13
case2_case3 s[10, 10]
case3_case d[18, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 8)
Save to S[10, 8]
case1_case3 -14
case2_case3 s[10, 9]
case3_case d[19, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 7)
Save to S[10, 7]
case1_case3 -15
case2_case3 s[10, 8]
case3_case d[20, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 6)
Save to S[10, 6]
case1_case3 -16
case2_case3 s[10, 7]
case3_case d[16, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 5)
Save to S[10, 5]
case1_case3 -17
case2_case3 s[10, 6]
case3_case d[15, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 4)
Save to S[10, 4]
case1_case3 -18
case2_case3 s[10, 5]
case3_case d[14, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 3)
Save to S[10, 3]
case1_case3 -19
case2_case3 s[10, 4]
case3_case d[13, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 2)
Save to S[10, 2]
case1_case3 -20
case2_case3 s[10, 3]
case3_case d[21, 16]
case3_case2 GcurrentForestCost - G(rG) 
Right (16, 10, 1, 1)
Save to S[10, 1]
case1_case3 -21
case2_case3 s[10, 2]
case3_case d[12, 16]
case3_case2 GcurrentForestCost - G(rG) 
Q[10] = S[10, 1]
T[1, 21] = S[10, 21]
T[1, 20] = S[10, 20]
T[1, 19] = S[10, 19]
T[1, 18] = S[10, 18]
T[1, 17] = S[10, 17]
T[1, 16] = S[10, 16]
T[1, 15] = S[10, 15]
T[1, 14] = S[10, 14]
T[1, 13] = S[10, 13]
T[1, 12] = S[10, 12]
T[1, 11] = S[10, 11]
T[1, 10] = S[10, 10]
T[1, 9] = S[10, 9]
T[1, 8] = S[10, 8]
T[1, 7] = S[10, 7]
T[1, 6] = S[10, 6]
T[1, 5] = S[10, 5]
T[1, 4] = S[10, 4]
T[1, 3] = S[10, 3]
T[1, 2] = S[10, 2]
T[1, 1] = S[10, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (16, 10, 0, 0)
Save to S[10, 0]
case3 = 0
case1_case3 = -22
case2_case2 = q[10]
case3_case3 D[0, 16]
T[0, 0] = S[10, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (15, 9, 21, 2)
Save to S[9, 2]
case3_case FcurrentForest - F(rF)
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 17]
new Round C'
Right (15, 8, 21, 2)
Save to S[8, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 18]
new Round C'
Right (15, 7, 21, 2)
Save to S[7, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 19]
new Round C'
Right (15, 6, 21, 2)
Save to S[6, 2]
case3 = 0
case1_case1 = s[7, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 15]
T[21, 2] = S[6, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (15, 9, 20, 7)
Save to S[9, 7]
case3_case FcurrentForest - F(rF)
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 17]
new Round C'
Right (15, 8, 20, 7)
Save to S[8, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 18]
new Round C'
Right (15, 7, 20, 7)
Save to S[7, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 19]
new Round C'
Right (15, 6, 20, 7)
Save to S[6, 7]
case3 = 0
case1_case1 = s[7, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 15]
T[20, 7] = S[6, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (15, 9, 19, 8)
Save to S[9, 8]
case3_case FcurrentForest - F(rF)
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 17]
new Round C'
Right (15, 8, 19, 8)
Save to S[8, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 18]
new Round C'
Right (15, 7, 19, 8)
Save to S[7, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 19]
new Round C'
Right (15, 6, 19, 8)
Save to S[6, 8]
case3 = 0
case1_case1 = s[7, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 15]
T[19, 8] = S[6, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (15, 9, 18, 9)
Save to S[9, 9]
case3_case FcurrentForest - F(rF)
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 17]
new Round C'
Right (15, 8, 18, 9)
Save to S[8, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 18]
new Round C'
Right (15, 7, 18, 9)
Save to S[7, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 19]
new Round C'
Right (15, 6, 18, 9)
Save to S[6, 9]
case3 = 0
case1_case1 = s[7, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 15]
T[18, 9] = S[6, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (15, 9, 17, 10)
Save to S[9, 10]
case3_case FcurrentForest - F(rF)
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 17]
Right (15, 9, 17, 9)
Save to S[9, 9]
case1_case2 t[17, 9]
case2_case3 s[9, 10]
case3_case d[18, 17]
case3_case3 t[17, 10]
Right (15, 9, 17, 8)
Save to S[9, 8]
case1_case2 t[17, 8]
case2_case3 s[9, 9]
case3_case d[19, 17]
case3_case3 t[17, 9]
Right (15, 9, 17, 7)
Save to S[9, 7]
case1_case2 t[17, 7]
case2_case3 s[9, 8]
case3_case d[20, 17]
case3_case3 t[17, 8]
new Round C'
Right (15, 8, 17, 10)
Save to S[8, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 18]
Right (15, 8, 17, 9)
Save to S[8, 9]
case1_case1 s[9, 9]
case2_case3 s[8, 10]
case3_case d[18, 18]
case3_case1 s[9, 10]
Right (15, 8, 17, 8)
Save to S[8, 8]
case1_case1 s[9, 8]
case2_case3 s[8, 9]
case3_case d[19, 18]
case3_case1 s[9, 9]
Right (15, 8, 17, 7)
Save to S[8, 7]
case1_case1 s[9, 7]
case2_case3 s[8, 8]
case3_case d[20, 18]
case3_case1 s[9, 8]
new Round C'
Right (15, 7, 17, 10)
Save to S[7, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 19]
Right (15, 7, 17, 9)
Save to S[7, 9]
case1_case1 s[8, 9]
case2_case3 s[7, 10]
case3_case d[18, 19]
case3_case1 s[8, 10]
Right (15, 7, 17, 8)
Save to S[7, 8]
case1_case1 s[8, 8]
case2_case3 s[7, 9]
case3_case d[19, 19]
case3_case1 s[8, 9]
Right (15, 7, 17, 7)
Save to S[7, 7]
case1_case1 s[8, 7]
case2_case3 s[7, 8]
case3_case d[20, 19]
case3_case1 s[8, 8]
new Round C'
Right (15, 6, 17, 10)
Save to S[6, 10]
case3 = 0
case1_case1 = s[7, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 15]
Right (15, 6, 17, 9)
Save to S[6, 9]
case1_case1 s[7, 9]
case2_case3 s[6, 10]
case3_case d[18, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 17, 8)
Save to S[6, 8]
case1_case1 s[7, 8]
case2_case3 s[6, 9]
case3_case d[19, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 17, 7)
Save to S[6, 7]
case1_case1 s[7, 7]
case2_case3 s[6, 8]
case3_case d[20, 15]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 15] = S[6, 7]
save to D[16, 14] = S[6, 7]
Q[9] = S[9, 7]
Q[8] = S[8, 7]
Q[7] = S[7, 7]
Q[6] = S[6, 7]
T[17, 10] = S[6, 10]
T[17, 9] = S[6, 9]
T[17, 8] = S[6, 8]
T[17, 7] = S[6, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (15, 9, 16, 6)
Save to S[9, 6]
case3_case FcurrentForest - F(rF)
case1_case2 = t[16, 6]
case2_case2 = q[9]
case3_case3 D[16, 17]
new Round C'
Right (15, 8, 16, 6)
Save to S[8, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 6]
case2_case2 = q[8]
case3_case3 D[16, 18]
new Round C'
Right (15, 7, 16, 6)
Save to S[7, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 6]
case2_case2 = q[7]
case3_case3 D[16, 19]
new Round C'
Right (15, 6, 16, 6)
Save to S[6, 6]
case3 = 0
case1_case1 = s[7, 6]
case2_case2 = q[6]
case3_case3 D[16, 15]
save to D[15, 15] = S[6, 6]
save to D[15, 14] = S[6, 6]
Q[9] = S[9, 6]
Q[8] = S[8, 6]
Q[7] = S[7, 6]
Q[6] = S[6, 6]
T[16, 6] = S[6, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (15, 9, 15, 5)
Save to S[9, 5]
case3_case FcurrentForest - F(rF)
case1_case2 = t[15, 5]
case2_case2 = q[9]
case3_case3 D[15, 17]
new Round C'
Right (15, 8, 15, 5)
Save to S[8, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 5]
case2_case2 = q[8]
case3_case3 D[15, 18]
new Round C'
Right (15, 7, 15, 5)
Save to S[7, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 5]
case2_case2 = q[7]
case3_case3 D[15, 19]
new Round C'
Right (15, 6, 15, 5)
Save to S[6, 5]
case3 = 0
case1_case1 = s[7, 5]
case2_case2 = q[6]
case3_case3 D[15, 15]
save to D[14, 15] = S[6, 5]
save to D[14, 14] = S[6, 5]
Q[9] = S[9, 5]
Q[8] = S[8, 5]
Q[7] = S[7, 5]
Q[6] = S[6, 5]
T[15, 5] = S[6, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (15, 9, 14, 4)
Save to S[9, 4]
case3_case FcurrentForest - F(rF)
case1_case2 = t[14, 4]
case2_case2 = q[9]
case3_case3 D[14, 17]
new Round C'
Right (15, 8, 14, 4)
Save to S[8, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 4]
case2_case2 = q[8]
case3_case3 D[14, 18]
new Round C'
Right (15, 7, 14, 4)
Save to S[7, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 4]
case2_case2 = q[7]
case3_case3 D[14, 19]
new Round C'
Right (15, 6, 14, 4)
Save to S[6, 4]
case3 = 0
case1_case1 = s[7, 4]
case2_case2 = q[6]
case3_case3 D[14, 15]
save to D[13, 15] = S[6, 4]
save to D[13, 14] = S[6, 4]
Q[9] = S[9, 4]
Q[8] = S[8, 4]
Q[7] = S[7, 4]
Q[6] = S[6, 4]
T[14, 4] = S[6, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (15, 9, 13, 3)
Save to S[9, 3]
case3_case FcurrentForest - F(rF)
case1_case2 = t[13, 3]
case2_case2 = q[9]
case3_case3 D[13, 17]
Right (15, 9, 13, 2)
Save to S[9, 2]
case1_case2 t[13, 2]
case2_case3 s[9, 3]
case3_case d[21, 17]
case3_case3 t[13, 3]
new Round C'
Right (15, 8, 13, 3)
Save to S[8, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 3]
case2_case2 = q[8]
case3_case3 D[13, 18]
Right (15, 8, 13, 2)
Save to S[8, 2]
case1_case1 s[9, 2]
case2_case3 s[8, 3]
case3_case d[21, 18]
case3_case1 s[9, 3]
new Round C'
Right (15, 7, 13, 3)
Save to S[7, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 3]
case2_case2 = q[7]
case3_case3 D[13, 19]
Right (15, 7, 13, 2)
Save to S[7, 2]
case1_case1 s[8, 2]
case2_case3 s[7, 3]
case3_case d[21, 19]
case3_case1 s[8, 3]
new Round C'
Right (15, 6, 13, 3)
Save to S[6, 3]
case3 = 0
case1_case1 = s[7, 3]
case2_case2 = q[6]
case3_case3 D[13, 15]
Right (15, 6, 13, 2)
Save to S[6, 2]
case1_case1 s[7, 2]
case2_case3 s[6, 3]
case3_case d[21, 15]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 15] = S[6, 2]
save to D[12, 14] = S[6, 2]
Q[9] = S[9, 2]
Q[8] = S[8, 2]
Q[7] = S[7, 2]
Q[6] = S[6, 2]
T[13, 3] = S[6, 3]
T[13, 2] = S[6, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (15, 9, 12, 1)
Save to S[9, 1]
case3_case FcurrentForest - F(rF)
case1_case2 = t[12, 1]
case2_case2 = q[9]
case3_case3 D[12, 17]
new Round C'
Right (15, 8, 12, 1)
Save to S[8, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 1]
case2_case2 = q[8]
case3_case3 D[12, 18]
new Round C'
Right (15, 7, 12, 1)
Save to S[7, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 1]
case2_case2 = q[7]
case3_case3 D[12, 19]
new Round C'
Right (15, 6, 12, 1)
Save to S[6, 1]
case3 = 0
case1_case1 = s[7, 1]
case2_case2 = q[6]
case3_case3 D[12, 15]
T[12, 1] = S[6, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (15, 9, 11, 11)
Save to S[9, 11]
case3_case FcurrentForest - F(rF)
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 17]
new Round C'
Right (15, 8, 11, 11)
Save to S[8, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 18]
new Round C'
Right (15, 7, 11, 11)
Save to S[7, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 19]
new Round C'
Right (15, 6, 11, 11)
Save to S[6, 11]
case3 = 0
case1_case1 = s[7, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 15]
T[11, 11] = S[6, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (15, 9, 10, 16)
Save to S[9, 16]
case3_case FcurrentForest - F(rF)
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 17]
new Round C'
Right (15, 8, 10, 16)
Save to S[8, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 18]
new Round C'
Right (15, 7, 10, 16)
Save to S[7, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 19]
new Round C'
Right (15, 6, 10, 16)
Save to S[6, 16]
case3 = 0
case1_case1 = s[7, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 15]
T[10, 16] = S[6, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (15, 9, 9, 17)
Save to S[9, 17]
case3_case FcurrentForest - F(rF)
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 17]
new Round C'
Right (15, 8, 9, 17)
Save to S[8, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 18]
new Round C'
Right (15, 7, 9, 17)
Save to S[7, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 19]
new Round C'
Right (15, 6, 9, 17)
Save to S[6, 17]
case3 = 0
case1_case1 = s[7, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 15]
T[9, 17] = S[6, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (15, 9, 8, 18)
Save to S[9, 18]
case3_case FcurrentForest - F(rF)
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 17]
new Round C'
Right (15, 8, 8, 18)
Save to S[8, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 18]
new Round C'
Right (15, 7, 8, 18)
Save to S[7, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 19]
new Round C'
Right (15, 6, 8, 18)
Save to S[6, 18]
case3 = 0
case1_case1 = s[7, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 15]
T[8, 18] = S[6, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (15, 9, 7, 19)
Save to S[9, 19]
case3_case FcurrentForest - F(rF)
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 17]
new Round C'
Right (15, 8, 7, 19)
Save to S[8, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 18]
new Round C'
Right (15, 7, 7, 19)
Save to S[7, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 19]
new Round C'
Right (15, 6, 7, 19)
Save to S[6, 19]
case3 = 0
case1_case1 = s[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 15]
T[7, 19] = S[6, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (15, 9, 6, 20)
Save to S[9, 20]
case3_case FcurrentForest - F(rF)
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 17]
Right (15, 9, 6, 19)
Save to S[9, 19]
case1_case2 t[6, 19]
case2_case3 s[9, 20]
case3_case d[7, 17]
case3_case3 t[6, 20]
Right (15, 9, 6, 18)
Save to S[9, 18]
case1_case2 t[6, 18]
case2_case3 s[9, 19]
case3_case d[8, 17]
case3_case3 t[6, 19]
Right (15, 9, 6, 17)
Save to S[9, 17]
case1_case2 t[6, 17]
case2_case3 s[9, 18]
case3_case d[9, 17]
case3_case3 t[6, 18]
Right (15, 9, 6, 16)
Save to S[9, 16]
case1_case2 t[6, 16]
case2_case3 s[9, 17]
case3_case d[10, 17]
case3_case3 t[6, 17]
new Round C'
Right (15, 8, 6, 20)
Save to S[8, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 18]
Right (15, 8, 6, 19)
Save to S[8, 19]
case1_case1 s[9, 19]
case2_case3 s[8, 20]
case3_case d[7, 18]
case3_case1 s[9, 20]
Right (15, 8, 6, 18)
Save to S[8, 18]
case1_case1 s[9, 18]
case2_case3 s[8, 19]
case3_case d[8, 18]
case3_case1 s[9, 19]
Right (15, 8, 6, 17)
Save to S[8, 17]
case1_case1 s[9, 17]
case2_case3 s[8, 18]
case3_case d[9, 18]
case3_case1 s[9, 18]
Right (15, 8, 6, 16)
Save to S[8, 16]
case1_case1 s[9, 16]
case2_case3 s[8, 17]
case3_case d[10, 18]
case3_case1 s[9, 17]
new Round C'
Right (15, 7, 6, 20)
Save to S[7, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 19]
Right (15, 7, 6, 19)
Save to S[7, 19]
case1_case1 s[8, 19]
case2_case3 s[7, 20]
case3_case d[7, 19]
case3_case1 s[8, 20]
Right (15, 7, 6, 18)
Save to S[7, 18]
case1_case1 s[8, 18]
case2_case3 s[7, 19]
case3_case d[8, 19]
case3_case1 s[8, 19]
Right (15, 7, 6, 17)
Save to S[7, 17]
case1_case1 s[8, 17]
case2_case3 s[7, 18]
case3_case d[9, 19]
case3_case1 s[8, 18]
Right (15, 7, 6, 16)
Save to S[7, 16]
case1_case1 s[8, 16]
case2_case3 s[7, 17]
case3_case d[10, 19]
case3_case1 s[8, 17]
new Round C'
Right (15, 6, 6, 20)
Save to S[6, 20]
case3 = 0
case1_case1 = s[7, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 15]
Right (15, 6, 6, 19)
Save to S[6, 19]
case1_case1 s[7, 19]
case2_case3 s[6, 20]
case3_case d[7, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 6, 18)
Save to S[6, 18]
case1_case1 s[7, 18]
case2_case3 s[6, 19]
case3_case d[8, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 6, 17)
Save to S[6, 17]
case1_case1 s[7, 17]
case2_case3 s[6, 18]
case3_case d[9, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 6, 16)
Save to S[6, 16]
case1_case1 s[7, 16]
case2_case3 s[6, 17]
case3_case d[10, 15]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 15] = S[6, 16]
save to D[5, 14] = S[6, 16]
Q[9] = S[9, 16]
Q[8] = S[8, 16]
Q[7] = S[7, 16]
Q[6] = S[6, 16]
T[6, 20] = S[6, 20]
T[6, 19] = S[6, 19]
T[6, 18] = S[6, 18]
T[6, 17] = S[6, 17]
T[6, 16] = S[6, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (15, 9, 5, 15)
Save to S[9, 15]
case3_case FcurrentForest - F(rF)
case1_case2 = t[5, 15]
case2_case2 = q[9]
case3_case3 D[5, 17]
new Round C'
Right (15, 8, 5, 15)
Save to S[8, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 15]
case2_case2 = q[8]
case3_case3 D[5, 18]
new Round C'
Right (15, 7, 5, 15)
Save to S[7, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 15]
case2_case2 = q[7]
case3_case3 D[5, 19]
new Round C'
Right (15, 6, 5, 15)
Save to S[6, 15]
case3 = 0
case1_case1 = s[7, 15]
case2_case2 = q[6]
case3_case3 D[5, 15]
save to D[4, 15] = S[6, 15]
save to D[4, 14] = S[6, 15]
Q[9] = S[9, 15]
Q[8] = S[8, 15]
Q[7] = S[7, 15]
Q[6] = S[6, 15]
T[5, 15] = S[6, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (15, 9, 4, 14)
Save to S[9, 14]
case3_case FcurrentForest - F(rF)
case1_case2 = t[4, 14]
case2_case2 = q[9]
case3_case3 D[4, 17]
new Round C'
Right (15, 8, 4, 14)
Save to S[8, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 14]
case2_case2 = q[8]
case3_case3 D[4, 18]
new Round C'
Right (15, 7, 4, 14)
Save to S[7, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 14]
case2_case2 = q[7]
case3_case3 D[4, 19]
new Round C'
Right (15, 6, 4, 14)
Save to S[6, 14]
case3 = 0
case1_case1 = s[7, 14]
case2_case2 = q[6]
case3_case3 D[4, 15]
save to D[3, 15] = S[6, 14]
save to D[3, 14] = S[6, 14]
Q[9] = S[9, 14]
Q[8] = S[8, 14]
Q[7] = S[7, 14]
Q[6] = S[6, 14]
T[4, 14] = S[6, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (15, 9, 3, 13)
Save to S[9, 13]
case3_case FcurrentForest - F(rF)
case1_case2 = t[3, 13]
case2_case2 = q[9]
case3_case3 D[3, 17]
new Round C'
Right (15, 8, 3, 13)
Save to S[8, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 13]
case2_case2 = q[8]
case3_case3 D[3, 18]
new Round C'
Right (15, 7, 3, 13)
Save to S[7, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 13]
case2_case2 = q[7]
case3_case3 D[3, 19]
new Round C'
Right (15, 6, 3, 13)
Save to S[6, 13]
case3 = 0
case1_case1 = s[7, 13]
case2_case2 = q[6]
case3_case3 D[3, 15]
save to D[2, 15] = S[6, 13]
save to D[2, 14] = S[6, 13]
Q[9] = S[9, 13]
Q[8] = S[8, 13]
Q[7] = S[7, 13]
Q[6] = S[6, 13]
T[3, 13] = S[6, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (15, 9, 2, 12)
Save to S[9, 12]
case3_case FcurrentForest - F(rF)
case1_case2 = t[2, 12]
case2_case2 = q[9]
case3_case3 D[2, 17]
new Round C'
Right (15, 8, 2, 12)
Save to S[8, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 12]
case2_case2 = q[8]
case3_case3 D[2, 18]
new Round C'
Right (15, 7, 2, 12)
Save to S[7, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 12]
case2_case2 = q[7]
case3_case3 D[2, 19]
new Round C'
Right (15, 6, 2, 12)
Save to S[6, 12]
case3 = 0
case1_case1 = s[7, 12]
case2_case2 = q[6]
case3_case3 D[2, 15]
T[2, 12] = S[6, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (15, 9, 1, 21)
Save to S[9, 21]
case3_case FcurrentForest - F(rF)
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 17]
Right (15, 9, 1, 20)
Save to S[9, 20]
case1_case2 t[1, 20]
case2_case3 s[9, 21]
case3_case d[6, 17]
case3_case3 t[1, 21]
Right (15, 9, 1, 19)
Save to S[9, 19]
case1_case2 t[1, 19]
case2_case3 s[9, 20]
case3_case d[7, 17]
case3_case3 t[1, 20]
Right (15, 9, 1, 18)
Save to S[9, 18]
case1_case2 t[1, 18]
case2_case3 s[9, 19]
case3_case d[8, 17]
case3_case3 t[1, 19]
Right (15, 9, 1, 17)
Save to S[9, 17]
case1_case2 t[1, 17]
case2_case3 s[9, 18]
case3_case d[9, 17]
case3_case3 t[1, 18]
Right (15, 9, 1, 16)
Save to S[9, 16]
case1_case2 t[1, 16]
case2_case3 s[9, 17]
case3_case d[10, 17]
case3_case3 t[1, 17]
Right (15, 9, 1, 15)
Save to S[9, 15]
case1_case2 t[1, 15]
case2_case3 s[9, 16]
case3_case d[5, 17]
case3_case3 t[1, 21]
Right (15, 9, 1, 14)
Save to S[9, 14]
case1_case2 t[1, 14]
case2_case3 s[9, 15]
case3_case d[4, 17]
case3_case3 t[1, 21]
Right (15, 9, 1, 13)
Save to S[9, 13]
case1_case2 t[1, 13]
case2_case3 s[9, 14]
case3_case d[3, 17]
case3_case3 t[1, 21]
Right (15, 9, 1, 12)
Save to S[9, 12]
case1_case2 t[1, 12]
case2_case3 s[9, 13]
case3_case d[2, 17]
case3_case3 t[1, 21]
Right (15, 9, 1, 11)
Save to S[9, 11]
case1_case2 t[1, 11]
case2_case3 s[9, 12]
case3_case d[11, 17]
case3_case3 t[1, 12]
Right (15, 9, 1, 10)
Save to S[9, 10]
case1_case2 t[1, 10]
case2_case3 s[9, 11]
case3_case d[17, 17]
case3_case3 t[1, 11]
Right (15, 9, 1, 9)
Save to S[9, 9]
case1_case2 t[1, 9]
case2_case3 s[9, 10]
case3_case d[18, 17]
case3_case3 t[1, 10]
Right (15, 9, 1, 8)
Save to S[9, 8]
case1_case2 t[1, 8]
case2_case3 s[9, 9]
case3_case d[19, 17]
case3_case3 t[1, 9]
Right (15, 9, 1, 7)
Save to S[9, 7]
case1_case2 t[1, 7]
case2_case3 s[9, 8]
case3_case d[20, 17]
case3_case3 t[1, 8]
Right (15, 9, 1, 6)
Save to S[9, 6]
case1_case2 t[1, 6]
case2_case3 s[9, 7]
case3_case d[16, 17]
case3_case3 t[1, 11]
Right (15, 9, 1, 5)
Save to S[9, 5]
case1_case2 t[1, 5]
case2_case3 s[9, 6]
case3_case d[15, 17]
case3_case3 t[1, 11]
Right (15, 9, 1, 4)
Save to S[9, 4]
case1_case2 t[1, 4]
case2_case3 s[9, 5]
case3_case d[14, 17]
case3_case3 t[1, 11]
Right (15, 9, 1, 3)
Save to S[9, 3]
case1_case2 t[1, 3]
case2_case3 s[9, 4]
case3_case d[13, 17]
case3_case3 t[1, 11]
Right (15, 9, 1, 2)
Save to S[9, 2]
case1_case2 t[1, 2]
case2_case3 s[9, 3]
case3_case d[21, 17]
case3_case3 t[1, 3]
Right (15, 9, 1, 1)
Save to S[9, 1]
case1_case2 t[1, 1]
case2_case3 s[9, 2]
case3_case d[12, 17]
case3_case3 t[1, 11]
new Round C'
Right (15, 8, 1, 21)
Save to S[8, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 18]
Right (15, 8, 1, 20)
Save to S[8, 20]
case1_case1 s[9, 20]
case2_case3 s[8, 21]
case3_case d[6, 18]
case3_case1 s[9, 21]
Right (15, 8, 1, 19)
Save to S[8, 19]
case1_case1 s[9, 19]
case2_case3 s[8, 20]
case3_case d[7, 18]
case3_case1 s[9, 20]
Right (15, 8, 1, 18)
Save to S[8, 18]
case1_case1 s[9, 18]
case2_case3 s[8, 19]
case3_case d[8, 18]
case3_case1 s[9, 19]
Right (15, 8, 1, 17)
Save to S[8, 17]
case1_case1 s[9, 17]
case2_case3 s[8, 18]
case3_case d[9, 18]
case3_case1 s[9, 18]
Right (15, 8, 1, 16)
Save to S[8, 16]
case1_case1 s[9, 16]
case2_case3 s[8, 17]
case3_case d[10, 18]
case3_case1 s[9, 17]
Right (15, 8, 1, 15)
Save to S[8, 15]
case1_case1 s[9, 15]
case2_case3 s[8, 16]
case3_case d[5, 18]
case3_case1 s[9, 21]
Right (15, 8, 1, 14)
Save to S[8, 14]
case1_case1 s[9, 14]
case2_case3 s[8, 15]
case3_case d[4, 18]
case3_case1 s[9, 21]
Right (15, 8, 1, 13)
Save to S[8, 13]
case1_case1 s[9, 13]
case2_case3 s[8, 14]
case3_case d[3, 18]
case3_case1 s[9, 21]
Right (15, 8, 1, 12)
Save to S[8, 12]
case1_case1 s[9, 12]
case2_case3 s[8, 13]
case3_case d[2, 18]
case3_case1 s[9, 21]
Right (15, 8, 1, 11)
Save to S[8, 11]
case1_case1 s[9, 11]
case2_case3 s[8, 12]
case3_case d[11, 18]
case3_case1 s[9, 12]
Right (15, 8, 1, 10)
Save to S[8, 10]
case1_case1 s[9, 10]
case2_case3 s[8, 11]
case3_case d[17, 18]
case3_case1 s[9, 11]
Right (15, 8, 1, 9)
Save to S[8, 9]
case1_case1 s[9, 9]
case2_case3 s[8, 10]
case3_case d[18, 18]
case3_case1 s[9, 10]
Right (15, 8, 1, 8)
Save to S[8, 8]
case1_case1 s[9, 8]
case2_case3 s[8, 9]
case3_case d[19, 18]
case3_case1 s[9, 9]
Right (15, 8, 1, 7)
Save to S[8, 7]
case1_case1 s[9, 7]
case2_case3 s[8, 8]
case3_case d[20, 18]
case3_case1 s[9, 8]
Right (15, 8, 1, 6)
Save to S[8, 6]
case1_case1 s[9, 6]
case2_case3 s[8, 7]
case3_case d[16, 18]
case3_case1 s[9, 11]
Right (15, 8, 1, 5)
Save to S[8, 5]
case1_case1 s[9, 5]
case2_case3 s[8, 6]
case3_case d[15, 18]
case3_case1 s[9, 11]
Right (15, 8, 1, 4)
Save to S[8, 4]
case1_case1 s[9, 4]
case2_case3 s[8, 5]
case3_case d[14, 18]
case3_case1 s[9, 11]
Right (15, 8, 1, 3)
Save to S[8, 3]
case1_case1 s[9, 3]
case2_case3 s[8, 4]
case3_case d[13, 18]
case3_case1 s[9, 11]
Right (15, 8, 1, 2)
Save to S[8, 2]
case1_case1 s[9, 2]
case2_case3 s[8, 3]
case3_case d[21, 18]
case3_case1 s[9, 3]
Right (15, 8, 1, 1)
Save to S[8, 1]
case1_case1 s[9, 1]
case2_case3 s[8, 2]
case3_case d[12, 18]
case3_case1 s[9, 11]
new Round C'
Right (15, 7, 1, 21)
Save to S[7, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 19]
Right (15, 7, 1, 20)
Save to S[7, 20]
case1_case1 s[8, 20]
case2_case3 s[7, 21]
case3_case d[6, 19]
case3_case1 s[8, 21]
Right (15, 7, 1, 19)
Save to S[7, 19]
case1_case1 s[8, 19]
case2_case3 s[7, 20]
case3_case d[7, 19]
case3_case1 s[8, 20]
Right (15, 7, 1, 18)
Save to S[7, 18]
case1_case1 s[8, 18]
case2_case3 s[7, 19]
case3_case d[8, 19]
case3_case1 s[8, 19]
Right (15, 7, 1, 17)
Save to S[7, 17]
case1_case1 s[8, 17]
case2_case3 s[7, 18]
case3_case d[9, 19]
case3_case1 s[8, 18]
Right (15, 7, 1, 16)
Save to S[7, 16]
case1_case1 s[8, 16]
case2_case3 s[7, 17]
case3_case d[10, 19]
case3_case1 s[8, 17]
Right (15, 7, 1, 15)
Save to S[7, 15]
case1_case1 s[8, 15]
case2_case3 s[7, 16]
case3_case d[5, 19]
case3_case1 s[8, 21]
Right (15, 7, 1, 14)
Save to S[7, 14]
case1_case1 s[8, 14]
case2_case3 s[7, 15]
case3_case d[4, 19]
case3_case1 s[8, 21]
Right (15, 7, 1, 13)
Save to S[7, 13]
case1_case1 s[8, 13]
case2_case3 s[7, 14]
case3_case d[3, 19]
case3_case1 s[8, 21]
Right (15, 7, 1, 12)
Save to S[7, 12]
case1_case1 s[8, 12]
case2_case3 s[7, 13]
case3_case d[2, 19]
case3_case1 s[8, 21]
Right (15, 7, 1, 11)
Save to S[7, 11]
case1_case1 s[8, 11]
case2_case3 s[7, 12]
case3_case d[11, 19]
case3_case1 s[8, 12]
Right (15, 7, 1, 10)
Save to S[7, 10]
case1_case1 s[8, 10]
case2_case3 s[7, 11]
case3_case d[17, 19]
case3_case1 s[8, 11]
Right (15, 7, 1, 9)
Save to S[7, 9]
case1_case1 s[8, 9]
case2_case3 s[7, 10]
case3_case d[18, 19]
case3_case1 s[8, 10]
Right (15, 7, 1, 8)
Save to S[7, 8]
case1_case1 s[8, 8]
case2_case3 s[7, 9]
case3_case d[19, 19]
case3_case1 s[8, 9]
Right (15, 7, 1, 7)
Save to S[7, 7]
case1_case1 s[8, 7]
case2_case3 s[7, 8]
case3_case d[20, 19]
case3_case1 s[8, 8]
Right (15, 7, 1, 6)
Save to S[7, 6]
case1_case1 s[8, 6]
case2_case3 s[7, 7]
case3_case d[16, 19]
case3_case1 s[8, 11]
Right (15, 7, 1, 5)
Save to S[7, 5]
case1_case1 s[8, 5]
case2_case3 s[7, 6]
case3_case d[15, 19]
case3_case1 s[8, 11]
Right (15, 7, 1, 4)
Save to S[7, 4]
case1_case1 s[8, 4]
case2_case3 s[7, 5]
case3_case d[14, 19]
case3_case1 s[8, 11]
Right (15, 7, 1, 3)
Save to S[7, 3]
case1_case1 s[8, 3]
case2_case3 s[7, 4]
case3_case d[13, 19]
case3_case1 s[8, 11]
Right (15, 7, 1, 2)
Save to S[7, 2]
case1_case1 s[8, 2]
case2_case3 s[7, 3]
case3_case d[21, 19]
case3_case1 s[8, 3]
Right (15, 7, 1, 1)
Save to S[7, 1]
case1_case1 s[8, 1]
case2_case3 s[7, 2]
case3_case d[12, 19]
case3_case1 s[8, 11]
new Round C'
Right (15, 6, 1, 21)
Save to S[6, 21]
case3 = 0
case1_case1 = s[7, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 15]
Right (15, 6, 1, 20)
Save to S[6, 20]
case1_case1 s[7, 20]
case2_case3 s[6, 21]
case3_case d[6, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 19)
Save to S[6, 19]
case1_case1 s[7, 19]
case2_case3 s[6, 20]
case3_case d[7, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 18)
Save to S[6, 18]
case1_case1 s[7, 18]
case2_case3 s[6, 19]
case3_case d[8, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 17)
Save to S[6, 17]
case1_case1 s[7, 17]
case2_case3 s[6, 18]
case3_case d[9, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 16)
Save to S[6, 16]
case1_case1 s[7, 16]
case2_case3 s[6, 17]
case3_case d[10, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 15)
Save to S[6, 15]
case1_case1 s[7, 15]
case2_case3 s[6, 16]
case3_case d[5, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 14)
Save to S[6, 14]
case1_case1 s[7, 14]
case2_case3 s[6, 15]
case3_case d[4, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 13)
Save to S[6, 13]
case1_case1 s[7, 13]
case2_case3 s[6, 14]
case3_case d[3, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 12)
Save to S[6, 12]
case1_case1 s[7, 12]
case2_case3 s[6, 13]
case3_case d[2, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 11)
Save to S[6, 11]
case1_case1 s[7, 11]
case2_case3 s[6, 12]
case3_case d[11, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 10)
Save to S[6, 10]
case1_case1 s[7, 10]
case2_case3 s[6, 11]
case3_case d[17, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 9)
Save to S[6, 9]
case1_case1 s[7, 9]
case2_case3 s[6, 10]
case3_case d[18, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 8)
Save to S[6, 8]
case1_case1 s[7, 8]
case2_case3 s[6, 9]
case3_case d[19, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 7)
Save to S[6, 7]
case1_case1 s[7, 7]
case2_case3 s[6, 8]
case3_case d[20, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 6)
Save to S[6, 6]
case1_case1 s[7, 6]
case2_case3 s[6, 7]
case3_case d[16, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 5)
Save to S[6, 5]
case1_case1 s[7, 5]
case2_case3 s[6, 6]
case3_case d[15, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 4)
Save to S[6, 4]
case1_case1 s[7, 4]
case2_case3 s[6, 5]
case3_case d[14, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 3)
Save to S[6, 3]
case1_case1 s[7, 3]
case2_case3 s[6, 4]
case3_case d[13, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 2)
Save to S[6, 2]
case1_case1 s[7, 2]
case2_case3 s[6, 3]
case3_case d[21, 15]
case3_case2 GcurrentForestCost - G(rG) 
Right (15, 6, 1, 1)
Save to S[6, 1]
case1_case1 s[7, 1]
case2_case3 s[6, 2]
case3_case d[12, 15]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 15] = S[6, 1]
save to D[0, 14] = S[6, 1]
Q[9] = S[9, 1]
Q[8] = S[8, 1]
Q[7] = S[7, 1]
Q[6] = S[6, 1]
T[1, 21] = S[6, 21]
T[1, 20] = S[6, 20]
T[1, 19] = S[6, 19]
T[1, 18] = S[6, 18]
T[1, 17] = S[6, 17]
T[1, 16] = S[6, 16]
T[1, 15] = S[6, 15]
T[1, 14] = S[6, 14]
T[1, 13] = S[6, 13]
T[1, 12] = S[6, 12]
T[1, 11] = S[6, 11]
T[1, 10] = S[6, 10]
T[1, 9] = S[6, 9]
T[1, 8] = S[6, 8]
T[1, 7] = S[6, 7]
T[1, 6] = S[6, 6]
T[1, 5] = S[6, 5]
T[1, 4] = S[6, 4]
T[1, 3] = S[6, 3]
T[1, 2] = S[6, 2]
T[1, 1] = S[6, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (15, 9, 0, 0)
Save to S[9, 0]
case3_case FcurrentForest - F(rF)
case1_case2 = t[0, 0]
case2_case2 = q[9]
case3_case3 D[0, 17]
new Round C'
Right (15, 8, 0, 0)
Save to S[8, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 0]
case2_case2 = q[8]
case3_case3 D[0, 18]
new Round C'
Right (15, 7, 0, 0)
Save to S[7, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 0]
case2_case2 = q[7]
case3_case3 D[0, 19]
new Round C'
Right (15, 6, 0, 0)
Save to S[6, 0]
case3 = 0
case1_case1 = s[7, 0]
case2_case2 = q[6]
case3_case3 D[0, 15]
T[0, 0] = S[6, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (14, 5, 21, 2)
Save to S[5, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 14]
T[21, 2] = S[5, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (14, 5, 20, 7)
Save to S[5, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 14]
T[20, 7] = S[5, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (14, 5, 19, 8)
Save to S[5, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 14]
T[19, 8] = S[5, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (14, 5, 18, 9)
Save to S[5, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 14]
T[18, 9] = S[5, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (14, 5, 17, 10)
Save to S[5, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 14]
Right (14, 5, 17, 9)
Save to S[5, 9]
case1_case2 t[17, 9]
case2_case3 s[5, 10]
case3_case d[18, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 17, 8)
Save to S[5, 8]
case1_case2 t[17, 8]
case2_case3 s[5, 9]
case3_case d[19, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 17, 7)
Save to S[5, 7]
case1_case2 t[17, 7]
case2_case3 s[5, 8]
case3_case d[20, 14]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 13] = S[5, 7]
Q[5] = S[5, 7]
T[17, 10] = S[5, 10]
T[17, 9] = S[5, 9]
T[17, 8] = S[5, 8]
T[17, 7] = S[5, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (14, 5, 16, 6)
Save to S[5, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[5]
case3_case3 D[16, 14]
save to D[15, 13] = S[5, 6]
Q[5] = S[5, 6]
T[16, 6] = S[5, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (14, 5, 15, 5)
Save to S[5, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[5]
case3_case3 D[15, 14]
save to D[14, 13] = S[5, 5]
Q[5] = S[5, 5]
T[15, 5] = S[5, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (14, 5, 14, 4)
Save to S[5, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[5]
case3_case3 D[14, 14]
save to D[13, 13] = S[5, 4]
Q[5] = S[5, 4]
T[14, 4] = S[5, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (14, 5, 13, 3)
Save to S[5, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[5]
case3_case3 D[13, 14]
Right (14, 5, 13, 2)
Save to S[5, 2]
case1_case2 t[13, 2]
case2_case3 s[5, 3]
case3_case d[21, 14]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 13] = S[5, 2]
Q[5] = S[5, 2]
T[13, 3] = S[5, 3]
T[13, 2] = S[5, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (14, 5, 12, 1)
Save to S[5, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[5]
case3_case3 D[12, 14]
T[12, 1] = S[5, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (14, 5, 11, 11)
Save to S[5, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 14]
T[11, 11] = S[5, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (14, 5, 10, 16)
Save to S[5, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 14]
T[10, 16] = S[5, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (14, 5, 9, 17)
Save to S[5, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 14]
T[9, 17] = S[5, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (14, 5, 8, 18)
Save to S[5, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 14]
T[8, 18] = S[5, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (14, 5, 7, 19)
Save to S[5, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 14]
T[7, 19] = S[5, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (14, 5, 6, 20)
Save to S[5, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 14]
Right (14, 5, 6, 19)
Save to S[5, 19]
case1_case2 t[6, 19]
case2_case3 s[5, 20]
case3_case d[7, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 6, 18)
Save to S[5, 18]
case1_case2 t[6, 18]
case2_case3 s[5, 19]
case3_case d[8, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 6, 17)
Save to S[5, 17]
case1_case2 t[6, 17]
case2_case3 s[5, 18]
case3_case d[9, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 6, 16)
Save to S[5, 16]
case1_case2 t[6, 16]
case2_case3 s[5, 17]
case3_case d[10, 14]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 13] = S[5, 16]
Q[5] = S[5, 16]
T[6, 20] = S[5, 20]
T[6, 19] = S[5, 19]
T[6, 18] = S[5, 18]
T[6, 17] = S[5, 17]
T[6, 16] = S[5, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (14, 5, 5, 15)
Save to S[5, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[5]
case3_case3 D[5, 14]
save to D[4, 13] = S[5, 15]
Q[5] = S[5, 15]
T[5, 15] = S[5, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (14, 5, 4, 14)
Save to S[5, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[5]
case3_case3 D[4, 14]
save to D[3, 13] = S[5, 14]
Q[5] = S[5, 14]
T[4, 14] = S[5, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (14, 5, 3, 13)
Save to S[5, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[5]
case3_case3 D[3, 14]
save to D[2, 13] = S[5, 13]
Q[5] = S[5, 13]
T[3, 13] = S[5, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (14, 5, 2, 12)
Save to S[5, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[5]
case3_case3 D[2, 14]
T[2, 12] = S[5, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (14, 5, 1, 21)
Save to S[5, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 14]
Right (14, 5, 1, 20)
Save to S[5, 20]
case1_case2 t[1, 20]
case2_case3 s[5, 21]
case3_case d[6, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 19)
Save to S[5, 19]
case1_case2 t[1, 19]
case2_case3 s[5, 20]
case3_case d[7, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 18)
Save to S[5, 18]
case1_case2 t[1, 18]
case2_case3 s[5, 19]
case3_case d[8, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 17)
Save to S[5, 17]
case1_case2 t[1, 17]
case2_case3 s[5, 18]
case3_case d[9, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 16)
Save to S[5, 16]
case1_case2 t[1, 16]
case2_case3 s[5, 17]
case3_case d[10, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 15)
Save to S[5, 15]
case1_case2 t[1, 15]
case2_case3 s[5, 16]
case3_case d[5, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 14)
Save to S[5, 14]
case1_case2 t[1, 14]
case2_case3 s[5, 15]
case3_case d[4, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 13)
Save to S[5, 13]
case1_case2 t[1, 13]
case2_case3 s[5, 14]
case3_case d[3, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 12)
Save to S[5, 12]
case1_case2 t[1, 12]
case2_case3 s[5, 13]
case3_case d[2, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 11)
Save to S[5, 11]
case1_case2 t[1, 11]
case2_case3 s[5, 12]
case3_case d[11, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 10)
Save to S[5, 10]
case1_case2 t[1, 10]
case2_case3 s[5, 11]
case3_case d[17, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 9)
Save to S[5, 9]
case1_case2 t[1, 9]
case2_case3 s[5, 10]
case3_case d[18, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 8)
Save to S[5, 8]
case1_case2 t[1, 8]
case2_case3 s[5, 9]
case3_case d[19, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 7)
Save to S[5, 7]
case1_case2 t[1, 7]
case2_case3 s[5, 8]
case3_case d[20, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 6)
Save to S[5, 6]
case1_case2 t[1, 6]
case2_case3 s[5, 7]
case3_case d[16, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 5)
Save to S[5, 5]
case1_case2 t[1, 5]
case2_case3 s[5, 6]
case3_case d[15, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 4)
Save to S[5, 4]
case1_case2 t[1, 4]
case2_case3 s[5, 5]
case3_case d[14, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 3)
Save to S[5, 3]
case1_case2 t[1, 3]
case2_case3 s[5, 4]
case3_case d[13, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 2)
Save to S[5, 2]
case1_case2 t[1, 2]
case2_case3 s[5, 3]
case3_case d[21, 14]
case3_case2 GcurrentForestCost - G(rG) 
Right (14, 5, 1, 1)
Save to S[5, 1]
case1_case2 t[1, 1]
case2_case3 s[5, 2]
case3_case d[12, 14]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 13] = S[5, 1]
Q[5] = S[5, 1]
T[1, 21] = S[5, 21]
T[1, 20] = S[5, 20]
T[1, 19] = S[5, 19]
T[1, 18] = S[5, 18]
T[1, 17] = S[5, 17]
T[1, 16] = S[5, 16]
T[1, 15] = S[5, 15]
T[1, 14] = S[5, 14]
T[1, 13] = S[5, 13]
T[1, 12] = S[5, 12]
T[1, 11] = S[5, 11]
T[1, 10] = S[5, 10]
T[1, 9] = S[5, 9]
T[1, 8] = S[5, 8]
T[1, 7] = S[5, 7]
T[1, 6] = S[5, 6]
T[1, 5] = S[5, 5]
T[1, 4] = S[5, 4]
T[1, 3] = S[5, 3]
T[1, 2] = S[5, 2]
T[1, 1] = S[5, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (14, 5, 0, 0)
Save to S[5, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[5]
case3_case3 D[0, 14]
T[0, 0] = S[5, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (13, 4, 21, 2)
Save to S[4, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 13]
T[21, 2] = S[4, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (13, 4, 20, 7)
Save to S[4, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 13]
T[20, 7] = S[4, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (13, 4, 19, 8)
Save to S[4, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 13]
T[19, 8] = S[4, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (13, 4, 18, 9)
Save to S[4, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 13]
T[18, 9] = S[4, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (13, 4, 17, 10)
Save to S[4, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 13]
Right (13, 4, 17, 9)
Save to S[4, 9]
case1_case2 t[17, 9]
case2_case3 s[4, 10]
case3_case d[18, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 17, 8)
Save to S[4, 8]
case1_case2 t[17, 8]
case2_case3 s[4, 9]
case3_case d[19, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 17, 7)
Save to S[4, 7]
case1_case2 t[17, 7]
case2_case3 s[4, 8]
case3_case d[20, 13]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 12] = S[4, 7]
Q[4] = S[4, 7]
T[17, 10] = S[4, 10]
T[17, 9] = S[4, 9]
T[17, 8] = S[4, 8]
T[17, 7] = S[4, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (13, 4, 16, 6)
Save to S[4, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[4]
case3_case3 D[16, 13]
save to D[15, 12] = S[4, 6]
Q[4] = S[4, 6]
T[16, 6] = S[4, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (13, 4, 15, 5)
Save to S[4, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[4]
case3_case3 D[15, 13]
save to D[14, 12] = S[4, 5]
Q[4] = S[4, 5]
T[15, 5] = S[4, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (13, 4, 14, 4)
Save to S[4, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[4]
case3_case3 D[14, 13]
save to D[13, 12] = S[4, 4]
Q[4] = S[4, 4]
T[14, 4] = S[4, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (13, 4, 13, 3)
Save to S[4, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[4]
case3_case3 D[13, 13]
Right (13, 4, 13, 2)
Save to S[4, 2]
case1_case2 t[13, 2]
case2_case3 s[4, 3]
case3_case d[21, 13]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 12] = S[4, 2]
Q[4] = S[4, 2]
T[13, 3] = S[4, 3]
T[13, 2] = S[4, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (13, 4, 12, 1)
Save to S[4, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[4]
case3_case3 D[12, 13]
T[12, 1] = S[4, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (13, 4, 11, 11)
Save to S[4, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 13]
T[11, 11] = S[4, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (13, 4, 10, 16)
Save to S[4, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 13]
T[10, 16] = S[4, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (13, 4, 9, 17)
Save to S[4, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 13]
T[9, 17] = S[4, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (13, 4, 8, 18)
Save to S[4, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 13]
T[8, 18] = S[4, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (13, 4, 7, 19)
Save to S[4, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 13]
T[7, 19] = S[4, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (13, 4, 6, 20)
Save to S[4, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 13]
Right (13, 4, 6, 19)
Save to S[4, 19]
case1_case2 t[6, 19]
case2_case3 s[4, 20]
case3_case d[7, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 6, 18)
Save to S[4, 18]
case1_case2 t[6, 18]
case2_case3 s[4, 19]
case3_case d[8, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 6, 17)
Save to S[4, 17]
case1_case2 t[6, 17]
case2_case3 s[4, 18]
case3_case d[9, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 6, 16)
Save to S[4, 16]
case1_case2 t[6, 16]
case2_case3 s[4, 17]
case3_case d[10, 13]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 12] = S[4, 16]
Q[4] = S[4, 16]
T[6, 20] = S[4, 20]
T[6, 19] = S[4, 19]
T[6, 18] = S[4, 18]
T[6, 17] = S[4, 17]
T[6, 16] = S[4, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (13, 4, 5, 15)
Save to S[4, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[4]
case3_case3 D[5, 13]
save to D[4, 12] = S[4, 15]
Q[4] = S[4, 15]
T[5, 15] = S[4, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (13, 4, 4, 14)
Save to S[4, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[4]
case3_case3 D[4, 13]
save to D[3, 12] = S[4, 14]
Q[4] = S[4, 14]
T[4, 14] = S[4, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (13, 4, 3, 13)
Save to S[4, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[4]
case3_case3 D[3, 13]
save to D[2, 12] = S[4, 13]
Q[4] = S[4, 13]
T[3, 13] = S[4, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (13, 4, 2, 12)
Save to S[4, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[4]
case3_case3 D[2, 13]
T[2, 12] = S[4, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (13, 4, 1, 21)
Save to S[4, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 13]
Right (13, 4, 1, 20)
Save to S[4, 20]
case1_case2 t[1, 20]
case2_case3 s[4, 21]
case3_case d[6, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 19)
Save to S[4, 19]
case1_case2 t[1, 19]
case2_case3 s[4, 20]
case3_case d[7, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 18)
Save to S[4, 18]
case1_case2 t[1, 18]
case2_case3 s[4, 19]
case3_case d[8, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 17)
Save to S[4, 17]
case1_case2 t[1, 17]
case2_case3 s[4, 18]
case3_case d[9, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 16)
Save to S[4, 16]
case1_case2 t[1, 16]
case2_case3 s[4, 17]
case3_case d[10, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 15)
Save to S[4, 15]
case1_case2 t[1, 15]
case2_case3 s[4, 16]
case3_case d[5, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 14)
Save to S[4, 14]
case1_case2 t[1, 14]
case2_case3 s[4, 15]
case3_case d[4, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 13)
Save to S[4, 13]
case1_case2 t[1, 13]
case2_case3 s[4, 14]
case3_case d[3, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 12)
Save to S[4, 12]
case1_case2 t[1, 12]
case2_case3 s[4, 13]
case3_case d[2, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 11)
Save to S[4, 11]
case1_case2 t[1, 11]
case2_case3 s[4, 12]
case3_case d[11, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 10)
Save to S[4, 10]
case1_case2 t[1, 10]
case2_case3 s[4, 11]
case3_case d[17, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 9)
Save to S[4, 9]
case1_case2 t[1, 9]
case2_case3 s[4, 10]
case3_case d[18, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 8)
Save to S[4, 8]
case1_case2 t[1, 8]
case2_case3 s[4, 9]
case3_case d[19, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 7)
Save to S[4, 7]
case1_case2 t[1, 7]
case2_case3 s[4, 8]
case3_case d[20, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 6)
Save to S[4, 6]
case1_case2 t[1, 6]
case2_case3 s[4, 7]
case3_case d[16, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 5)
Save to S[4, 5]
case1_case2 t[1, 5]
case2_case3 s[4, 6]
case3_case d[15, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 4)
Save to S[4, 4]
case1_case2 t[1, 4]
case2_case3 s[4, 5]
case3_case d[14, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 3)
Save to S[4, 3]
case1_case2 t[1, 3]
case2_case3 s[4, 4]
case3_case d[13, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 2)
Save to S[4, 2]
case1_case2 t[1, 2]
case2_case3 s[4, 3]
case3_case d[21, 13]
case3_case2 GcurrentForestCost - G(rG) 
Right (13, 4, 1, 1)
Save to S[4, 1]
case1_case2 t[1, 1]
case2_case3 s[4, 2]
case3_case d[12, 13]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 12] = S[4, 1]
Q[4] = S[4, 1]
T[1, 21] = S[4, 21]
T[1, 20] = S[4, 20]
T[1, 19] = S[4, 19]
T[1, 18] = S[4, 18]
T[1, 17] = S[4, 17]
T[1, 16] = S[4, 16]
T[1, 15] = S[4, 15]
T[1, 14] = S[4, 14]
T[1, 13] = S[4, 13]
T[1, 12] = S[4, 12]
T[1, 11] = S[4, 11]
T[1, 10] = S[4, 10]
T[1, 9] = S[4, 9]
T[1, 8] = S[4, 8]
T[1, 7] = S[4, 7]
T[1, 6] = S[4, 6]
T[1, 5] = S[4, 5]
T[1, 4] = S[4, 4]
T[1, 3] = S[4, 3]
T[1, 2] = S[4, 2]
T[1, 1] = S[4, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (13, 4, 0, 0)
Save to S[4, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[4]
case3_case3 D[0, 13]
T[0, 0] = S[4, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (12, 3, 21, 2)
Save to S[3, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 12]
T[21, 2] = S[3, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (12, 3, 20, 7)
Save to S[3, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 12]
T[20, 7] = S[3, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (12, 3, 19, 8)
Save to S[3, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 12]
T[19, 8] = S[3, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (12, 3, 18, 9)
Save to S[3, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 12]
T[18, 9] = S[3, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (12, 3, 17, 10)
Save to S[3, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 12]
Right (12, 3, 17, 9)
Save to S[3, 9]
case1_case2 t[17, 9]
case2_case3 s[3, 10]
case3_case d[18, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 17, 8)
Save to S[3, 8]
case1_case2 t[17, 8]
case2_case3 s[3, 9]
case3_case d[19, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 17, 7)
Save to S[3, 7]
case1_case2 t[17, 7]
case2_case3 s[3, 8]
case3_case d[20, 12]
case3_case2 GcurrentForestCost - G(rG) 
Q[3] = S[3, 7]
T[17, 10] = S[3, 10]
T[17, 9] = S[3, 9]
T[17, 8] = S[3, 8]
T[17, 7] = S[3, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (12, 3, 16, 6)
Save to S[3, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[3]
case3_case3 D[16, 12]
Q[3] = S[3, 6]
T[16, 6] = S[3, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (12, 3, 15, 5)
Save to S[3, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[3]
case3_case3 D[15, 12]
Q[3] = S[3, 5]
T[15, 5] = S[3, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (12, 3, 14, 4)
Save to S[3, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[3]
case3_case3 D[14, 12]
Q[3] = S[3, 4]
T[14, 4] = S[3, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (12, 3, 13, 3)
Save to S[3, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[3]
case3_case3 D[13, 12]
Right (12, 3, 13, 2)
Save to S[3, 2]
case1_case2 t[13, 2]
case2_case3 s[3, 3]
case3_case d[21, 12]
case3_case2 GcurrentForestCost - G(rG) 
Q[3] = S[3, 2]
T[13, 3] = S[3, 3]
T[13, 2] = S[3, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (12, 3, 12, 1)
Save to S[3, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[3]
case3_case3 D[12, 12]
T[12, 1] = S[3, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (12, 3, 11, 11)
Save to S[3, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 12]
T[11, 11] = S[3, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (12, 3, 10, 16)
Save to S[3, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 12]
T[10, 16] = S[3, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (12, 3, 9, 17)
Save to S[3, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 12]
T[9, 17] = S[3, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (12, 3, 8, 18)
Save to S[3, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 12]
T[8, 18] = S[3, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (12, 3, 7, 19)
Save to S[3, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 12]
T[7, 19] = S[3, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (12, 3, 6, 20)
Save to S[3, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 12]
Right (12, 3, 6, 19)
Save to S[3, 19]
case1_case2 t[6, 19]
case2_case3 s[3, 20]
case3_case d[7, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 6, 18)
Save to S[3, 18]
case1_case2 t[6, 18]
case2_case3 s[3, 19]
case3_case d[8, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 6, 17)
Save to S[3, 17]
case1_case2 t[6, 17]
case2_case3 s[3, 18]
case3_case d[9, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 6, 16)
Save to S[3, 16]
case1_case2 t[6, 16]
case2_case3 s[3, 17]
case3_case d[10, 12]
case3_case2 GcurrentForestCost - G(rG) 
Q[3] = S[3, 16]
T[6, 20] = S[3, 20]
T[6, 19] = S[3, 19]
T[6, 18] = S[3, 18]
T[6, 17] = S[3, 17]
T[6, 16] = S[3, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (12, 3, 5, 15)
Save to S[3, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[3]
case3_case3 D[5, 12]
Q[3] = S[3, 15]
T[5, 15] = S[3, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (12, 3, 4, 14)
Save to S[3, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[3]
case3_case3 D[4, 12]
Q[3] = S[3, 14]
T[4, 14] = S[3, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (12, 3, 3, 13)
Save to S[3, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[3]
case3_case3 D[3, 12]
Q[3] = S[3, 13]
T[3, 13] = S[3, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (12, 3, 2, 12)
Save to S[3, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[3]
case3_case3 D[2, 12]
T[2, 12] = S[3, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (12, 3, 1, 21)
Save to S[3, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 12]
Right (12, 3, 1, 20)
Save to S[3, 20]
case1_case2 t[1, 20]
case2_case3 s[3, 21]
case3_case d[6, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 19)
Save to S[3, 19]
case1_case2 t[1, 19]
case2_case3 s[3, 20]
case3_case d[7, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 18)
Save to S[3, 18]
case1_case2 t[1, 18]
case2_case3 s[3, 19]
case3_case d[8, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 17)
Save to S[3, 17]
case1_case2 t[1, 17]
case2_case3 s[3, 18]
case3_case d[9, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 16)
Save to S[3, 16]
case1_case2 t[1, 16]
case2_case3 s[3, 17]
case3_case d[10, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 15)
Save to S[3, 15]
case1_case2 t[1, 15]
case2_case3 s[3, 16]
case3_case d[5, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 14)
Save to S[3, 14]
case1_case2 t[1, 14]
case2_case3 s[3, 15]
case3_case d[4, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 13)
Save to S[3, 13]
case1_case2 t[1, 13]
case2_case3 s[3, 14]
case3_case d[3, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 12)
Save to S[3, 12]
case1_case2 t[1, 12]
case2_case3 s[3, 13]
case3_case d[2, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 11)
Save to S[3, 11]
case1_case2 t[1, 11]
case2_case3 s[3, 12]
case3_case d[11, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 10)
Save to S[3, 10]
case1_case2 t[1, 10]
case2_case3 s[3, 11]
case3_case d[17, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 9)
Save to S[3, 9]
case1_case2 t[1, 9]
case2_case3 s[3, 10]
case3_case d[18, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 8)
Save to S[3, 8]
case1_case2 t[1, 8]
case2_case3 s[3, 9]
case3_case d[19, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 7)
Save to S[3, 7]
case1_case2 t[1, 7]
case2_case3 s[3, 8]
case3_case d[20, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 6)
Save to S[3, 6]
case1_case2 t[1, 6]
case2_case3 s[3, 7]
case3_case d[16, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 5)
Save to S[3, 5]
case1_case2 t[1, 5]
case2_case3 s[3, 6]
case3_case d[15, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 4)
Save to S[3, 4]
case1_case2 t[1, 4]
case2_case3 s[3, 5]
case3_case d[14, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 3)
Save to S[3, 3]
case1_case2 t[1, 3]
case2_case3 s[3, 4]
case3_case d[13, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 2)
Save to S[3, 2]
case1_case2 t[1, 2]
case2_case3 s[3, 3]
case3_case d[21, 12]
case3_case2 GcurrentForestCost - G(rG) 
Right (12, 3, 1, 1)
Save to S[3, 1]
case1_case2 t[1, 1]
case2_case3 s[3, 2]
case3_case d[12, 12]
case3_case2 GcurrentForestCost - G(rG) 
Q[3] = S[3, 1]
T[1, 21] = S[3, 21]
T[1, 20] = S[3, 20]
T[1, 19] = S[3, 19]
T[1, 18] = S[3, 18]
T[1, 17] = S[3, 17]
T[1, 16] = S[3, 16]
T[1, 15] = S[3, 15]
T[1, 14] = S[3, 14]
T[1, 13] = S[3, 13]
T[1, 12] = S[3, 12]
T[1, 11] = S[3, 11]
T[1, 10] = S[3, 10]
T[1, 9] = S[3, 9]
T[1, 8] = S[3, 8]
T[1, 7] = S[3, 7]
T[1, 6] = S[3, 6]
T[1, 5] = S[3, 5]
T[1, 4] = S[3, 4]
T[1, 3] = S[3, 3]
T[1, 2] = S[3, 2]
T[1, 1] = S[3, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (12, 3, 0, 0)
Save to S[3, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[3]
case3_case3 D[0, 12]
T[0, 0] = S[3, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (11, 2, 21, 2)
Save to S[2, 2]
case3_case FcurrentForest - F(rF)
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 20]
new Round C'
Right (11, 1, 21, 2)
Save to S[1, 2]
case3 = 0
case1_case1 = s[2, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 11]
T[21, 2] = S[1, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (11, 2, 20, 7)
Save to S[2, 7]
case3_case FcurrentForest - F(rF)
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 20]
new Round C'
Right (11, 1, 20, 7)
Save to S[1, 7]
case3 = 0
case1_case1 = s[2, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 11]
T[20, 7] = S[1, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (11, 2, 19, 8)
Save to S[2, 8]
case3_case FcurrentForest - F(rF)
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 20]
new Round C'
Right (11, 1, 19, 8)
Save to S[1, 8]
case3 = 0
case1_case1 = s[2, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 11]
T[19, 8] = S[1, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (11, 2, 18, 9)
Save to S[2, 9]
case3_case FcurrentForest - F(rF)
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 20]
new Round C'
Right (11, 1, 18, 9)
Save to S[1, 9]
case3 = 0
case1_case1 = s[2, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 11]
T[18, 9] = S[1, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (11, 2, 17, 10)
Save to S[2, 10]
case3_case FcurrentForest - F(rF)
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 20]
Right (11, 2, 17, 9)
Save to S[2, 9]
case1_case2 t[17, 9]
case2_case3 s[2, 10]
case3_case d[18, 20]
case3_case3 t[17, 10]
Right (11, 2, 17, 8)
Save to S[2, 8]
case1_case2 t[17, 8]
case2_case3 s[2, 9]
case3_case d[19, 20]
case3_case3 t[17, 9]
Right (11, 2, 17, 7)
Save to S[2, 7]
case1_case2 t[17, 7]
case2_case3 s[2, 8]
case3_case d[20, 20]
case3_case3 t[17, 8]
new Round C'
Right (11, 1, 17, 10)
Save to S[1, 10]
case3 = 0
case1_case1 = s[2, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 11]
Right (11, 1, 17, 9)
Save to S[1, 9]
case1_case1 s[2, 9]
case2_case3 s[1, 10]
case3_case d[18, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 17, 8)
Save to S[1, 8]
case1_case1 s[2, 8]
case2_case3 s[1, 9]
case3_case d[19, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 17, 7)
Save to S[1, 7]
case1_case1 s[2, 7]
case2_case3 s[1, 8]
case3_case d[20, 11]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 11] = S[1, 7]
Q[2] = S[2, 7]
Q[1] = S[1, 7]
T[17, 10] = S[1, 10]
T[17, 9] = S[1, 9]
T[17, 8] = S[1, 8]
T[17, 7] = S[1, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (11, 2, 16, 6)
Save to S[2, 6]
case3_case FcurrentForest - F(rF)
case1_case2 = t[16, 6]
case2_case2 = q[2]
case3_case3 D[16, 20]
new Round C'
Right (11, 1, 16, 6)
Save to S[1, 6]
case3 = 0
case1_case1 = s[2, 6]
case2_case2 = q[1]
case3_case3 D[16, 11]
save to D[15, 11] = S[1, 6]
Q[2] = S[2, 6]
Q[1] = S[1, 6]
T[16, 6] = S[1, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (11, 2, 15, 5)
Save to S[2, 5]
case3_case FcurrentForest - F(rF)
case1_case2 = t[15, 5]
case2_case2 = q[2]
case3_case3 D[15, 20]
new Round C'
Right (11, 1, 15, 5)
Save to S[1, 5]
case3 = 0
case1_case1 = s[2, 5]
case2_case2 = q[1]
case3_case3 D[15, 11]
save to D[14, 11] = S[1, 5]
Q[2] = S[2, 5]
Q[1] = S[1, 5]
T[15, 5] = S[1, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (11, 2, 14, 4)
Save to S[2, 4]
case3_case FcurrentForest - F(rF)
case1_case2 = t[14, 4]
case2_case2 = q[2]
case3_case3 D[14, 20]
new Round C'
Right (11, 1, 14, 4)
Save to S[1, 4]
case3 = 0
case1_case1 = s[2, 4]
case2_case2 = q[1]
case3_case3 D[14, 11]
save to D[13, 11] = S[1, 4]
Q[2] = S[2, 4]
Q[1] = S[1, 4]
T[14, 4] = S[1, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (11, 2, 13, 3)
Save to S[2, 3]
case3_case FcurrentForest - F(rF)
case1_case2 = t[13, 3]
case2_case2 = q[2]
case3_case3 D[13, 20]
Right (11, 2, 13, 2)
Save to S[2, 2]
case1_case2 t[13, 2]
case2_case3 s[2, 3]
case3_case d[21, 20]
case3_case3 t[13, 3]
new Round C'
Right (11, 1, 13, 3)
Save to S[1, 3]
case3 = 0
case1_case1 = s[2, 3]
case2_case2 = q[1]
case3_case3 D[13, 11]
Right (11, 1, 13, 2)
Save to S[1, 2]
case1_case1 s[2, 2]
case2_case3 s[1, 3]
case3_case d[21, 11]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 11] = S[1, 2]
Q[2] = S[2, 2]
Q[1] = S[1, 2]
T[13, 3] = S[1, 3]
T[13, 2] = S[1, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (11, 2, 12, 1)
Save to S[2, 1]
case3_case FcurrentForest - F(rF)
case1_case2 = t[12, 1]
case2_case2 = q[2]
case3_case3 D[12, 20]
new Round C'
Right (11, 1, 12, 1)
Save to S[1, 1]
case3 = 0
case1_case1 = s[2, 1]
case2_case2 = q[1]
case3_case3 D[12, 11]
T[12, 1] = S[1, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (11, 2, 11, 11)
Save to S[2, 11]
case3_case FcurrentForest - F(rF)
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 20]
new Round C'
Right (11, 1, 11, 11)
Save to S[1, 11]
case3 = 0
case1_case1 = s[2, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 11]
T[11, 11] = S[1, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (11, 2, 10, 16)
Save to S[2, 16]
case3_case FcurrentForest - F(rF)
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 20]
new Round C'
Right (11, 1, 10, 16)
Save to S[1, 16]
case3 = 0
case1_case1 = s[2, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 11]
T[10, 16] = S[1, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (11, 2, 9, 17)
Save to S[2, 17]
case3_case FcurrentForest - F(rF)
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 20]
new Round C'
Right (11, 1, 9, 17)
Save to S[1, 17]
case3 = 0
case1_case1 = s[2, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 11]
T[9, 17] = S[1, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (11, 2, 8, 18)
Save to S[2, 18]
case3_case FcurrentForest - F(rF)
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 20]
new Round C'
Right (11, 1, 8, 18)
Save to S[1, 18]
case3 = 0
case1_case1 = s[2, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 11]
T[8, 18] = S[1, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (11, 2, 7, 19)
Save to S[2, 19]
case3_case FcurrentForest - F(rF)
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 20]
new Round C'
Right (11, 1, 7, 19)
Save to S[1, 19]
case3 = 0
case1_case1 = s[2, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 11]
T[7, 19] = S[1, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (11, 2, 6, 20)
Save to S[2, 20]
case3_case FcurrentForest - F(rF)
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 20]
Right (11, 2, 6, 19)
Save to S[2, 19]
case1_case2 t[6, 19]
case2_case3 s[2, 20]
case3_case d[7, 20]
case3_case3 t[6, 20]
Right (11, 2, 6, 18)
Save to S[2, 18]
case1_case2 t[6, 18]
case2_case3 s[2, 19]
case3_case d[8, 20]
case3_case3 t[6, 19]
Right (11, 2, 6, 17)
Save to S[2, 17]
case1_case2 t[6, 17]
case2_case3 s[2, 18]
case3_case d[9, 20]
case3_case3 t[6, 18]
Right (11, 2, 6, 16)
Save to S[2, 16]
case1_case2 t[6, 16]
case2_case3 s[2, 17]
case3_case d[10, 20]
case3_case3 t[6, 17]
new Round C'
Right (11, 1, 6, 20)
Save to S[1, 20]
case3 = 0
case1_case1 = s[2, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 11]
Right (11, 1, 6, 19)
Save to S[1, 19]
case1_case1 s[2, 19]
case2_case3 s[1, 20]
case3_case d[7, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 6, 18)
Save to S[1, 18]
case1_case1 s[2, 18]
case2_case3 s[1, 19]
case3_case d[8, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 6, 17)
Save to S[1, 17]
case1_case1 s[2, 17]
case2_case3 s[1, 18]
case3_case d[9, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 6, 16)
Save to S[1, 16]
case1_case1 s[2, 16]
case2_case3 s[1, 17]
case3_case d[10, 11]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 11] = S[1, 16]
Q[2] = S[2, 16]
Q[1] = S[1, 16]
T[6, 20] = S[1, 20]
T[6, 19] = S[1, 19]
T[6, 18] = S[1, 18]
T[6, 17] = S[1, 17]
T[6, 16] = S[1, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (11, 2, 5, 15)
Save to S[2, 15]
case3_case FcurrentForest - F(rF)
case1_case2 = t[5, 15]
case2_case2 = q[2]
case3_case3 D[5, 20]
new Round C'
Right (11, 1, 5, 15)
Save to S[1, 15]
case3 = 0
case1_case1 = s[2, 15]
case2_case2 = q[1]
case3_case3 D[5, 11]
save to D[4, 11] = S[1, 15]
Q[2] = S[2, 15]
Q[1] = S[1, 15]
T[5, 15] = S[1, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (11, 2, 4, 14)
Save to S[2, 14]
case3_case FcurrentForest - F(rF)
case1_case2 = t[4, 14]
case2_case2 = q[2]
case3_case3 D[4, 20]
new Round C'
Right (11, 1, 4, 14)
Save to S[1, 14]
case3 = 0
case1_case1 = s[2, 14]
case2_case2 = q[1]
case3_case3 D[4, 11]
save to D[3, 11] = S[1, 14]
Q[2] = S[2, 14]
Q[1] = S[1, 14]
T[4, 14] = S[1, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (11, 2, 3, 13)
Save to S[2, 13]
case3_case FcurrentForest - F(rF)
case1_case2 = t[3, 13]
case2_case2 = q[2]
case3_case3 D[3, 20]
new Round C'
Right (11, 1, 3, 13)
Save to S[1, 13]
case3 = 0
case1_case1 = s[2, 13]
case2_case2 = q[1]
case3_case3 D[3, 11]
save to D[2, 11] = S[1, 13]
Q[2] = S[2, 13]
Q[1] = S[1, 13]
T[3, 13] = S[1, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (11, 2, 2, 12)
Save to S[2, 12]
case3_case FcurrentForest - F(rF)
case1_case2 = t[2, 12]
case2_case2 = q[2]
case3_case3 D[2, 20]
new Round C'
Right (11, 1, 2, 12)
Save to S[1, 12]
case3 = 0
case1_case1 = s[2, 12]
case2_case2 = q[1]
case3_case3 D[2, 11]
T[2, 12] = S[1, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (11, 2, 1, 21)
Save to S[2, 21]
case3_case FcurrentForest - F(rF)
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 20]
Right (11, 2, 1, 20)
Save to S[2, 20]
case1_case2 t[1, 20]
case2_case3 s[2, 21]
case3_case d[6, 20]
case3_case3 t[1, 21]
Right (11, 2, 1, 19)
Save to S[2, 19]
case1_case2 t[1, 19]
case2_case3 s[2, 20]
case3_case d[7, 20]
case3_case3 t[1, 20]
Right (11, 2, 1, 18)
Save to S[2, 18]
case1_case2 t[1, 18]
case2_case3 s[2, 19]
case3_case d[8, 20]
case3_case3 t[1, 19]
Right (11, 2, 1, 17)
Save to S[2, 17]
case1_case2 t[1, 17]
case2_case3 s[2, 18]
case3_case d[9, 20]
case3_case3 t[1, 18]
Right (11, 2, 1, 16)
Save to S[2, 16]
case1_case2 t[1, 16]
case2_case3 s[2, 17]
case3_case d[10, 20]
case3_case3 t[1, 17]
Right (11, 2, 1, 15)
Save to S[2, 15]
case1_case2 t[1, 15]
case2_case3 s[2, 16]
case3_case d[5, 20]
case3_case3 t[1, 21]
Right (11, 2, 1, 14)
Save to S[2, 14]
case1_case2 t[1, 14]
case2_case3 s[2, 15]
case3_case d[4, 20]
case3_case3 t[1, 21]
Right (11, 2, 1, 13)
Save to S[2, 13]
case1_case2 t[1, 13]
case2_case3 s[2, 14]
case3_case d[3, 20]
case3_case3 t[1, 21]
Right (11, 2, 1, 12)
Save to S[2, 12]
case1_case2 t[1, 12]
case2_case3 s[2, 13]
case3_case d[2, 20]
case3_case3 t[1, 21]
Right (11, 2, 1, 11)
Save to S[2, 11]
case1_case2 t[1, 11]
case2_case3 s[2, 12]
case3_case d[11, 20]
case3_case3 t[1, 12]
Right (11, 2, 1, 10)
Save to S[2, 10]
case1_case2 t[1, 10]
case2_case3 s[2, 11]
case3_case d[17, 20]
case3_case3 t[1, 11]
Right (11, 2, 1, 9)
Save to S[2, 9]
case1_case2 t[1, 9]
case2_case3 s[2, 10]
case3_case d[18, 20]
case3_case3 t[1, 10]
Right (11, 2, 1, 8)
Save to S[2, 8]
case1_case2 t[1, 8]
case2_case3 s[2, 9]
case3_case d[19, 20]
case3_case3 t[1, 9]
Right (11, 2, 1, 7)
Save to S[2, 7]
case1_case2 t[1, 7]
case2_case3 s[2, 8]
case3_case d[20, 20]
case3_case3 t[1, 8]
Right (11, 2, 1, 6)
Save to S[2, 6]
case1_case2 t[1, 6]
case2_case3 s[2, 7]
case3_case d[16, 20]
case3_case3 t[1, 11]
Right (11, 2, 1, 5)
Save to S[2, 5]
case1_case2 t[1, 5]
case2_case3 s[2, 6]
case3_case d[15, 20]
case3_case3 t[1, 11]
Right (11, 2, 1, 4)
Save to S[2, 4]
case1_case2 t[1, 4]
case2_case3 s[2, 5]
case3_case d[14, 20]
case3_case3 t[1, 11]
Right (11, 2, 1, 3)
Save to S[2, 3]
case1_case2 t[1, 3]
case2_case3 s[2, 4]
case3_case d[13, 20]
case3_case3 t[1, 11]
Right (11, 2, 1, 2)
Save to S[2, 2]
case1_case2 t[1, 2]
case2_case3 s[2, 3]
case3_case d[21, 20]
case3_case3 t[1, 3]
Right (11, 2, 1, 1)
Save to S[2, 1]
case1_case2 t[1, 1]
case2_case3 s[2, 2]
case3_case d[12, 20]
case3_case3 t[1, 11]
new Round C'
Right (11, 1, 1, 21)
Save to S[1, 21]
case3 = 0
case1_case1 = s[2, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 11]
Right (11, 1, 1, 20)
Save to S[1, 20]
case1_case1 s[2, 20]
case2_case3 s[1, 21]
case3_case d[6, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 19)
Save to S[1, 19]
case1_case1 s[2, 19]
case2_case3 s[1, 20]
case3_case d[7, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 18)
Save to S[1, 18]
case1_case1 s[2, 18]
case2_case3 s[1, 19]
case3_case d[8, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 17)
Save to S[1, 17]
case1_case1 s[2, 17]
case2_case3 s[1, 18]
case3_case d[9, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 16)
Save to S[1, 16]
case1_case1 s[2, 16]
case2_case3 s[1, 17]
case3_case d[10, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 15)
Save to S[1, 15]
case1_case1 s[2, 15]
case2_case3 s[1, 16]
case3_case d[5, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 14)
Save to S[1, 14]
case1_case1 s[2, 14]
case2_case3 s[1, 15]
case3_case d[4, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 13)
Save to S[1, 13]
case1_case1 s[2, 13]
case2_case3 s[1, 14]
case3_case d[3, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 12)
Save to S[1, 12]
case1_case1 s[2, 12]
case2_case3 s[1, 13]
case3_case d[2, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 11)
Save to S[1, 11]
case1_case1 s[2, 11]
case2_case3 s[1, 12]
case3_case d[11, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 10)
Save to S[1, 10]
case1_case1 s[2, 10]
case2_case3 s[1, 11]
case3_case d[17, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 9)
Save to S[1, 9]
case1_case1 s[2, 9]
case2_case3 s[1, 10]
case3_case d[18, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 8)
Save to S[1, 8]
case1_case1 s[2, 8]
case2_case3 s[1, 9]
case3_case d[19, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 7)
Save to S[1, 7]
case1_case1 s[2, 7]
case2_case3 s[1, 8]
case3_case d[20, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 6)
Save to S[1, 6]
case1_case1 s[2, 6]
case2_case3 s[1, 7]
case3_case d[16, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 5)
Save to S[1, 5]
case1_case1 s[2, 5]
case2_case3 s[1, 6]
case3_case d[15, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 4)
Save to S[1, 4]
case1_case1 s[2, 4]
case2_case3 s[1, 5]
case3_case d[14, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 3)
Save to S[1, 3]
case1_case1 s[2, 3]
case2_case3 s[1, 4]
case3_case d[13, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 2)
Save to S[1, 2]
case1_case1 s[2, 2]
case2_case3 s[1, 3]
case3_case d[21, 11]
case3_case2 GcurrentForestCost - G(rG) 
Right (11, 1, 1, 1)
Save to S[1, 1]
case1_case1 s[2, 1]
case2_case3 s[1, 2]
case3_case d[12, 11]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 11] = S[1, 1]
Q[2] = S[2, 1]
Q[1] = S[1, 1]
T[1, 21] = S[1, 21]
T[1, 20] = S[1, 20]
T[1, 19] = S[1, 19]
T[1, 18] = S[1, 18]
T[1, 17] = S[1, 17]
T[1, 16] = S[1, 16]
T[1, 15] = S[1, 15]
T[1, 14] = S[1, 14]
T[1, 13] = S[1, 13]
T[1, 12] = S[1, 12]
T[1, 11] = S[1, 11]
T[1, 10] = S[1, 10]
T[1, 9] = S[1, 9]
T[1, 8] = S[1, 8]
T[1, 7] = S[1, 7]
T[1, 6] = S[1, 6]
T[1, 5] = S[1, 5]
T[1, 4] = S[1, 4]
T[1, 3] = S[1, 3]
T[1, 2] = S[1, 2]
T[1, 1] = S[1, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (11, 2, 0, 0)
Save to S[2, 0]
case3_case FcurrentForest - F(rF)
case1_case2 = t[0, 0]
case2_case2 = q[2]
case3_case3 D[0, 20]
new Round C'
Right (11, 1, 0, 0)
Save to S[1, 0]
case3 = 0
case1_case1 = s[2, 0]
case2_case2 = q[1]
case3_case3 D[0, 11]
T[0, 0] = S[1, 0]
swap = true pathType = 0
spfA(0, 0) 1
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (6, 20, 21, 2)
Save to S[20, 2]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[21, 6]
T[21, 2] = S[20, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (6, 20, 20, 7)
Save to S[20, 7]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[20, 6]
T[20, 7] = S[20, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (6, 20, 19, 8)
Save to S[20, 8]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[19, 6]
T[19, 8] = S[20, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (6, 20, 18, 9)
Save to S[20, 9]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[18, 6]
T[18, 9] = S[20, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (6, 20, 17, 10)
Save to S[20, 10]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[17, 6]
Right (6, 20, 17, 9)
Save to S[20, 9]
case1_case3 -2
case2_case3 s[20, 10]
case3_case d[18, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 17, 8)
Save to S[20, 8]
case1_case3 -3
case2_case3 s[20, 9]
case3_case d[19, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 17, 7)
Save to S[20, 7]
case1_case3 -4
case2_case3 s[20, 8]
case3_case d[20, 6]
case3_case2 GcurrentForestCost - G(rG) 
Q[20] = S[20, 7]
T[17, 10] = S[20, 10]
T[17, 9] = S[20, 9]
T[17, 8] = S[20, 8]
T[17, 7] = S[20, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (6, 20, 16, 6)
Save to S[20, 6]
case3 = 0
case1_case3 = -5
case2_case2 = q[20]
case3_case3 D[16, 6]
Q[20] = S[20, 6]
T[16, 6] = S[20, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (6, 20, 15, 5)
Save to S[20, 5]
case3 = 0
case1_case3 = -6
case2_case2 = q[20]
case3_case3 D[15, 6]
Q[20] = S[20, 5]
T[15, 5] = S[20, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (6, 20, 14, 4)
Save to S[20, 4]
case3 = 0
case1_case3 = -7
case2_case2 = q[20]
case3_case3 D[14, 6]
Q[20] = S[20, 4]
T[14, 4] = S[20, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (6, 20, 13, 3)
Save to S[20, 3]
case3 = 0
case1_case3 = -8
case2_case2 = q[20]
case3_case3 D[13, 6]
Right (6, 20, 13, 2)
Save to S[20, 2]
case1_case3 -9
case2_case3 s[20, 3]
case3_case d[21, 6]
case3_case2 GcurrentForestCost - G(rG) 
Q[20] = S[20, 2]
T[13, 3] = S[20, 3]
T[13, 2] = S[20, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (6, 20, 12, 1)
Save to S[20, 1]
case3 = 0
case1_case3 = -10
case2_case2 = q[20]
case3_case3 D[12, 6]
T[12, 1] = S[20, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (6, 20, 11, 11)
Save to S[20, 11]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[11, 6]
T[11, 11] = S[20, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (6, 20, 10, 16)
Save to S[20, 16]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[10, 6]
T[10, 16] = S[20, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (6, 20, 9, 17)
Save to S[20, 17]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[9, 6]
T[9, 17] = S[20, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (6, 20, 8, 18)
Save to S[20, 18]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[8, 6]
T[8, 18] = S[20, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (6, 20, 7, 19)
Save to S[20, 19]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[7, 6]
T[7, 19] = S[20, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (6, 20, 6, 20)
Save to S[20, 20]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[6, 6]
Right (6, 20, 6, 19)
Save to S[20, 19]
case1_case3 -2
case2_case3 s[20, 20]
case3_case d[7, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 6, 18)
Save to S[20, 18]
case1_case3 -3
case2_case3 s[20, 19]
case3_case d[8, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 6, 17)
Save to S[20, 17]
case1_case3 -4
case2_case3 s[20, 18]
case3_case d[9, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 6, 16)
Save to S[20, 16]
case1_case3 -5
case2_case3 s[20, 17]
case3_case d[10, 6]
case3_case2 GcurrentForestCost - G(rG) 
Q[20] = S[20, 16]
T[6, 20] = S[20, 20]
T[6, 19] = S[20, 19]
T[6, 18] = S[20, 18]
T[6, 17] = S[20, 17]
T[6, 16] = S[20, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (6, 20, 5, 15)
Save to S[20, 15]
case3 = 0
case1_case3 = -6
case2_case2 = q[20]
case3_case3 D[5, 6]
Q[20] = S[20, 15]
T[5, 15] = S[20, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (6, 20, 4, 14)
Save to S[20, 14]
case3 = 0
case1_case3 = -7
case2_case2 = q[20]
case3_case3 D[4, 6]
Q[20] = S[20, 14]
T[4, 14] = S[20, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (6, 20, 3, 13)
Save to S[20, 13]
case3 = 0
case1_case3 = -8
case2_case2 = q[20]
case3_case3 D[3, 6]
Q[20] = S[20, 13]
T[3, 13] = S[20, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (6, 20, 2, 12)
Save to S[20, 12]
case3 = 0
case1_case3 = -9
case2_case2 = q[20]
case3_case3 D[2, 6]
T[2, 12] = S[20, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (6, 20, 1, 21)
Save to S[20, 21]
case3 = 0
case1_case3 = -1
case2_case1 = FcurrentForestCost
case3_case3 D[1, 6]
Right (6, 20, 1, 20)
Save to S[20, 20]
case1_case3 -2
case2_case3 s[20, 21]
case3_case d[6, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 19)
Save to S[20, 19]
case1_case3 -3
case2_case3 s[20, 20]
case3_case d[7, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 18)
Save to S[20, 18]
case1_case3 -4
case2_case3 s[20, 19]
case3_case d[8, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 17)
Save to S[20, 17]
case1_case3 -5
case2_case3 s[20, 18]
case3_case d[9, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 16)
Save to S[20, 16]
case1_case3 -6
case2_case3 s[20, 17]
case3_case d[10, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 15)
Save to S[20, 15]
case1_case3 -7
case2_case3 s[20, 16]
case3_case d[5, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 14)
Save to S[20, 14]
case1_case3 -8
case2_case3 s[20, 15]
case3_case d[4, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 13)
Save to S[20, 13]
case1_case3 -9
case2_case3 s[20, 14]
case3_case d[3, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 12)
Save to S[20, 12]
case1_case3 -10
case2_case3 s[20, 13]
case3_case d[2, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 11)
Save to S[20, 11]
case1_case3 -11
case2_case3 s[20, 12]
case3_case d[11, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 10)
Save to S[20, 10]
case1_case3 -12
case2_case3 s[20, 11]
case3_case d[17, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 9)
Save to S[20, 9]
case1_case3 -13
case2_case3 s[20, 10]
case3_case d[18, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 8)
Save to S[20, 8]
case1_case3 -14
case2_case3 s[20, 9]
case3_case d[19, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 7)
Save to S[20, 7]
case1_case3 -15
case2_case3 s[20, 8]
case3_case d[20, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 6)
Save to S[20, 6]
case1_case3 -16
case2_case3 s[20, 7]
case3_case d[16, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 5)
Save to S[20, 5]
case1_case3 -17
case2_case3 s[20, 6]
case3_case d[15, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 4)
Save to S[20, 4]
case1_case3 -18
case2_case3 s[20, 5]
case3_case d[14, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 3)
Save to S[20, 3]
case1_case3 -19
case2_case3 s[20, 4]
case3_case d[13, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 2)
Save to S[20, 2]
case1_case3 -20
case2_case3 s[20, 3]
case3_case d[21, 6]
case3_case2 GcurrentForestCost - G(rG) 
Right (6, 20, 1, 1)
Save to S[20, 1]
case1_case3 -21
case2_case3 s[20, 2]
case3_case d[12, 6]
case3_case2 GcurrentForestCost - G(rG) 
Q[20] = S[20, 1]
T[1, 21] = S[20, 21]
T[1, 20] = S[20, 20]
T[1, 19] = S[20, 19]
T[1, 18] = S[20, 18]
T[1, 17] = S[20, 17]
T[1, 16] = S[20, 16]
T[1, 15] = S[20, 15]
T[1, 14] = S[20, 14]
T[1, 13] = S[20, 13]
T[1, 12] = S[20, 12]
T[1, 11] = S[20, 11]
T[1, 10] = S[20, 10]
T[1, 9] = S[20, 9]
T[1, 8] = S[20, 8]
T[1, 7] = S[20, 7]
T[1, 6] = S[20, 6]
T[1, 5] = S[20, 5]
T[1, 4] = S[20, 4]
T[1, 3] = S[20, 3]
T[1, 2] = S[20, 2]
T[1, 1] = S[20, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (6, 20, 0, 0)
Save to S[20, 0]
case3 = 0
case1_case3 = -22
case2_case2 = q[20]
case3_case3 D[0, 6]
T[0, 0] = S[20, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (5, 19, 21, 2)
Save to S[19, 2]
case3_case FcurrentForest - F(rF)
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 7]
new Round C'
Right (5, 18, 21, 2)
Save to S[18, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 8]
new Round C'
Right (5, 17, 21, 2)
Save to S[17, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 9]
new Round C'
Right (5, 16, 21, 2)
Save to S[16, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 10]
new Round C'
Right (5, 15, 21, 2)
Save to S[15, 2]
case3 = 0
case1_case1 = s[16, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 5]
T[21, 2] = S[15, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (5, 19, 20, 7)
Save to S[19, 7]
case3_case FcurrentForest - F(rF)
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 7]
new Round C'
Right (5, 18, 20, 7)
Save to S[18, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 8]
new Round C'
Right (5, 17, 20, 7)
Save to S[17, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 9]
new Round C'
Right (5, 16, 20, 7)
Save to S[16, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 10]
new Round C'
Right (5, 15, 20, 7)
Save to S[15, 7]
case3 = 0
case1_case1 = s[16, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 5]
T[20, 7] = S[15, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (5, 19, 19, 8)
Save to S[19, 8]
case3_case FcurrentForest - F(rF)
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 7]
new Round C'
Right (5, 18, 19, 8)
Save to S[18, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 8]
new Round C'
Right (5, 17, 19, 8)
Save to S[17, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 9]
new Round C'
Right (5, 16, 19, 8)
Save to S[16, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 10]
new Round C'
Right (5, 15, 19, 8)
Save to S[15, 8]
case3 = 0
case1_case1 = s[16, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 5]
T[19, 8] = S[15, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (5, 19, 18, 9)
Save to S[19, 9]
case3_case FcurrentForest - F(rF)
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 7]
new Round C'
Right (5, 18, 18, 9)
Save to S[18, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 8]
new Round C'
Right (5, 17, 18, 9)
Save to S[17, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 9]
new Round C'
Right (5, 16, 18, 9)
Save to S[16, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 10]
new Round C'
Right (5, 15, 18, 9)
Save to S[15, 9]
case3 = 0
case1_case1 = s[16, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 5]
T[18, 9] = S[15, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (5, 19, 17, 10)
Save to S[19, 10]
case3_case FcurrentForest - F(rF)
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 7]
Right (5, 19, 17, 9)
Save to S[19, 9]
case1_case2 t[17, 9]
case2_case3 s[19, 10]
case3_case d[18, 7]
case3_case3 t[17, 10]
Right (5, 19, 17, 8)
Save to S[19, 8]
case1_case2 t[17, 8]
case2_case3 s[19, 9]
case3_case d[19, 7]
case3_case3 t[17, 9]
Right (5, 19, 17, 7)
Save to S[19, 7]
case1_case2 t[17, 7]
case2_case3 s[19, 8]
case3_case d[20, 7]
case3_case3 t[17, 8]
new Round C'
Right (5, 18, 17, 10)
Save to S[18, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 8]
Right (5, 18, 17, 9)
Save to S[18, 9]
case1_case1 s[19, 9]
case2_case3 s[18, 10]
case3_case d[18, 8]
case3_case1 s[19, 10]
Right (5, 18, 17, 8)
Save to S[18, 8]
case1_case1 s[19, 8]
case2_case3 s[18, 9]
case3_case d[19, 8]
case3_case1 s[19, 9]
Right (5, 18, 17, 7)
Save to S[18, 7]
case1_case1 s[19, 7]
case2_case3 s[18, 8]
case3_case d[20, 8]
case3_case1 s[19, 8]
new Round C'
Right (5, 17, 17, 10)
Save to S[17, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 9]
Right (5, 17, 17, 9)
Save to S[17, 9]
case1_case1 s[18, 9]
case2_case3 s[17, 10]
case3_case d[18, 9]
case3_case1 s[18, 10]
Right (5, 17, 17, 8)
Save to S[17, 8]
case1_case1 s[18, 8]
case2_case3 s[17, 9]
case3_case d[19, 9]
case3_case1 s[18, 9]
Right (5, 17, 17, 7)
Save to S[17, 7]
case1_case1 s[18, 7]
case2_case3 s[17, 8]
case3_case d[20, 9]
case3_case1 s[18, 8]
new Round C'
Right (5, 16, 17, 10)
Save to S[16, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 10]
Right (5, 16, 17, 9)
Save to S[16, 9]
case1_case1 s[17, 9]
case2_case3 s[16, 10]
case3_case d[18, 10]
case3_case1 s[17, 10]
Right (5, 16, 17, 8)
Save to S[16, 8]
case1_case1 s[17, 8]
case2_case3 s[16, 9]
case3_case d[19, 10]
case3_case1 s[17, 9]
Right (5, 16, 17, 7)
Save to S[16, 7]
case1_case1 s[17, 7]
case2_case3 s[16, 8]
case3_case d[20, 10]
case3_case1 s[17, 8]
new Round C'
Right (5, 15, 17, 10)
Save to S[15, 10]
case3 = 0
case1_case1 = s[16, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 5]
Right (5, 15, 17, 9)
Save to S[15, 9]
case1_case1 s[16, 9]
case2_case3 s[15, 10]
case3_case d[18, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 17, 8)
Save to S[15, 8]
case1_case1 s[16, 8]
case2_case3 s[15, 9]
case3_case d[19, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 17, 7)
Save to S[15, 7]
case1_case1 s[16, 7]
case2_case3 s[15, 8]
case3_case d[20, 5]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 5] = S[15, 7]
save to D[16, 4] = S[15, 7]
Q[19] = S[19, 7]
Q[18] = S[18, 7]
Q[17] = S[17, 7]
Q[16] = S[16, 7]
Q[15] = S[15, 7]
T[17, 10] = S[15, 10]
T[17, 9] = S[15, 9]
T[17, 8] = S[15, 8]
T[17, 7] = S[15, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (5, 19, 16, 6)
Save to S[19, 6]
case3_case FcurrentForest - F(rF)
case1_case2 = t[16, 6]
case2_case2 = q[19]
case3_case3 D[16, 7]
new Round C'
Right (5, 18, 16, 6)
Save to S[18, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 6]
case2_case2 = q[18]
case3_case3 D[16, 8]
new Round C'
Right (5, 17, 16, 6)
Save to S[17, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 6]
case2_case2 = q[17]
case3_case3 D[16, 9]
new Round C'
Right (5, 16, 16, 6)
Save to S[16, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 6]
case2_case2 = q[16]
case3_case3 D[16, 10]
new Round C'
Right (5, 15, 16, 6)
Save to S[15, 6]
case3 = 0
case1_case1 = s[16, 6]
case2_case2 = q[15]
case3_case3 D[16, 5]
save to D[15, 5] = S[15, 6]
save to D[15, 4] = S[15, 6]
Q[19] = S[19, 6]
Q[18] = S[18, 6]
Q[17] = S[17, 6]
Q[16] = S[16, 6]
Q[15] = S[15, 6]
T[16, 6] = S[15, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (5, 19, 15, 5)
Save to S[19, 5]
case3_case FcurrentForest - F(rF)
case1_case2 = t[15, 5]
case2_case2 = q[19]
case3_case3 D[15, 7]
new Round C'
Right (5, 18, 15, 5)
Save to S[18, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 5]
case2_case2 = q[18]
case3_case3 D[15, 8]
new Round C'
Right (5, 17, 15, 5)
Save to S[17, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 5]
case2_case2 = q[17]
case3_case3 D[15, 9]
new Round C'
Right (5, 16, 15, 5)
Save to S[16, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 5]
case2_case2 = q[16]
case3_case3 D[15, 10]
new Round C'
Right (5, 15, 15, 5)
Save to S[15, 5]
case3 = 0
case1_case1 = s[16, 5]
case2_case2 = q[15]
case3_case3 D[15, 5]
save to D[14, 5] = S[15, 5]
save to D[14, 4] = S[15, 5]
Q[19] = S[19, 5]
Q[18] = S[18, 5]
Q[17] = S[17, 5]
Q[16] = S[16, 5]
Q[15] = S[15, 5]
T[15, 5] = S[15, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (5, 19, 14, 4)
Save to S[19, 4]
case3_case FcurrentForest - F(rF)
case1_case2 = t[14, 4]
case2_case2 = q[19]
case3_case3 D[14, 7]
new Round C'
Right (5, 18, 14, 4)
Save to S[18, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 4]
case2_case2 = q[18]
case3_case3 D[14, 8]
new Round C'
Right (5, 17, 14, 4)
Save to S[17, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 4]
case2_case2 = q[17]
case3_case3 D[14, 9]
new Round C'
Right (5, 16, 14, 4)
Save to S[16, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 4]
case2_case2 = q[16]
case3_case3 D[14, 10]
new Round C'
Right (5, 15, 14, 4)
Save to S[15, 4]
case3 = 0
case1_case1 = s[16, 4]
case2_case2 = q[15]
case3_case3 D[14, 5]
save to D[13, 5] = S[15, 4]
save to D[13, 4] = S[15, 4]
Q[19] = S[19, 4]
Q[18] = S[18, 4]
Q[17] = S[17, 4]
Q[16] = S[16, 4]
Q[15] = S[15, 4]
T[14, 4] = S[15, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (5, 19, 13, 3)
Save to S[19, 3]
case3_case FcurrentForest - F(rF)
case1_case2 = t[13, 3]
case2_case2 = q[19]
case3_case3 D[13, 7]
Right (5, 19, 13, 2)
Save to S[19, 2]
case1_case2 t[13, 2]
case2_case3 s[19, 3]
case3_case d[21, 7]
case3_case3 t[13, 3]
new Round C'
Right (5, 18, 13, 3)
Save to S[18, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 3]
case2_case2 = q[18]
case3_case3 D[13, 8]
Right (5, 18, 13, 2)
Save to S[18, 2]
case1_case1 s[19, 2]
case2_case3 s[18, 3]
case3_case d[21, 8]
case3_case1 s[19, 3]
new Round C'
Right (5, 17, 13, 3)
Save to S[17, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 3]
case2_case2 = q[17]
case3_case3 D[13, 9]
Right (5, 17, 13, 2)
Save to S[17, 2]
case1_case1 s[18, 2]
case2_case3 s[17, 3]
case3_case d[21, 9]
case3_case1 s[18, 3]
new Round C'
Right (5, 16, 13, 3)
Save to S[16, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 3]
case2_case2 = q[16]
case3_case3 D[13, 10]
Right (5, 16, 13, 2)
Save to S[16, 2]
case1_case1 s[17, 2]
case2_case3 s[16, 3]
case3_case d[21, 10]
case3_case1 s[17, 3]
new Round C'
Right (5, 15, 13, 3)
Save to S[15, 3]
case3 = 0
case1_case1 = s[16, 3]
case2_case2 = q[15]
case3_case3 D[13, 5]
Right (5, 15, 13, 2)
Save to S[15, 2]
case1_case1 s[16, 2]
case2_case3 s[15, 3]
case3_case d[21, 5]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 5] = S[15, 2]
save to D[12, 4] = S[15, 2]
Q[19] = S[19, 2]
Q[18] = S[18, 2]
Q[17] = S[17, 2]
Q[16] = S[16, 2]
Q[15] = S[15, 2]
T[13, 3] = S[15, 3]
T[13, 2] = S[15, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (5, 19, 12, 1)
Save to S[19, 1]
case3_case FcurrentForest - F(rF)
case1_case2 = t[12, 1]
case2_case2 = q[19]
case3_case3 D[12, 7]
new Round C'
Right (5, 18, 12, 1)
Save to S[18, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 1]
case2_case2 = q[18]
case3_case3 D[12, 8]
new Round C'
Right (5, 17, 12, 1)
Save to S[17, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 1]
case2_case2 = q[17]
case3_case3 D[12, 9]
new Round C'
Right (5, 16, 12, 1)
Save to S[16, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 1]
case2_case2 = q[16]
case3_case3 D[12, 10]
new Round C'
Right (5, 15, 12, 1)
Save to S[15, 1]
case3 = 0
case1_case1 = s[16, 1]
case2_case2 = q[15]
case3_case3 D[12, 5]
T[12, 1] = S[15, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (5, 19, 11, 11)
Save to S[19, 11]
case3_case FcurrentForest - F(rF)
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 7]
new Round C'
Right (5, 18, 11, 11)
Save to S[18, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 8]
new Round C'
Right (5, 17, 11, 11)
Save to S[17, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 9]
new Round C'
Right (5, 16, 11, 11)
Save to S[16, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 10]
new Round C'
Right (5, 15, 11, 11)
Save to S[15, 11]
case3 = 0
case1_case1 = s[16, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 5]
T[11, 11] = S[15, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (5, 19, 10, 16)
Save to S[19, 16]
case3_case FcurrentForest - F(rF)
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 7]
new Round C'
Right (5, 18, 10, 16)
Save to S[18, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 8]
new Round C'
Right (5, 17, 10, 16)
Save to S[17, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 9]
new Round C'
Right (5, 16, 10, 16)
Save to S[16, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 10]
new Round C'
Right (5, 15, 10, 16)
Save to S[15, 16]
case3 = 0
case1_case1 = s[16, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 5]
T[10, 16] = S[15, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (5, 19, 9, 17)
Save to S[19, 17]
case3_case FcurrentForest - F(rF)
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 7]
new Round C'
Right (5, 18, 9, 17)
Save to S[18, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 8]
new Round C'
Right (5, 17, 9, 17)
Save to S[17, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 9]
new Round C'
Right (5, 16, 9, 17)
Save to S[16, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 10]
new Round C'
Right (5, 15, 9, 17)
Save to S[15, 17]
case3 = 0
case1_case1 = s[16, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 5]
T[9, 17] = S[15, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (5, 19, 8, 18)
Save to S[19, 18]
case3_case FcurrentForest - F(rF)
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 7]
new Round C'
Right (5, 18, 8, 18)
Save to S[18, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 8]
new Round C'
Right (5, 17, 8, 18)
Save to S[17, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 9]
new Round C'
Right (5, 16, 8, 18)
Save to S[16, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 10]
new Round C'
Right (5, 15, 8, 18)
Save to S[15, 18]
case3 = 0
case1_case1 = s[16, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 5]
T[8, 18] = S[15, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (5, 19, 7, 19)
Save to S[19, 19]
case3_case FcurrentForest - F(rF)
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 7]
new Round C'
Right (5, 18, 7, 19)
Save to S[18, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 8]
new Round C'
Right (5, 17, 7, 19)
Save to S[17, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 9]
new Round C'
Right (5, 16, 7, 19)
Save to S[16, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 10]
new Round C'
Right (5, 15, 7, 19)
Save to S[15, 19]
case3 = 0
case1_case1 = s[16, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 5]
T[7, 19] = S[15, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (5, 19, 6, 20)
Save to S[19, 20]
case3_case FcurrentForest - F(rF)
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 7]
Right (5, 19, 6, 19)
Save to S[19, 19]
case1_case2 t[6, 19]
case2_case3 s[19, 20]
case3_case d[7, 7]
case3_case3 t[6, 20]
Right (5, 19, 6, 18)
Save to S[19, 18]
case1_case2 t[6, 18]
case2_case3 s[19, 19]
case3_case d[8, 7]
case3_case3 t[6, 19]
Right (5, 19, 6, 17)
Save to S[19, 17]
case1_case2 t[6, 17]
case2_case3 s[19, 18]
case3_case d[9, 7]
case3_case3 t[6, 18]
Right (5, 19, 6, 16)
Save to S[19, 16]
case1_case2 t[6, 16]
case2_case3 s[19, 17]
case3_case d[10, 7]
case3_case3 t[6, 17]
new Round C'
Right (5, 18, 6, 20)
Save to S[18, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 8]
Right (5, 18, 6, 19)
Save to S[18, 19]
case1_case1 s[19, 19]
case2_case3 s[18, 20]
case3_case d[7, 8]
case3_case1 s[19, 20]
Right (5, 18, 6, 18)
Save to S[18, 18]
case1_case1 s[19, 18]
case2_case3 s[18, 19]
case3_case d[8, 8]
case3_case1 s[19, 19]
Right (5, 18, 6, 17)
Save to S[18, 17]
case1_case1 s[19, 17]
case2_case3 s[18, 18]
case3_case d[9, 8]
case3_case1 s[19, 18]
Right (5, 18, 6, 16)
Save to S[18, 16]
case1_case1 s[19, 16]
case2_case3 s[18, 17]
case3_case d[10, 8]
case3_case1 s[19, 17]
new Round C'
Right (5, 17, 6, 20)
Save to S[17, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 9]
Right (5, 17, 6, 19)
Save to S[17, 19]
case1_case1 s[18, 19]
case2_case3 s[17, 20]
case3_case d[7, 9]
case3_case1 s[18, 20]
Right (5, 17, 6, 18)
Save to S[17, 18]
case1_case1 s[18, 18]
case2_case3 s[17, 19]
case3_case d[8, 9]
case3_case1 s[18, 19]
Right (5, 17, 6, 17)
Save to S[17, 17]
case1_case1 s[18, 17]
case2_case3 s[17, 18]
case3_case d[9, 9]
case3_case1 s[18, 18]
Right (5, 17, 6, 16)
Save to S[17, 16]
case1_case1 s[18, 16]
case2_case3 s[17, 17]
case3_case d[10, 9]
case3_case1 s[18, 17]
new Round C'
Right (5, 16, 6, 20)
Save to S[16, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 10]
Right (5, 16, 6, 19)
Save to S[16, 19]
case1_case1 s[17, 19]
case2_case3 s[16, 20]
case3_case d[7, 10]
case3_case1 s[17, 20]
Right (5, 16, 6, 18)
Save to S[16, 18]
case1_case1 s[17, 18]
case2_case3 s[16, 19]
case3_case d[8, 10]
case3_case1 s[17, 19]
Right (5, 16, 6, 17)
Save to S[16, 17]
case1_case1 s[17, 17]
case2_case3 s[16, 18]
case3_case d[9, 10]
case3_case1 s[17, 18]
Right (5, 16, 6, 16)
Save to S[16, 16]
case1_case1 s[17, 16]
case2_case3 s[16, 17]
case3_case d[10, 10]
case3_case1 s[17, 17]
new Round C'
Right (5, 15, 6, 20)
Save to S[15, 20]
case3 = 0
case1_case1 = s[16, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 5]
Right (5, 15, 6, 19)
Save to S[15, 19]
case1_case1 s[16, 19]
case2_case3 s[15, 20]
case3_case d[7, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 6, 18)
Save to S[15, 18]
case1_case1 s[16, 18]
case2_case3 s[15, 19]
case3_case d[8, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 6, 17)
Save to S[15, 17]
case1_case1 s[16, 17]
case2_case3 s[15, 18]
case3_case d[9, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 6, 16)
Save to S[15, 16]
case1_case1 s[16, 16]
case2_case3 s[15, 17]
case3_case d[10, 5]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 5] = S[15, 16]
save to D[5, 4] = S[15, 16]
Q[19] = S[19, 16]
Q[18] = S[18, 16]
Q[17] = S[17, 16]
Q[16] = S[16, 16]
Q[15] = S[15, 16]
T[6, 20] = S[15, 20]
T[6, 19] = S[15, 19]
T[6, 18] = S[15, 18]
T[6, 17] = S[15, 17]
T[6, 16] = S[15, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (5, 19, 5, 15)
Save to S[19, 15]
case3_case FcurrentForest - F(rF)
case1_case2 = t[5, 15]
case2_case2 = q[19]
case3_case3 D[5, 7]
new Round C'
Right (5, 18, 5, 15)
Save to S[18, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 15]
case2_case2 = q[18]
case3_case3 D[5, 8]
new Round C'
Right (5, 17, 5, 15)
Save to S[17, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 15]
case2_case2 = q[17]
case3_case3 D[5, 9]
new Round C'
Right (5, 16, 5, 15)
Save to S[16, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 15]
case2_case2 = q[16]
case3_case3 D[5, 10]
new Round C'
Right (5, 15, 5, 15)
Save to S[15, 15]
case3 = 0
case1_case1 = s[16, 15]
case2_case2 = q[15]
case3_case3 D[5, 5]
save to D[4, 5] = S[15, 15]
save to D[4, 4] = S[15, 15]
Q[19] = S[19, 15]
Q[18] = S[18, 15]
Q[17] = S[17, 15]
Q[16] = S[16, 15]
Q[15] = S[15, 15]
T[5, 15] = S[15, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (5, 19, 4, 14)
Save to S[19, 14]
case3_case FcurrentForest - F(rF)
case1_case2 = t[4, 14]
case2_case2 = q[19]
case3_case3 D[4, 7]
new Round C'
Right (5, 18, 4, 14)
Save to S[18, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 14]
case2_case2 = q[18]
case3_case3 D[4, 8]
new Round C'
Right (5, 17, 4, 14)
Save to S[17, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 14]
case2_case2 = q[17]
case3_case3 D[4, 9]
new Round C'
Right (5, 16, 4, 14)
Save to S[16, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 14]
case2_case2 = q[16]
case3_case3 D[4, 10]
new Round C'
Right (5, 15, 4, 14)
Save to S[15, 14]
case3 = 0
case1_case1 = s[16, 14]
case2_case2 = q[15]
case3_case3 D[4, 5]
save to D[3, 5] = S[15, 14]
save to D[3, 4] = S[15, 14]
Q[19] = S[19, 14]
Q[18] = S[18, 14]
Q[17] = S[17, 14]
Q[16] = S[16, 14]
Q[15] = S[15, 14]
T[4, 14] = S[15, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (5, 19, 3, 13)
Save to S[19, 13]
case3_case FcurrentForest - F(rF)
case1_case2 = t[3, 13]
case2_case2 = q[19]
case3_case3 D[3, 7]
new Round C'
Right (5, 18, 3, 13)
Save to S[18, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 13]
case2_case2 = q[18]
case3_case3 D[3, 8]
new Round C'
Right (5, 17, 3, 13)
Save to S[17, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 13]
case2_case2 = q[17]
case3_case3 D[3, 9]
new Round C'
Right (5, 16, 3, 13)
Save to S[16, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 13]
case2_case2 = q[16]
case3_case3 D[3, 10]
new Round C'
Right (5, 15, 3, 13)
Save to S[15, 13]
case3 = 0
case1_case1 = s[16, 13]
case2_case2 = q[15]
case3_case3 D[3, 5]
save to D[2, 5] = S[15, 13]
save to D[2, 4] = S[15, 13]
Q[19] = S[19, 13]
Q[18] = S[18, 13]
Q[17] = S[17, 13]
Q[16] = S[16, 13]
Q[15] = S[15, 13]
T[3, 13] = S[15, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (5, 19, 2, 12)
Save to S[19, 12]
case3_case FcurrentForest - F(rF)
case1_case2 = t[2, 12]
case2_case2 = q[19]
case3_case3 D[2, 7]
new Round C'
Right (5, 18, 2, 12)
Save to S[18, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 12]
case2_case2 = q[18]
case3_case3 D[2, 8]
new Round C'
Right (5, 17, 2, 12)
Save to S[17, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 12]
case2_case2 = q[17]
case3_case3 D[2, 9]
new Round C'
Right (5, 16, 2, 12)
Save to S[16, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 12]
case2_case2 = q[16]
case3_case3 D[2, 10]
new Round C'
Right (5, 15, 2, 12)
Save to S[15, 12]
case3 = 0
case1_case1 = s[16, 12]
case2_case2 = q[15]
case3_case3 D[2, 5]
T[2, 12] = S[15, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (5, 19, 1, 21)
Save to S[19, 21]
case3_case FcurrentForest - F(rF)
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 7]
Right (5, 19, 1, 20)
Save to S[19, 20]
case1_case2 t[1, 20]
case2_case3 s[19, 21]
case3_case d[6, 7]
case3_case3 t[1, 21]
Right (5, 19, 1, 19)
Save to S[19, 19]
case1_case2 t[1, 19]
case2_case3 s[19, 20]
case3_case d[7, 7]
case3_case3 t[1, 20]
Right (5, 19, 1, 18)
Save to S[19, 18]
case1_case2 t[1, 18]
case2_case3 s[19, 19]
case3_case d[8, 7]
case3_case3 t[1, 19]
Right (5, 19, 1, 17)
Save to S[19, 17]
case1_case2 t[1, 17]
case2_case3 s[19, 18]
case3_case d[9, 7]
case3_case3 t[1, 18]
Right (5, 19, 1, 16)
Save to S[19, 16]
case1_case2 t[1, 16]
case2_case3 s[19, 17]
case3_case d[10, 7]
case3_case3 t[1, 17]
Right (5, 19, 1, 15)
Save to S[19, 15]
case1_case2 t[1, 15]
case2_case3 s[19, 16]
case3_case d[5, 7]
case3_case3 t[1, 21]
Right (5, 19, 1, 14)
Save to S[19, 14]
case1_case2 t[1, 14]
case2_case3 s[19, 15]
case3_case d[4, 7]
case3_case3 t[1, 21]
Right (5, 19, 1, 13)
Save to S[19, 13]
case1_case2 t[1, 13]
case2_case3 s[19, 14]
case3_case d[3, 7]
case3_case3 t[1, 21]
Right (5, 19, 1, 12)
Save to S[19, 12]
case1_case2 t[1, 12]
case2_case3 s[19, 13]
case3_case d[2, 7]
case3_case3 t[1, 21]
Right (5, 19, 1, 11)
Save to S[19, 11]
case1_case2 t[1, 11]
case2_case3 s[19, 12]
case3_case d[11, 7]
case3_case3 t[1, 12]
Right (5, 19, 1, 10)
Save to S[19, 10]
case1_case2 t[1, 10]
case2_case3 s[19, 11]
case3_case d[17, 7]
case3_case3 t[1, 11]
Right (5, 19, 1, 9)
Save to S[19, 9]
case1_case2 t[1, 9]
case2_case3 s[19, 10]
case3_case d[18, 7]
case3_case3 t[1, 10]
Right (5, 19, 1, 8)
Save to S[19, 8]
case1_case2 t[1, 8]
case2_case3 s[19, 9]
case3_case d[19, 7]
case3_case3 t[1, 9]
Right (5, 19, 1, 7)
Save to S[19, 7]
case1_case2 t[1, 7]
case2_case3 s[19, 8]
case3_case d[20, 7]
case3_case3 t[1, 8]
Right (5, 19, 1, 6)
Save to S[19, 6]
case1_case2 t[1, 6]
case2_case3 s[19, 7]
case3_case d[16, 7]
case3_case3 t[1, 11]
Right (5, 19, 1, 5)
Save to S[19, 5]
case1_case2 t[1, 5]
case2_case3 s[19, 6]
case3_case d[15, 7]
case3_case3 t[1, 11]
Right (5, 19, 1, 4)
Save to S[19, 4]
case1_case2 t[1, 4]
case2_case3 s[19, 5]
case3_case d[14, 7]
case3_case3 t[1, 11]
Right (5, 19, 1, 3)
Save to S[19, 3]
case1_case2 t[1, 3]
case2_case3 s[19, 4]
case3_case d[13, 7]
case3_case3 t[1, 11]
Right (5, 19, 1, 2)
Save to S[19, 2]
case1_case2 t[1, 2]
case2_case3 s[19, 3]
case3_case d[21, 7]
case3_case3 t[1, 3]
Right (5, 19, 1, 1)
Save to S[19, 1]
case1_case2 t[1, 1]
case2_case3 s[19, 2]
case3_case d[12, 7]
case3_case3 t[1, 11]
new Round C'
Right (5, 18, 1, 21)
Save to S[18, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 8]
Right (5, 18, 1, 20)
Save to S[18, 20]
case1_case1 s[19, 20]
case2_case3 s[18, 21]
case3_case d[6, 8]
case3_case1 s[19, 21]
Right (5, 18, 1, 19)
Save to S[18, 19]
case1_case1 s[19, 19]
case2_case3 s[18, 20]
case3_case d[7, 8]
case3_case1 s[19, 20]
Right (5, 18, 1, 18)
Save to S[18, 18]
case1_case1 s[19, 18]
case2_case3 s[18, 19]
case3_case d[8, 8]
case3_case1 s[19, 19]
Right (5, 18, 1, 17)
Save to S[18, 17]
case1_case1 s[19, 17]
case2_case3 s[18, 18]
case3_case d[9, 8]
case3_case1 s[19, 18]
Right (5, 18, 1, 16)
Save to S[18, 16]
case1_case1 s[19, 16]
case2_case3 s[18, 17]
case3_case d[10, 8]
case3_case1 s[19, 17]
Right (5, 18, 1, 15)
Save to S[18, 15]
case1_case1 s[19, 15]
case2_case3 s[18, 16]
case3_case d[5, 8]
case3_case1 s[19, 21]
Right (5, 18, 1, 14)
Save to S[18, 14]
case1_case1 s[19, 14]
case2_case3 s[18, 15]
case3_case d[4, 8]
case3_case1 s[19, 21]
Right (5, 18, 1, 13)
Save to S[18, 13]
case1_case1 s[19, 13]
case2_case3 s[18, 14]
case3_case d[3, 8]
case3_case1 s[19, 21]
Right (5, 18, 1, 12)
Save to S[18, 12]
case1_case1 s[19, 12]
case2_case3 s[18, 13]
case3_case d[2, 8]
case3_case1 s[19, 21]
Right (5, 18, 1, 11)
Save to S[18, 11]
case1_case1 s[19, 11]
case2_case3 s[18, 12]
case3_case d[11, 8]
case3_case1 s[19, 12]
Right (5, 18, 1, 10)
Save to S[18, 10]
case1_case1 s[19, 10]
case2_case3 s[18, 11]
case3_case d[17, 8]
case3_case1 s[19, 11]
Right (5, 18, 1, 9)
Save to S[18, 9]
case1_case1 s[19, 9]
case2_case3 s[18, 10]
case3_case d[18, 8]
case3_case1 s[19, 10]
Right (5, 18, 1, 8)
Save to S[18, 8]
case1_case1 s[19, 8]
case2_case3 s[18, 9]
case3_case d[19, 8]
case3_case1 s[19, 9]
Right (5, 18, 1, 7)
Save to S[18, 7]
case1_case1 s[19, 7]
case2_case3 s[18, 8]
case3_case d[20, 8]
case3_case1 s[19, 8]
Right (5, 18, 1, 6)
Save to S[18, 6]
case1_case1 s[19, 6]
case2_case3 s[18, 7]
case3_case d[16, 8]
case3_case1 s[19, 11]
Right (5, 18, 1, 5)
Save to S[18, 5]
case1_case1 s[19, 5]
case2_case3 s[18, 6]
case3_case d[15, 8]
case3_case1 s[19, 11]
Right (5, 18, 1, 4)
Save to S[18, 4]
case1_case1 s[19, 4]
case2_case3 s[18, 5]
case3_case d[14, 8]
case3_case1 s[19, 11]
Right (5, 18, 1, 3)
Save to S[18, 3]
case1_case1 s[19, 3]
case2_case3 s[18, 4]
case3_case d[13, 8]
case3_case1 s[19, 11]
Right (5, 18, 1, 2)
Save to S[18, 2]
case1_case1 s[19, 2]
case2_case3 s[18, 3]
case3_case d[21, 8]
case3_case1 s[19, 3]
Right (5, 18, 1, 1)
Save to S[18, 1]
case1_case1 s[19, 1]
case2_case3 s[18, 2]
case3_case d[12, 8]
case3_case1 s[19, 11]
new Round C'
Right (5, 17, 1, 21)
Save to S[17, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 9]
Right (5, 17, 1, 20)
Save to S[17, 20]
case1_case1 s[18, 20]
case2_case3 s[17, 21]
case3_case d[6, 9]
case3_case1 s[18, 21]
Right (5, 17, 1, 19)
Save to S[17, 19]
case1_case1 s[18, 19]
case2_case3 s[17, 20]
case3_case d[7, 9]
case3_case1 s[18, 20]
Right (5, 17, 1, 18)
Save to S[17, 18]
case1_case1 s[18, 18]
case2_case3 s[17, 19]
case3_case d[8, 9]
case3_case1 s[18, 19]
Right (5, 17, 1, 17)
Save to S[17, 17]
case1_case1 s[18, 17]
case2_case3 s[17, 18]
case3_case d[9, 9]
case3_case1 s[18, 18]
Right (5, 17, 1, 16)
Save to S[17, 16]
case1_case1 s[18, 16]
case2_case3 s[17, 17]
case3_case d[10, 9]
case3_case1 s[18, 17]
Right (5, 17, 1, 15)
Save to S[17, 15]
case1_case1 s[18, 15]
case2_case3 s[17, 16]
case3_case d[5, 9]
case3_case1 s[18, 21]
Right (5, 17, 1, 14)
Save to S[17, 14]
case1_case1 s[18, 14]
case2_case3 s[17, 15]
case3_case d[4, 9]
case3_case1 s[18, 21]
Right (5, 17, 1, 13)
Save to S[17, 13]
case1_case1 s[18, 13]
case2_case3 s[17, 14]
case3_case d[3, 9]
case3_case1 s[18, 21]
Right (5, 17, 1, 12)
Save to S[17, 12]
case1_case1 s[18, 12]
case2_case3 s[17, 13]
case3_case d[2, 9]
case3_case1 s[18, 21]
Right (5, 17, 1, 11)
Save to S[17, 11]
case1_case1 s[18, 11]
case2_case3 s[17, 12]
case3_case d[11, 9]
case3_case1 s[18, 12]
Right (5, 17, 1, 10)
Save to S[17, 10]
case1_case1 s[18, 10]
case2_case3 s[17, 11]
case3_case d[17, 9]
case3_case1 s[18, 11]
Right (5, 17, 1, 9)
Save to S[17, 9]
case1_case1 s[18, 9]
case2_case3 s[17, 10]
case3_case d[18, 9]
case3_case1 s[18, 10]
Right (5, 17, 1, 8)
Save to S[17, 8]
case1_case1 s[18, 8]
case2_case3 s[17, 9]
case3_case d[19, 9]
case3_case1 s[18, 9]
Right (5, 17, 1, 7)
Save to S[17, 7]
case1_case1 s[18, 7]
case2_case3 s[17, 8]
case3_case d[20, 9]
case3_case1 s[18, 8]
Right (5, 17, 1, 6)
Save to S[17, 6]
case1_case1 s[18, 6]
case2_case3 s[17, 7]
case3_case d[16, 9]
case3_case1 s[18, 11]
Right (5, 17, 1, 5)
Save to S[17, 5]
case1_case1 s[18, 5]
case2_case3 s[17, 6]
case3_case d[15, 9]
case3_case1 s[18, 11]
Right (5, 17, 1, 4)
Save to S[17, 4]
case1_case1 s[18, 4]
case2_case3 s[17, 5]
case3_case d[14, 9]
case3_case1 s[18, 11]
Right (5, 17, 1, 3)
Save to S[17, 3]
case1_case1 s[18, 3]
case2_case3 s[17, 4]
case3_case d[13, 9]
case3_case1 s[18, 11]
Right (5, 17, 1, 2)
Save to S[17, 2]
case1_case1 s[18, 2]
case2_case3 s[17, 3]
case3_case d[21, 9]
case3_case1 s[18, 3]
Right (5, 17, 1, 1)
Save to S[17, 1]
case1_case1 s[18, 1]
case2_case3 s[17, 2]
case3_case d[12, 9]
case3_case1 s[18, 11]
new Round C'
Right (5, 16, 1, 21)
Save to S[16, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 10]
Right (5, 16, 1, 20)
Save to S[16, 20]
case1_case1 s[17, 20]
case2_case3 s[16, 21]
case3_case d[6, 10]
case3_case1 s[17, 21]
Right (5, 16, 1, 19)
Save to S[16, 19]
case1_case1 s[17, 19]
case2_case3 s[16, 20]
case3_case d[7, 10]
case3_case1 s[17, 20]
Right (5, 16, 1, 18)
Save to S[16, 18]
case1_case1 s[17, 18]
case2_case3 s[16, 19]
case3_case d[8, 10]
case3_case1 s[17, 19]
Right (5, 16, 1, 17)
Save to S[16, 17]
case1_case1 s[17, 17]
case2_case3 s[16, 18]
case3_case d[9, 10]
case3_case1 s[17, 18]
Right (5, 16, 1, 16)
Save to S[16, 16]
case1_case1 s[17, 16]
case2_case3 s[16, 17]
case3_case d[10, 10]
case3_case1 s[17, 17]
Right (5, 16, 1, 15)
Save to S[16, 15]
case1_case1 s[17, 15]
case2_case3 s[16, 16]
case3_case d[5, 10]
case3_case1 s[17, 21]
Right (5, 16, 1, 14)
Save to S[16, 14]
case1_case1 s[17, 14]
case2_case3 s[16, 15]
case3_case d[4, 10]
case3_case1 s[17, 21]
Right (5, 16, 1, 13)
Save to S[16, 13]
case1_case1 s[17, 13]
case2_case3 s[16, 14]
case3_case d[3, 10]
case3_case1 s[17, 21]
Right (5, 16, 1, 12)
Save to S[16, 12]
case1_case1 s[17, 12]
case2_case3 s[16, 13]
case3_case d[2, 10]
case3_case1 s[17, 21]
Right (5, 16, 1, 11)
Save to S[16, 11]
case1_case1 s[17, 11]
case2_case3 s[16, 12]
case3_case d[11, 10]
case3_case1 s[17, 12]
Right (5, 16, 1, 10)
Save to S[16, 10]
case1_case1 s[17, 10]
case2_case3 s[16, 11]
case3_case d[17, 10]
case3_case1 s[17, 11]
Right (5, 16, 1, 9)
Save to S[16, 9]
case1_case1 s[17, 9]
case2_case3 s[16, 10]
case3_case d[18, 10]
case3_case1 s[17, 10]
Right (5, 16, 1, 8)
Save to S[16, 8]
case1_case1 s[17, 8]
case2_case3 s[16, 9]
case3_case d[19, 10]
case3_case1 s[17, 9]
Right (5, 16, 1, 7)
Save to S[16, 7]
case1_case1 s[17, 7]
case2_case3 s[16, 8]
case3_case d[20, 10]
case3_case1 s[17, 8]
Right (5, 16, 1, 6)
Save to S[16, 6]
case1_case1 s[17, 6]
case2_case3 s[16, 7]
case3_case d[16, 10]
case3_case1 s[17, 11]
Right (5, 16, 1, 5)
Save to S[16, 5]
case1_case1 s[17, 5]
case2_case3 s[16, 6]
case3_case d[15, 10]
case3_case1 s[17, 11]
Right (5, 16, 1, 4)
Save to S[16, 4]
case1_case1 s[17, 4]
case2_case3 s[16, 5]
case3_case d[14, 10]
case3_case1 s[17, 11]
Right (5, 16, 1, 3)
Save to S[16, 3]
case1_case1 s[17, 3]
case2_case3 s[16, 4]
case3_case d[13, 10]
case3_case1 s[17, 11]
Right (5, 16, 1, 2)
Save to S[16, 2]
case1_case1 s[17, 2]
case2_case3 s[16, 3]
case3_case d[21, 10]
case3_case1 s[17, 3]
Right (5, 16, 1, 1)
Save to S[16, 1]
case1_case1 s[17, 1]
case2_case3 s[16, 2]
case3_case d[12, 10]
case3_case1 s[17, 11]
new Round C'
Right (5, 15, 1, 21)
Save to S[15, 21]
case3 = 0
case1_case1 = s[16, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 5]
Right (5, 15, 1, 20)
Save to S[15, 20]
case1_case1 s[16, 20]
case2_case3 s[15, 21]
case3_case d[6, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 19)
Save to S[15, 19]
case1_case1 s[16, 19]
case2_case3 s[15, 20]
case3_case d[7, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 18)
Save to S[15, 18]
case1_case1 s[16, 18]
case2_case3 s[15, 19]
case3_case d[8, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 17)
Save to S[15, 17]
case1_case1 s[16, 17]
case2_case3 s[15, 18]
case3_case d[9, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 16)
Save to S[15, 16]
case1_case1 s[16, 16]
case2_case3 s[15, 17]
case3_case d[10, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 15)
Save to S[15, 15]
case1_case1 s[16, 15]
case2_case3 s[15, 16]
case3_case d[5, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 14)
Save to S[15, 14]
case1_case1 s[16, 14]
case2_case3 s[15, 15]
case3_case d[4, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 13)
Save to S[15, 13]
case1_case1 s[16, 13]
case2_case3 s[15, 14]
case3_case d[3, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 12)
Save to S[15, 12]
case1_case1 s[16, 12]
case2_case3 s[15, 13]
case3_case d[2, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 11)
Save to S[15, 11]
case1_case1 s[16, 11]
case2_case3 s[15, 12]
case3_case d[11, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 10)
Save to S[15, 10]
case1_case1 s[16, 10]
case2_case3 s[15, 11]
case3_case d[17, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 9)
Save to S[15, 9]
case1_case1 s[16, 9]
case2_case3 s[15, 10]
case3_case d[18, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 8)
Save to S[15, 8]
case1_case1 s[16, 8]
case2_case3 s[15, 9]
case3_case d[19, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 7)
Save to S[15, 7]
case1_case1 s[16, 7]
case2_case3 s[15, 8]
case3_case d[20, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 6)
Save to S[15, 6]
case1_case1 s[16, 6]
case2_case3 s[15, 7]
case3_case d[16, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 5)
Save to S[15, 5]
case1_case1 s[16, 5]
case2_case3 s[15, 6]
case3_case d[15, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 4)
Save to S[15, 4]
case1_case1 s[16, 4]
case2_case3 s[15, 5]
case3_case d[14, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 3)
Save to S[15, 3]
case1_case1 s[16, 3]
case2_case3 s[15, 4]
case3_case d[13, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 2)
Save to S[15, 2]
case1_case1 s[16, 2]
case2_case3 s[15, 3]
case3_case d[21, 5]
case3_case2 GcurrentForestCost - G(rG) 
Right (5, 15, 1, 1)
Save to S[15, 1]
case1_case1 s[16, 1]
case2_case3 s[15, 2]
case3_case d[12, 5]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 5] = S[15, 1]
save to D[0, 4] = S[15, 1]
Q[19] = S[19, 1]
Q[18] = S[18, 1]
Q[17] = S[17, 1]
Q[16] = S[16, 1]
Q[15] = S[15, 1]
T[1, 21] = S[15, 21]
T[1, 20] = S[15, 20]
T[1, 19] = S[15, 19]
T[1, 18] = S[15, 18]
T[1, 17] = S[15, 17]
T[1, 16] = S[15, 16]
T[1, 15] = S[15, 15]
T[1, 14] = S[15, 14]
T[1, 13] = S[15, 13]
T[1, 12] = S[15, 12]
T[1, 11] = S[15, 11]
T[1, 10] = S[15, 10]
T[1, 9] = S[15, 9]
T[1, 8] = S[15, 8]
T[1, 7] = S[15, 7]
T[1, 6] = S[15, 6]
T[1, 5] = S[15, 5]
T[1, 4] = S[15, 4]
T[1, 3] = S[15, 3]
T[1, 2] = S[15, 2]
T[1, 1] = S[15, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (5, 19, 0, 0)
Save to S[19, 0]
case3_case FcurrentForest - F(rF)
case1_case2 = t[0, 0]
case2_case2 = q[19]
case3_case3 D[0, 7]
new Round C'
Right (5, 18, 0, 0)
Save to S[18, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[19, 0]
case2_case2 = q[18]
case3_case3 D[0, 8]
new Round C'
Right (5, 17, 0, 0)
Save to S[17, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[18, 0]
case2_case2 = q[17]
case3_case3 D[0, 9]
new Round C'
Right (5, 16, 0, 0)
Save to S[16, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[17, 0]
case2_case2 = q[16]
case3_case3 D[0, 10]
new Round C'
Right (5, 15, 0, 0)
Save to S[15, 0]
case3 = 0
case1_case1 = s[16, 0]
case2_case2 = q[15]
case3_case3 D[0, 5]
T[0, 0] = S[15, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (4, 14, 21, 2)
Save to S[14, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 4]
T[21, 2] = S[14, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (4, 14, 20, 7)
Save to S[14, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 4]
T[20, 7] = S[14, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (4, 14, 19, 8)
Save to S[14, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 4]
T[19, 8] = S[14, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (4, 14, 18, 9)
Save to S[14, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 4]
T[18, 9] = S[14, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (4, 14, 17, 10)
Save to S[14, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 4]
Right (4, 14, 17, 9)
Save to S[14, 9]
case1_case2 t[17, 9]
case2_case3 s[14, 10]
case3_case d[18, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 17, 8)
Save to S[14, 8]
case1_case2 t[17, 8]
case2_case3 s[14, 9]
case3_case d[19, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 17, 7)
Save to S[14, 7]
case1_case2 t[17, 7]
case2_case3 s[14, 8]
case3_case d[20, 4]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 3] = S[14, 7]
Q[14] = S[14, 7]
T[17, 10] = S[14, 10]
T[17, 9] = S[14, 9]
T[17, 8] = S[14, 8]
T[17, 7] = S[14, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (4, 14, 16, 6)
Save to S[14, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[14]
case3_case3 D[16, 4]
save to D[15, 3] = S[14, 6]
Q[14] = S[14, 6]
T[16, 6] = S[14, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (4, 14, 15, 5)
Save to S[14, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[14]
case3_case3 D[15, 4]
save to D[14, 3] = S[14, 5]
Q[14] = S[14, 5]
T[15, 5] = S[14, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (4, 14, 14, 4)
Save to S[14, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[14]
case3_case3 D[14, 4]
save to D[13, 3] = S[14, 4]
Q[14] = S[14, 4]
T[14, 4] = S[14, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (4, 14, 13, 3)
Save to S[14, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[14]
case3_case3 D[13, 4]
Right (4, 14, 13, 2)
Save to S[14, 2]
case1_case2 t[13, 2]
case2_case3 s[14, 3]
case3_case d[21, 4]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 3] = S[14, 2]
Q[14] = S[14, 2]
T[13, 3] = S[14, 3]
T[13, 2] = S[14, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (4, 14, 12, 1)
Save to S[14, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[14]
case3_case3 D[12, 4]
T[12, 1] = S[14, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (4, 14, 11, 11)
Save to S[14, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 4]
T[11, 11] = S[14, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (4, 14, 10, 16)
Save to S[14, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 4]
T[10, 16] = S[14, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (4, 14, 9, 17)
Save to S[14, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 4]
T[9, 17] = S[14, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (4, 14, 8, 18)
Save to S[14, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 4]
T[8, 18] = S[14, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (4, 14, 7, 19)
Save to S[14, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 4]
T[7, 19] = S[14, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (4, 14, 6, 20)
Save to S[14, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 4]
Right (4, 14, 6, 19)
Save to S[14, 19]
case1_case2 t[6, 19]
case2_case3 s[14, 20]
case3_case d[7, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 6, 18)
Save to S[14, 18]
case1_case2 t[6, 18]
case2_case3 s[14, 19]
case3_case d[8, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 6, 17)
Save to S[14, 17]
case1_case2 t[6, 17]
case2_case3 s[14, 18]
case3_case d[9, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 6, 16)
Save to S[14, 16]
case1_case2 t[6, 16]
case2_case3 s[14, 17]
case3_case d[10, 4]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 3] = S[14, 16]
Q[14] = S[14, 16]
T[6, 20] = S[14, 20]
T[6, 19] = S[14, 19]
T[6, 18] = S[14, 18]
T[6, 17] = S[14, 17]
T[6, 16] = S[14, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (4, 14, 5, 15)
Save to S[14, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[14]
case3_case3 D[5, 4]
save to D[4, 3] = S[14, 15]
Q[14] = S[14, 15]
T[5, 15] = S[14, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (4, 14, 4, 14)
Save to S[14, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[14]
case3_case3 D[4, 4]
save to D[3, 3] = S[14, 14]
Q[14] = S[14, 14]
T[4, 14] = S[14, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (4, 14, 3, 13)
Save to S[14, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[14]
case3_case3 D[3, 4]
save to D[2, 3] = S[14, 13]
Q[14] = S[14, 13]
T[3, 13] = S[14, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (4, 14, 2, 12)
Save to S[14, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[14]
case3_case3 D[2, 4]
T[2, 12] = S[14, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (4, 14, 1, 21)
Save to S[14, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 4]
Right (4, 14, 1, 20)
Save to S[14, 20]
case1_case2 t[1, 20]
case2_case3 s[14, 21]
case3_case d[6, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 19)
Save to S[14, 19]
case1_case2 t[1, 19]
case2_case3 s[14, 20]
case3_case d[7, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 18)
Save to S[14, 18]
case1_case2 t[1, 18]
case2_case3 s[14, 19]
case3_case d[8, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 17)
Save to S[14, 17]
case1_case2 t[1, 17]
case2_case3 s[14, 18]
case3_case d[9, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 16)
Save to S[14, 16]
case1_case2 t[1, 16]
case2_case3 s[14, 17]
case3_case d[10, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 15)
Save to S[14, 15]
case1_case2 t[1, 15]
case2_case3 s[14, 16]
case3_case d[5, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 14)
Save to S[14, 14]
case1_case2 t[1, 14]
case2_case3 s[14, 15]
case3_case d[4, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 13)
Save to S[14, 13]
case1_case2 t[1, 13]
case2_case3 s[14, 14]
case3_case d[3, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 12)
Save to S[14, 12]
case1_case2 t[1, 12]
case2_case3 s[14, 13]
case3_case d[2, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 11)
Save to S[14, 11]
case1_case2 t[1, 11]
case2_case3 s[14, 12]
case3_case d[11, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 10)
Save to S[14, 10]
case1_case2 t[1, 10]
case2_case3 s[14, 11]
case3_case d[17, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 9)
Save to S[14, 9]
case1_case2 t[1, 9]
case2_case3 s[14, 10]
case3_case d[18, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 8)
Save to S[14, 8]
case1_case2 t[1, 8]
case2_case3 s[14, 9]
case3_case d[19, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 7)
Save to S[14, 7]
case1_case2 t[1, 7]
case2_case3 s[14, 8]
case3_case d[20, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 6)
Save to S[14, 6]
case1_case2 t[1, 6]
case2_case3 s[14, 7]
case3_case d[16, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 5)
Save to S[14, 5]
case1_case2 t[1, 5]
case2_case3 s[14, 6]
case3_case d[15, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 4)
Save to S[14, 4]
case1_case2 t[1, 4]
case2_case3 s[14, 5]
case3_case d[14, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 3)
Save to S[14, 3]
case1_case2 t[1, 3]
case2_case3 s[14, 4]
case3_case d[13, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 2)
Save to S[14, 2]
case1_case2 t[1, 2]
case2_case3 s[14, 3]
case3_case d[21, 4]
case3_case2 GcurrentForestCost - G(rG) 
Right (4, 14, 1, 1)
Save to S[14, 1]
case1_case2 t[1, 1]
case2_case3 s[14, 2]
case3_case d[12, 4]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 3] = S[14, 1]
Q[14] = S[14, 1]
T[1, 21] = S[14, 21]
T[1, 20] = S[14, 20]
T[1, 19] = S[14, 19]
T[1, 18] = S[14, 18]
T[1, 17] = S[14, 17]
T[1, 16] = S[14, 16]
T[1, 15] = S[14, 15]
T[1, 14] = S[14, 14]
T[1, 13] = S[14, 13]
T[1, 12] = S[14, 12]
T[1, 11] = S[14, 11]
T[1, 10] = S[14, 10]
T[1, 9] = S[14, 9]
T[1, 8] = S[14, 8]
T[1, 7] = S[14, 7]
T[1, 6] = S[14, 6]
T[1, 5] = S[14, 5]
T[1, 4] = S[14, 4]
T[1, 3] = S[14, 3]
T[1, 2] = S[14, 2]
T[1, 1] = S[14, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (4, 14, 0, 0)
Save to S[14, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[14]
case3_case3 D[0, 4]
T[0, 0] = S[14, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (3, 13, 21, 2)
Save to S[13, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 3]
T[21, 2] = S[13, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (3, 13, 20, 7)
Save to S[13, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 3]
T[20, 7] = S[13, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (3, 13, 19, 8)
Save to S[13, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 3]
T[19, 8] = S[13, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (3, 13, 18, 9)
Save to S[13, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 3]
T[18, 9] = S[13, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (3, 13, 17, 10)
Save to S[13, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 3]
Right (3, 13, 17, 9)
Save to S[13, 9]
case1_case2 t[17, 9]
case2_case3 s[13, 10]
case3_case d[18, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 17, 8)
Save to S[13, 8]
case1_case2 t[17, 8]
case2_case3 s[13, 9]
case3_case d[19, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 17, 7)
Save to S[13, 7]
case1_case2 t[17, 7]
case2_case3 s[13, 8]
case3_case d[20, 3]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 2] = S[13, 7]
Q[13] = S[13, 7]
T[17, 10] = S[13, 10]
T[17, 9] = S[13, 9]
T[17, 8] = S[13, 8]
T[17, 7] = S[13, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (3, 13, 16, 6)
Save to S[13, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[13]
case3_case3 D[16, 3]
save to D[15, 2] = S[13, 6]
Q[13] = S[13, 6]
T[16, 6] = S[13, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (3, 13, 15, 5)
Save to S[13, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[13]
case3_case3 D[15, 3]
save to D[14, 2] = S[13, 5]
Q[13] = S[13, 5]
T[15, 5] = S[13, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (3, 13, 14, 4)
Save to S[13, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[13]
case3_case3 D[14, 3]
save to D[13, 2] = S[13, 4]
Q[13] = S[13, 4]
T[14, 4] = S[13, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (3, 13, 13, 3)
Save to S[13, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[13]
case3_case3 D[13, 3]
Right (3, 13, 13, 2)
Save to S[13, 2]
case1_case2 t[13, 2]
case2_case3 s[13, 3]
case3_case d[21, 3]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 2] = S[13, 2]
Q[13] = S[13, 2]
T[13, 3] = S[13, 3]
T[13, 2] = S[13, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (3, 13, 12, 1)
Save to S[13, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[13]
case3_case3 D[12, 3]
T[12, 1] = S[13, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (3, 13, 11, 11)
Save to S[13, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 3]
T[11, 11] = S[13, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (3, 13, 10, 16)
Save to S[13, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 3]
T[10, 16] = S[13, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (3, 13, 9, 17)
Save to S[13, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 3]
T[9, 17] = S[13, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (3, 13, 8, 18)
Save to S[13, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 3]
T[8, 18] = S[13, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (3, 13, 7, 19)
Save to S[13, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 3]
T[7, 19] = S[13, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (3, 13, 6, 20)
Save to S[13, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 3]
Right (3, 13, 6, 19)
Save to S[13, 19]
case1_case2 t[6, 19]
case2_case3 s[13, 20]
case3_case d[7, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 6, 18)
Save to S[13, 18]
case1_case2 t[6, 18]
case2_case3 s[13, 19]
case3_case d[8, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 6, 17)
Save to S[13, 17]
case1_case2 t[6, 17]
case2_case3 s[13, 18]
case3_case d[9, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 6, 16)
Save to S[13, 16]
case1_case2 t[6, 16]
case2_case3 s[13, 17]
case3_case d[10, 3]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 2] = S[13, 16]
Q[13] = S[13, 16]
T[6, 20] = S[13, 20]
T[6, 19] = S[13, 19]
T[6, 18] = S[13, 18]
T[6, 17] = S[13, 17]
T[6, 16] = S[13, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (3, 13, 5, 15)
Save to S[13, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[13]
case3_case3 D[5, 3]
save to D[4, 2] = S[13, 15]
Q[13] = S[13, 15]
T[5, 15] = S[13, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (3, 13, 4, 14)
Save to S[13, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[13]
case3_case3 D[4, 3]
save to D[3, 2] = S[13, 14]
Q[13] = S[13, 14]
T[4, 14] = S[13, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (3, 13, 3, 13)
Save to S[13, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[13]
case3_case3 D[3, 3]
save to D[2, 2] = S[13, 13]
Q[13] = S[13, 13]
T[3, 13] = S[13, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (3, 13, 2, 12)
Save to S[13, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[13]
case3_case3 D[2, 3]
T[2, 12] = S[13, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (3, 13, 1, 21)
Save to S[13, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 3]
Right (3, 13, 1, 20)
Save to S[13, 20]
case1_case2 t[1, 20]
case2_case3 s[13, 21]
case3_case d[6, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 19)
Save to S[13, 19]
case1_case2 t[1, 19]
case2_case3 s[13, 20]
case3_case d[7, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 18)
Save to S[13, 18]
case1_case2 t[1, 18]
case2_case3 s[13, 19]
case3_case d[8, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 17)
Save to S[13, 17]
case1_case2 t[1, 17]
case2_case3 s[13, 18]
case3_case d[9, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 16)
Save to S[13, 16]
case1_case2 t[1, 16]
case2_case3 s[13, 17]
case3_case d[10, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 15)
Save to S[13, 15]
case1_case2 t[1, 15]
case2_case3 s[13, 16]
case3_case d[5, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 14)
Save to S[13, 14]
case1_case2 t[1, 14]
case2_case3 s[13, 15]
case3_case d[4, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 13)
Save to S[13, 13]
case1_case2 t[1, 13]
case2_case3 s[13, 14]
case3_case d[3, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 12)
Save to S[13, 12]
case1_case2 t[1, 12]
case2_case3 s[13, 13]
case3_case d[2, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 11)
Save to S[13, 11]
case1_case2 t[1, 11]
case2_case3 s[13, 12]
case3_case d[11, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 10)
Save to S[13, 10]
case1_case2 t[1, 10]
case2_case3 s[13, 11]
case3_case d[17, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 9)
Save to S[13, 9]
case1_case2 t[1, 9]
case2_case3 s[13, 10]
case3_case d[18, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 8)
Save to S[13, 8]
case1_case2 t[1, 8]
case2_case3 s[13, 9]
case3_case d[19, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 7)
Save to S[13, 7]
case1_case2 t[1, 7]
case2_case3 s[13, 8]
case3_case d[20, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 6)
Save to S[13, 6]
case1_case2 t[1, 6]
case2_case3 s[13, 7]
case3_case d[16, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 5)
Save to S[13, 5]
case1_case2 t[1, 5]
case2_case3 s[13, 6]
case3_case d[15, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 4)
Save to S[13, 4]
case1_case2 t[1, 4]
case2_case3 s[13, 5]
case3_case d[14, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 3)
Save to S[13, 3]
case1_case2 t[1, 3]
case2_case3 s[13, 4]
case3_case d[13, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 2)
Save to S[13, 2]
case1_case2 t[1, 2]
case2_case3 s[13, 3]
case3_case d[21, 3]
case3_case2 GcurrentForestCost - G(rG) 
Right (3, 13, 1, 1)
Save to S[13, 1]
case1_case2 t[1, 1]
case2_case3 s[13, 2]
case3_case d[12, 3]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 2] = S[13, 1]
Q[13] = S[13, 1]
T[1, 21] = S[13, 21]
T[1, 20] = S[13, 20]
T[1, 19] = S[13, 19]
T[1, 18] = S[13, 18]
T[1, 17] = S[13, 17]
T[1, 16] = S[13, 16]
T[1, 15] = S[13, 15]
T[1, 14] = S[13, 14]
T[1, 13] = S[13, 13]
T[1, 12] = S[13, 12]
T[1, 11] = S[13, 11]
T[1, 10] = S[13, 10]
T[1, 9] = S[13, 9]
T[1, 8] = S[13, 8]
T[1, 7] = S[13, 7]
T[1, 6] = S[13, 6]
T[1, 5] = S[13, 5]
T[1, 4] = S[13, 4]
T[1, 3] = S[13, 3]
T[1, 2] = S[13, 2]
T[1, 1] = S[13, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (3, 13, 0, 0)
Save to S[13, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[13]
case3_case3 D[0, 3]
T[0, 0] = S[13, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (2, 12, 21, 2)
Save to S[12, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 2]
T[21, 2] = S[12, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (2, 12, 20, 7)
Save to S[12, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 2]
T[20, 7] = S[12, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (2, 12, 19, 8)
Save to S[12, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 2]
T[19, 8] = S[12, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (2, 12, 18, 9)
Save to S[12, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 2]
T[18, 9] = S[12, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (2, 12, 17, 10)
Save to S[12, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 2]
Right (2, 12, 17, 9)
Save to S[12, 9]
case1_case2 t[17, 9]
case2_case3 s[12, 10]
case3_case d[18, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 17, 8)
Save to S[12, 8]
case1_case2 t[17, 8]
case2_case3 s[12, 9]
case3_case d[19, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 17, 7)
Save to S[12, 7]
case1_case2 t[17, 7]
case2_case3 s[12, 8]
case3_case d[20, 2]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 1] = S[12, 7]
Q[12] = S[12, 7]
T[17, 10] = S[12, 10]
T[17, 9] = S[12, 9]
T[17, 8] = S[12, 8]
T[17, 7] = S[12, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (2, 12, 16, 6)
Save to S[12, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[12]
case3_case3 D[16, 2]
save to D[15, 1] = S[12, 6]
Q[12] = S[12, 6]
T[16, 6] = S[12, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (2, 12, 15, 5)
Save to S[12, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[12]
case3_case3 D[15, 2]
save to D[14, 1] = S[12, 5]
Q[12] = S[12, 5]
T[15, 5] = S[12, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (2, 12, 14, 4)
Save to S[12, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[12]
case3_case3 D[14, 2]
save to D[13, 1] = S[12, 4]
Q[12] = S[12, 4]
T[14, 4] = S[12, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (2, 12, 13, 3)
Save to S[12, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[12]
case3_case3 D[13, 2]
Right (2, 12, 13, 2)
Save to S[12, 2]
case1_case2 t[13, 2]
case2_case3 s[12, 3]
case3_case d[21, 2]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 1] = S[12, 2]
Q[12] = S[12, 2]
T[13, 3] = S[12, 3]
T[13, 2] = S[12, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (2, 12, 12, 1)
Save to S[12, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[12]
case3_case3 D[12, 2]
T[12, 1] = S[12, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (2, 12, 11, 11)
Save to S[12, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 2]
T[11, 11] = S[12, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (2, 12, 10, 16)
Save to S[12, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 2]
T[10, 16] = S[12, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (2, 12, 9, 17)
Save to S[12, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 2]
T[9, 17] = S[12, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (2, 12, 8, 18)
Save to S[12, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 2]
T[8, 18] = S[12, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (2, 12, 7, 19)
Save to S[12, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 2]
T[7, 19] = S[12, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (2, 12, 6, 20)
Save to S[12, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 2]
Right (2, 12, 6, 19)
Save to S[12, 19]
case1_case2 t[6, 19]
case2_case3 s[12, 20]
case3_case d[7, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 6, 18)
Save to S[12, 18]
case1_case2 t[6, 18]
case2_case3 s[12, 19]
case3_case d[8, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 6, 17)
Save to S[12, 17]
case1_case2 t[6, 17]
case2_case3 s[12, 18]
case3_case d[9, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 6, 16)
Save to S[12, 16]
case1_case2 t[6, 16]
case2_case3 s[12, 17]
case3_case d[10, 2]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 1] = S[12, 16]
Q[12] = S[12, 16]
T[6, 20] = S[12, 20]
T[6, 19] = S[12, 19]
T[6, 18] = S[12, 18]
T[6, 17] = S[12, 17]
T[6, 16] = S[12, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (2, 12, 5, 15)
Save to S[12, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[12]
case3_case3 D[5, 2]
save to D[4, 1] = S[12, 15]
Q[12] = S[12, 15]
T[5, 15] = S[12, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (2, 12, 4, 14)
Save to S[12, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[12]
case3_case3 D[4, 2]
save to D[3, 1] = S[12, 14]
Q[12] = S[12, 14]
T[4, 14] = S[12, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (2, 12, 3, 13)
Save to S[12, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[12]
case3_case3 D[3, 2]
save to D[2, 1] = S[12, 13]
Q[12] = S[12, 13]
T[3, 13] = S[12, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (2, 12, 2, 12)
Save to S[12, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[12]
case3_case3 D[2, 2]
T[2, 12] = S[12, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (2, 12, 1, 21)
Save to S[12, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 2]
Right (2, 12, 1, 20)
Save to S[12, 20]
case1_case2 t[1, 20]
case2_case3 s[12, 21]
case3_case d[6, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 19)
Save to S[12, 19]
case1_case2 t[1, 19]
case2_case3 s[12, 20]
case3_case d[7, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 18)
Save to S[12, 18]
case1_case2 t[1, 18]
case2_case3 s[12, 19]
case3_case d[8, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 17)
Save to S[12, 17]
case1_case2 t[1, 17]
case2_case3 s[12, 18]
case3_case d[9, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 16)
Save to S[12, 16]
case1_case2 t[1, 16]
case2_case3 s[12, 17]
case3_case d[10, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 15)
Save to S[12, 15]
case1_case2 t[1, 15]
case2_case3 s[12, 16]
case3_case d[5, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 14)
Save to S[12, 14]
case1_case2 t[1, 14]
case2_case3 s[12, 15]
case3_case d[4, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 13)
Save to S[12, 13]
case1_case2 t[1, 13]
case2_case3 s[12, 14]
case3_case d[3, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 12)
Save to S[12, 12]
case1_case2 t[1, 12]
case2_case3 s[12, 13]
case3_case d[2, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 11)
Save to S[12, 11]
case1_case2 t[1, 11]
case2_case3 s[12, 12]
case3_case d[11, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 10)
Save to S[12, 10]
case1_case2 t[1, 10]
case2_case3 s[12, 11]
case3_case d[17, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 9)
Save to S[12, 9]
case1_case2 t[1, 9]
case2_case3 s[12, 10]
case3_case d[18, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 8)
Save to S[12, 8]
case1_case2 t[1, 8]
case2_case3 s[12, 9]
case3_case d[19, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 7)
Save to S[12, 7]
case1_case2 t[1, 7]
case2_case3 s[12, 8]
case3_case d[20, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 6)
Save to S[12, 6]
case1_case2 t[1, 6]
case2_case3 s[12, 7]
case3_case d[16, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 5)
Save to S[12, 5]
case1_case2 t[1, 5]
case2_case3 s[12, 6]
case3_case d[15, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 4)
Save to S[12, 4]
case1_case2 t[1, 4]
case2_case3 s[12, 5]
case3_case d[14, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 3)
Save to S[12, 3]
case1_case2 t[1, 3]
case2_case3 s[12, 4]
case3_case d[13, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 2)
Save to S[12, 2]
case1_case2 t[1, 2]
case2_case3 s[12, 3]
case3_case d[21, 2]
case3_case2 GcurrentForestCost - G(rG) 
Right (2, 12, 1, 1)
Save to S[12, 1]
case1_case2 t[1, 1]
case2_case3 s[12, 2]
case3_case d[12, 2]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 1] = S[12, 1]
Q[12] = S[12, 1]
T[1, 21] = S[12, 21]
T[1, 20] = S[12, 20]
T[1, 19] = S[12, 19]
T[1, 18] = S[12, 18]
T[1, 17] = S[12, 17]
T[1, 16] = S[12, 16]
T[1, 15] = S[12, 15]
T[1, 14] = S[12, 14]
T[1, 13] = S[12, 13]
T[1, 12] = S[12, 12]
T[1, 11] = S[12, 11]
T[1, 10] = S[12, 10]
T[1, 9] = S[12, 9]
T[1, 8] = S[12, 8]
T[1, 7] = S[12, 7]
T[1, 6] = S[12, 6]
T[1, 5] = S[12, 5]
T[1, 4] = S[12, 4]
T[1, 3] = S[12, 3]
T[1, 2] = S[12, 2]
T[1, 1] = S[12, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (2, 12, 0, 0)
Save to S[12, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[12]
case3_case3 D[0, 2]
T[0, 0] = S[12, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (1, 11, 21, 2)
Save to S[11, 2]
case3 = 0
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 1]
T[21, 2] = S[11, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (1, 11, 20, 7)
Save to S[11, 7]
case3 = 0
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 1]
T[20, 7] = S[11, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (1, 11, 19, 8)
Save to S[11, 8]
case3 = 0
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 1]
T[19, 8] = S[11, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (1, 11, 18, 9)
Save to S[11, 9]
case3 = 0
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 1]
T[18, 9] = S[11, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (1, 11, 17, 10)
Save to S[11, 10]
case3 = 0
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 1]
Right (1, 11, 17, 9)
Save to S[11, 9]
case1_case2 t[17, 9]
case2_case3 s[11, 10]
case3_case d[18, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 17, 8)
Save to S[11, 8]
case1_case2 t[17, 8]
case2_case3 s[11, 9]
case3_case d[19, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 17, 7)
Save to S[11, 7]
case1_case2 t[17, 7]
case2_case3 s[11, 8]
case3_case d[20, 1]
case3_case2 GcurrentForestCost - G(rG) 
Q[11] = S[11, 7]
T[17, 10] = S[11, 10]
T[17, 9] = S[11, 9]
T[17, 8] = S[11, 8]
T[17, 7] = S[11, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (1, 11, 16, 6)
Save to S[11, 6]
case3 = 0
case1_case2 = t[16, 6]
case2_case2 = q[11]
case3_case3 D[16, 1]
Q[11] = S[11, 6]
T[16, 6] = S[11, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (1, 11, 15, 5)
Save to S[11, 5]
case3 = 0
case1_case2 = t[15, 5]
case2_case2 = q[11]
case3_case3 D[15, 1]
Q[11] = S[11, 5]
T[15, 5] = S[11, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (1, 11, 14, 4)
Save to S[11, 4]
case3 = 0
case1_case2 = t[14, 4]
case2_case2 = q[11]
case3_case3 D[14, 1]
Q[11] = S[11, 4]
T[14, 4] = S[11, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (1, 11, 13, 3)
Save to S[11, 3]
case3 = 0
case1_case2 = t[13, 3]
case2_case2 = q[11]
case3_case3 D[13, 1]
Right (1, 11, 13, 2)
Save to S[11, 2]
case1_case2 t[13, 2]
case2_case3 s[11, 3]
case3_case d[21, 1]
case3_case2 GcurrentForestCost - G(rG) 
Q[11] = S[11, 2]
T[13, 3] = S[11, 3]
T[13, 2] = S[11, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (1, 11, 12, 1)
Save to S[11, 1]
case3 = 0
case1_case2 = t[12, 1]
case2_case2 = q[11]
case3_case3 D[12, 1]
T[12, 1] = S[11, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (1, 11, 11, 11)
Save to S[11, 11]
case3 = 0
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 1]
T[11, 11] = S[11, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (1, 11, 10, 16)
Save to S[11, 16]
case3 = 0
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 1]
T[10, 16] = S[11, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (1, 11, 9, 17)
Save to S[11, 17]
case3 = 0
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 1]
T[9, 17] = S[11, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (1, 11, 8, 18)
Save to S[11, 18]
case3 = 0
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 1]
T[8, 18] = S[11, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (1, 11, 7, 19)
Save to S[11, 19]
case3 = 0
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 1]
T[7, 19] = S[11, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (1, 11, 6, 20)
Save to S[11, 20]
case3 = 0
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 1]
Right (1, 11, 6, 19)
Save to S[11, 19]
case1_case2 t[6, 19]
case2_case3 s[11, 20]
case3_case d[7, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 6, 18)
Save to S[11, 18]
case1_case2 t[6, 18]
case2_case3 s[11, 19]
case3_case d[8, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 6, 17)
Save to S[11, 17]
case1_case2 t[6, 17]
case2_case3 s[11, 18]
case3_case d[9, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 6, 16)
Save to S[11, 16]
case1_case2 t[6, 16]
case2_case3 s[11, 17]
case3_case d[10, 1]
case3_case2 GcurrentForestCost - G(rG) 
Q[11] = S[11, 16]
T[6, 20] = S[11, 20]
T[6, 19] = S[11, 19]
T[6, 18] = S[11, 18]
T[6, 17] = S[11, 17]
T[6, 16] = S[11, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (1, 11, 5, 15)
Save to S[11, 15]
case3 = 0
case1_case2 = t[5, 15]
case2_case2 = q[11]
case3_case3 D[5, 1]
Q[11] = S[11, 15]
T[5, 15] = S[11, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (1, 11, 4, 14)
Save to S[11, 14]
case3 = 0
case1_case2 = t[4, 14]
case2_case2 = q[11]
case3_case3 D[4, 1]
Q[11] = S[11, 14]
T[4, 14] = S[11, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (1, 11, 3, 13)
Save to S[11, 13]
case3 = 0
case1_case2 = t[3, 13]
case2_case2 = q[11]
case3_case3 D[3, 1]
Q[11] = S[11, 13]
T[3, 13] = S[11, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (1, 11, 2, 12)
Save to S[11, 12]
case3 = 0
case1_case2 = t[2, 12]
case2_case2 = q[11]
case3_case3 D[2, 1]
T[2, 12] = S[11, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (1, 11, 1, 21)
Save to S[11, 21]
case3 = 0
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 1]
Right (1, 11, 1, 20)
Save to S[11, 20]
case1_case2 t[1, 20]
case2_case3 s[11, 21]
case3_case d[6, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 19)
Save to S[11, 19]
case1_case2 t[1, 19]
case2_case3 s[11, 20]
case3_case d[7, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 18)
Save to S[11, 18]
case1_case2 t[1, 18]
case2_case3 s[11, 19]
case3_case d[8, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 17)
Save to S[11, 17]
case1_case2 t[1, 17]
case2_case3 s[11, 18]
case3_case d[9, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 16)
Save to S[11, 16]
case1_case2 t[1, 16]
case2_case3 s[11, 17]
case3_case d[10, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 15)
Save to S[11, 15]
case1_case2 t[1, 15]
case2_case3 s[11, 16]
case3_case d[5, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 14)
Save to S[11, 14]
case1_case2 t[1, 14]
case2_case3 s[11, 15]
case3_case d[4, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 13)
Save to S[11, 13]
case1_case2 t[1, 13]
case2_case3 s[11, 14]
case3_case d[3, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 12)
Save to S[11, 12]
case1_case2 t[1, 12]
case2_case3 s[11, 13]
case3_case d[2, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 11)
Save to S[11, 11]
case1_case2 t[1, 11]
case2_case3 s[11, 12]
case3_case d[11, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 10)
Save to S[11, 10]
case1_case2 t[1, 10]
case2_case3 s[11, 11]
case3_case d[17, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 9)
Save to S[11, 9]
case1_case2 t[1, 9]
case2_case3 s[11, 10]
case3_case d[18, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 8)
Save to S[11, 8]
case1_case2 t[1, 8]
case2_case3 s[11, 9]
case3_case d[19, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 7)
Save to S[11, 7]
case1_case2 t[1, 7]
case2_case3 s[11, 8]
case3_case d[20, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 6)
Save to S[11, 6]
case1_case2 t[1, 6]
case2_case3 s[11, 7]
case3_case d[16, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 5)
Save to S[11, 5]
case1_case2 t[1, 5]
case2_case3 s[11, 6]
case3_case d[15, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 4)
Save to S[11, 4]
case1_case2 t[1, 4]
case2_case3 s[11, 5]
case3_case d[14, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 3)
Save to S[11, 3]
case1_case2 t[1, 3]
case2_case3 s[11, 4]
case3_case d[13, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 2)
Save to S[11, 2]
case1_case2 t[1, 2]
case2_case3 s[11, 3]
case3_case d[21, 1]
case3_case2 GcurrentForestCost - G(rG) 
Right (1, 11, 1, 1)
Save to S[11, 1]
case1_case2 t[1, 1]
case2_case3 s[11, 2]
case3_case d[12, 1]
case3_case2 GcurrentForestCost - G(rG) 
Q[11] = S[11, 1]
T[1, 21] = S[11, 21]
T[1, 20] = S[11, 20]
T[1, 19] = S[11, 19]
T[1, 18] = S[11, 18]
T[1, 17] = S[11, 17]
T[1, 16] = S[11, 16]
T[1, 15] = S[11, 15]
T[1, 14] = S[11, 14]
T[1, 13] = S[11, 13]
T[1, 12] = S[11, 12]
T[1, 11] = S[11, 11]
T[1, 10] = S[11, 10]
T[1, 9] = S[11, 9]
T[1, 8] = S[11, 8]
T[1, 7] = S[11, 7]
T[1, 6] = S[11, 6]
T[1, 5] = S[11, 5]
T[1, 4] = S[11, 4]
T[1, 3] = S[11, 3]
T[1, 2] = S[11, 2]
T[1, 1] = S[11, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (1, 11, 0, 0)
Save to S[11, 0]
case3 = 0
case1_case2 = t[0, 0]
case2_case2 = q[11]
case3_case3 D[0, 1]
T[0, 0] = S[11, 0]
initial fn and ft endG = 0 endG + sizeG = 22
new Round B'
updateFnArray(-1, 2, 0)
O fn[2] = fn[23] = 2
O fn[23] = 2
updateFtArray(-1, 2)
ft[2] = -1
new Round C'
Right (0, 10, 21, 2)
Save to S[10, 2]
case3_case FcurrentForest - F(rF)
case1_case2 = t[21, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 16]
new Round C'
Right (0, 9, 21, 2)
Save to S[9, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 17]
new Round C'
Right (0, 8, 21, 2)
Save to S[8, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 18]
new Round C'
Right (0, 7, 21, 2)
Save to S[7, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 19]
new Round C'
Right (0, 6, 21, 2)
Save to S[6, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 15]
new Round C'
Right (0, 5, 21, 2)
Save to S[5, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 14]
new Round C'
Right (0, 4, 21, 2)
Save to S[4, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 13]
new Round C'
Right (0, 3, 21, 2)
Save to S[3, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 12]
new Round C'
Right (0, 2, 21, 2)
Save to S[2, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 20]
new Round C'
Right (0, 1, 21, 2)
Save to S[1, 2]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 11]
new Round C'
Right (0, 0, 21, 2)
Save to S[0, 2]
case3 = 0
case1_case1 = s[1, 2]
case2_case1 = FcurrentForestCost
case3_case3 D[21, 0]
T[21, 2] = S[0, 2]
new Round B'
updateFnArray(2, 7, 0)
fn[7] = fn[2] = 7
fn[2] = 7
updateFtArray(2, 7)
ft[7] = 2
new Round C'
Right (0, 10, 20, 7)
Save to S[10, 7]
case3_case FcurrentForest - F(rF)
case1_case2 = t[20, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 16]
new Round C'
Right (0, 9, 20, 7)
Save to S[9, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 17]
new Round C'
Right (0, 8, 20, 7)
Save to S[8, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 18]
new Round C'
Right (0, 7, 20, 7)
Save to S[7, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 19]
new Round C'
Right (0, 6, 20, 7)
Save to S[6, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 15]
new Round C'
Right (0, 5, 20, 7)
Save to S[5, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 14]
new Round C'
Right (0, 4, 20, 7)
Save to S[4, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 13]
new Round C'
Right (0, 3, 20, 7)
Save to S[3, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 12]
new Round C'
Right (0, 2, 20, 7)
Save to S[2, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 20]
new Round C'
Right (0, 1, 20, 7)
Save to S[1, 7]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 11]
new Round C'
Right (0, 0, 20, 7)
Save to S[0, 7]
case3 = 0
case1_case1 = s[1, 7]
case2_case1 = FcurrentForestCost
case3_case3 D[20, 0]
T[20, 7] = S[0, 7]
new Round B'
updateFnArray(7, 8, 0)
fn[8] = fn[7] = 8
fn[7] = 8
updateFtArray(7, 8)
ft[8] = 7
new Round C'
Right (0, 10, 19, 8)
Save to S[10, 8]
case3_case FcurrentForest - F(rF)
case1_case2 = t[19, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 16]
new Round C'
Right (0, 9, 19, 8)
Save to S[9, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 17]
new Round C'
Right (0, 8, 19, 8)
Save to S[8, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 18]
new Round C'
Right (0, 7, 19, 8)
Save to S[7, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 19]
new Round C'
Right (0, 6, 19, 8)
Save to S[6, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 15]
new Round C'
Right (0, 5, 19, 8)
Save to S[5, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 14]
new Round C'
Right (0, 4, 19, 8)
Save to S[4, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 13]
new Round C'
Right (0, 3, 19, 8)
Save to S[3, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 12]
new Round C'
Right (0, 2, 19, 8)
Save to S[2, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 20]
new Round C'
Right (0, 1, 19, 8)
Save to S[1, 8]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 11]
new Round C'
Right (0, 0, 19, 8)
Save to S[0, 8]
case3 = 0
case1_case1 = s[1, 8]
case2_case1 = FcurrentForestCost
case3_case3 D[19, 0]
T[19, 8] = S[0, 8]
new Round B'
updateFnArray(8, 9, 0)
fn[9] = fn[8] = 9
fn[8] = 9
updateFtArray(8, 9)
ft[9] = 8
new Round C'
Right (0, 10, 18, 9)
Save to S[10, 9]
case3_case FcurrentForest - F(rF)
case1_case2 = t[18, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 16]
new Round C'
Right (0, 9, 18, 9)
Save to S[9, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 17]
new Round C'
Right (0, 8, 18, 9)
Save to S[8, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 18]
new Round C'
Right (0, 7, 18, 9)
Save to S[7, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 19]
new Round C'
Right (0, 6, 18, 9)
Save to S[6, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 15]
new Round C'
Right (0, 5, 18, 9)
Save to S[5, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 14]
new Round C'
Right (0, 4, 18, 9)
Save to S[4, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 13]
new Round C'
Right (0, 3, 18, 9)
Save to S[3, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 12]
new Round C'
Right (0, 2, 18, 9)
Save to S[2, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 20]
new Round C'
Right (0, 1, 18, 9)
Save to S[1, 9]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 11]
new Round C'
Right (0, 0, 18, 9)
Save to S[0, 9]
case3 = 0
case1_case1 = s[1, 9]
case2_case1 = FcurrentForestCost
case3_case3 D[18, 0]
T[18, 9] = S[0, 9]
new Round B'
updateFnArray(9, 10, 0)
fn[10] = fn[9] = 10
fn[9] = 10
updateFtArray(9, 10)
ft[10] = 9
new Round C'
Right (0, 10, 17, 10)
Save to S[10, 10]
case3_case FcurrentForest - F(rF)
case1_case2 = t[17, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 16]
Right (0, 10, 17, 9)
Save to S[10, 9]
case1_case2 t[17, 9]
case2_case3 s[10, 10]
case3_case d[18, 16]
case3_case3 t[17, 10]
Right (0, 10, 17, 8)
Save to S[10, 8]
case1_case2 t[17, 8]
case2_case3 s[10, 9]
case3_case d[19, 16]
case3_case3 t[17, 9]
Right (0, 10, 17, 7)
Save to S[10, 7]
case1_case2 t[17, 7]
case2_case3 s[10, 8]
case3_case d[20, 16]
case3_case3 t[17, 8]
new Round C'
Right (0, 9, 17, 10)
Save to S[9, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 17]
Right (0, 9, 17, 9)
Save to S[9, 9]
case1_case1 s[10, 9]
case2_case3 s[9, 10]
case3_case d[18, 17]
case3_case1 s[10, 10]
Right (0, 9, 17, 8)
Save to S[9, 8]
case1_case1 s[10, 8]
case2_case3 s[9, 9]
case3_case d[19, 17]
case3_case1 s[10, 9]
Right (0, 9, 17, 7)
Save to S[9, 7]
case1_case1 s[10, 7]
case2_case3 s[9, 8]
case3_case d[20, 17]
case3_case1 s[10, 8]
new Round C'
Right (0, 8, 17, 10)
Save to S[8, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 18]
Right (0, 8, 17, 9)
Save to S[8, 9]
case1_case1 s[9, 9]
case2_case3 s[8, 10]
case3_case d[18, 18]
case3_case1 s[9, 10]
Right (0, 8, 17, 8)
Save to S[8, 8]
case1_case1 s[9, 8]
case2_case3 s[8, 9]
case3_case d[19, 18]
case3_case1 s[9, 9]
Right (0, 8, 17, 7)
Save to S[8, 7]
case1_case1 s[9, 7]
case2_case3 s[8, 8]
case3_case d[20, 18]
case3_case1 s[9, 8]
new Round C'
Right (0, 7, 17, 10)
Save to S[7, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 19]
Right (0, 7, 17, 9)
Save to S[7, 9]
case1_case1 s[8, 9]
case2_case3 s[7, 10]
case3_case d[18, 19]
case3_case1 s[8, 10]
Right (0, 7, 17, 8)
Save to S[7, 8]
case1_case1 s[8, 8]
case2_case3 s[7, 9]
case3_case d[19, 19]
case3_case1 s[8, 9]
Right (0, 7, 17, 7)
Save to S[7, 7]
case1_case1 s[8, 7]
case2_case3 s[7, 8]
case3_case d[20, 19]
case3_case1 s[8, 8]
new Round C'
Right (0, 6, 17, 10)
Save to S[6, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 15]
Right (0, 6, 17, 9)
Save to S[6, 9]
case1_case1 s[7, 9]
case2_case3 s[6, 10]
case3_case d[18, 15]
case3_case3 t[17, 10]
Right (0, 6, 17, 8)
Save to S[6, 8]
case1_case1 s[7, 8]
case2_case3 s[6, 9]
case3_case d[19, 15]
case3_case3 t[17, 9]
Right (0, 6, 17, 7)
Save to S[6, 7]
case1_case1 s[7, 7]
case2_case3 s[6, 8]
case3_case d[20, 15]
case3_case3 t[17, 8]
new Round C'
Right (0, 5, 17, 10)
Save to S[5, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 14]
Right (0, 5, 17, 9)
Save to S[5, 9]
case1_case1 s[6, 9]
case2_case3 s[5, 10]
case3_case d[18, 14]
case3_case3 t[17, 10]
Right (0, 5, 17, 8)
Save to S[5, 8]
case1_case1 s[6, 8]
case2_case3 s[5, 9]
case3_case d[19, 14]
case3_case3 t[17, 9]
Right (0, 5, 17, 7)
Save to S[5, 7]
case1_case1 s[6, 7]
case2_case3 s[5, 8]
case3_case d[20, 14]
case3_case3 t[17, 8]
new Round C'
Right (0, 4, 17, 10)
Save to S[4, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 13]
Right (0, 4, 17, 9)
Save to S[4, 9]
case1_case1 s[5, 9]
case2_case3 s[4, 10]
case3_case d[18, 13]
case3_case3 t[17, 10]
Right (0, 4, 17, 8)
Save to S[4, 8]
case1_case1 s[5, 8]
case2_case3 s[4, 9]
case3_case d[19, 13]
case3_case3 t[17, 9]
Right (0, 4, 17, 7)
Save to S[4, 7]
case1_case1 s[5, 7]
case2_case3 s[4, 8]
case3_case d[20, 13]
case3_case3 t[17, 8]
new Round C'
Right (0, 3, 17, 10)
Save to S[3, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 12]
Right (0, 3, 17, 9)
Save to S[3, 9]
case1_case1 s[4, 9]
case2_case3 s[3, 10]
case3_case d[18, 12]
case3_case3 t[17, 10]
Right (0, 3, 17, 8)
Save to S[3, 8]
case1_case1 s[4, 8]
case2_case3 s[3, 9]
case3_case d[19, 12]
case3_case3 t[17, 9]
Right (0, 3, 17, 7)
Save to S[3, 7]
case1_case1 s[4, 7]
case2_case3 s[3, 8]
case3_case d[20, 12]
case3_case3 t[17, 8]
new Round C'
Right (0, 2, 17, 10)
Save to S[2, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 20]
Right (0, 2, 17, 9)
Save to S[2, 9]
case1_case1 s[3, 9]
case2_case3 s[2, 10]
case3_case d[18, 20]
case3_case1 s[3, 10]
Right (0, 2, 17, 8)
Save to S[2, 8]
case1_case1 s[3, 8]
case2_case3 s[2, 9]
case3_case d[19, 20]
case3_case1 s[3, 9]
Right (0, 2, 17, 7)
Save to S[2, 7]
case1_case1 s[3, 7]
case2_case3 s[2, 8]
case3_case d[20, 20]
case3_case1 s[3, 8]
new Round C'
Right (0, 1, 17, 10)
Save to S[1, 10]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 11]
Right (0, 1, 17, 9)
Save to S[1, 9]
case1_case1 s[2, 9]
case2_case3 s[1, 10]
case3_case d[18, 11]
case3_case3 t[17, 10]
Right (0, 1, 17, 8)
Save to S[1, 8]
case1_case1 s[2, 8]
case2_case3 s[1, 9]
case3_case d[19, 11]
case3_case3 t[17, 9]
Right (0, 1, 17, 7)
Save to S[1, 7]
case1_case1 s[2, 7]
case2_case3 s[1, 8]
case3_case d[20, 11]
case3_case3 t[17, 8]
new Round C'
Right (0, 0, 17, 10)
Save to S[0, 10]
case3 = 0
case1_case1 = s[1, 10]
case2_case1 = FcurrentForestCost
case3_case3 D[17, 0]
Right (0, 0, 17, 9)
Save to S[0, 9]
case1_case1 s[1, 9]
case2_case3 s[0, 10]
case3_case d[18, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 17, 8)
Save to S[0, 8]
case1_case1 s[1, 8]
case2_case3 s[0, 9]
case3_case d[19, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 17, 7)
Save to S[0, 7]
case1_case1 s[1, 7]
case2_case3 s[0, 8]
case3_case d[20, 0]
case3_case2 GcurrentForestCost - G(rG) 
save to D[16, 0] = S[0, 7]
Q[10] = S[10, 7]
Q[9] = S[9, 7]
Q[8] = S[8, 7]
Q[7] = S[7, 7]
Q[6] = S[6, 7]
Q[5] = S[5, 7]
Q[4] = S[4, 7]
Q[3] = S[3, 7]
Q[2] = S[2, 7]
Q[1] = S[1, 7]
Q[0] = S[0, 7]
T[17, 10] = S[0, 10]
T[17, 9] = S[0, 9]
T[17, 8] = S[0, 8]
T[17, 7] = S[0, 7]
new Round B'
updateFnArray(2, 6, 0)
fn[6] = fn[2] = 6
fn[2] = 6
updateFtArray(2, 6)
ft[6] = 2
ft[fn[6]] = 6
new Round C'
Right (0, 10, 16, 6)
Save to S[10, 6]
case3_case FcurrentForest - F(rF)
case1_case2 = t[16, 6]
case2_case2 = q[10]
case3_case3 D[16, 16]
new Round C'
Right (0, 9, 16, 6)
Save to S[9, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 6]
case2_case2 = q[9]
case3_case3 D[16, 17]
new Round C'
Right (0, 8, 16, 6)
Save to S[8, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 6]
case2_case2 = q[8]
case3_case3 D[16, 18]
new Round C'
Right (0, 7, 16, 6)
Save to S[7, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 6]
case2_case2 = q[7]
case3_case3 D[16, 19]
new Round C'
Right (0, 6, 16, 6)
Save to S[6, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 6]
case2_case2 = q[6]
case3_case3 D[16, 15]
new Round C'
Right (0, 5, 16, 6)
Save to S[5, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 6]
case2_case2 = q[5]
case3_case3 D[16, 14]
new Round C'
Right (0, 4, 16, 6)
Save to S[4, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 6]
case2_case2 = q[4]
case3_case3 D[16, 13]
new Round C'
Right (0, 3, 16, 6)
Save to S[3, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 6]
case2_case2 = q[3]
case3_case3 D[16, 12]
new Round C'
Right (0, 2, 16, 6)
Save to S[2, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 6]
case2_case2 = q[2]
case3_case3 D[16, 20]
new Round C'
Right (0, 1, 16, 6)
Save to S[1, 6]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 6]
case2_case2 = q[1]
case3_case3 D[16, 11]
new Round C'
Right (0, 0, 16, 6)
Save to S[0, 6]
case3 = 0
case1_case1 = s[1, 6]
case2_case2 = q[0]
case3_case3 D[16, 0]
save to D[15, 0] = S[0, 6]
Q[10] = S[10, 6]
Q[9] = S[9, 6]
Q[8] = S[8, 6]
Q[7] = S[7, 6]
Q[6] = S[6, 6]
Q[5] = S[5, 6]
Q[4] = S[4, 6]
Q[3] = S[3, 6]
Q[2] = S[2, 6]
Q[1] = S[1, 6]
Q[0] = S[0, 6]
T[16, 6] = S[0, 6]
new Round B'
updateFnArray(2, 5, 0)
fn[5] = fn[2] = 5
fn[2] = 5
updateFtArray(2, 5)
ft[5] = 2
ft[fn[5]] = 5
new Round C'
Right (0, 10, 15, 5)
Save to S[10, 5]
case3_case FcurrentForest - F(rF)
case1_case2 = t[15, 5]
case2_case2 = q[10]
case3_case3 D[15, 16]
new Round C'
Right (0, 9, 15, 5)
Save to S[9, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 5]
case2_case2 = q[9]
case3_case3 D[15, 17]
new Round C'
Right (0, 8, 15, 5)
Save to S[8, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 5]
case2_case2 = q[8]
case3_case3 D[15, 18]
new Round C'
Right (0, 7, 15, 5)
Save to S[7, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 5]
case2_case2 = q[7]
case3_case3 D[15, 19]
new Round C'
Right (0, 6, 15, 5)
Save to S[6, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 5]
case2_case2 = q[6]
case3_case3 D[15, 15]
new Round C'
Right (0, 5, 15, 5)
Save to S[5, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 5]
case2_case2 = q[5]
case3_case3 D[15, 14]
new Round C'
Right (0, 4, 15, 5)
Save to S[4, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 5]
case2_case2 = q[4]
case3_case3 D[15, 13]
new Round C'
Right (0, 3, 15, 5)
Save to S[3, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 5]
case2_case2 = q[3]
case3_case3 D[15, 12]
new Round C'
Right (0, 2, 15, 5)
Save to S[2, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 5]
case2_case2 = q[2]
case3_case3 D[15, 20]
new Round C'
Right (0, 1, 15, 5)
Save to S[1, 5]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 5]
case2_case2 = q[1]
case3_case3 D[15, 11]
new Round C'
Right (0, 0, 15, 5)
Save to S[0, 5]
case3 = 0
case1_case1 = s[1, 5]
case2_case2 = q[0]
case3_case3 D[15, 0]
save to D[14, 0] = S[0, 5]
Q[10] = S[10, 5]
Q[9] = S[9, 5]
Q[8] = S[8, 5]
Q[7] = S[7, 5]
Q[6] = S[6, 5]
Q[5] = S[5, 5]
Q[4] = S[4, 5]
Q[3] = S[3, 5]
Q[2] = S[2, 5]
Q[1] = S[1, 5]
Q[0] = S[0, 5]
T[15, 5] = S[0, 5]
new Round B'
updateFnArray(2, 4, 0)
fn[4] = fn[2] = 4
fn[2] = 4
updateFtArray(2, 4)
ft[4] = 2
ft[fn[4]] = 4
new Round C'
Right (0, 10, 14, 4)
Save to S[10, 4]
case3_case FcurrentForest - F(rF)
case1_case2 = t[14, 4]
case2_case2 = q[10]
case3_case3 D[14, 16]
new Round C'
Right (0, 9, 14, 4)
Save to S[9, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 4]
case2_case2 = q[9]
case3_case3 D[14, 17]
new Round C'
Right (0, 8, 14, 4)
Save to S[8, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 4]
case2_case2 = q[8]
case3_case3 D[14, 18]
new Round C'
Right (0, 7, 14, 4)
Save to S[7, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 4]
case2_case2 = q[7]
case3_case3 D[14, 19]
new Round C'
Right (0, 6, 14, 4)
Save to S[6, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 4]
case2_case2 = q[6]
case3_case3 D[14, 15]
new Round C'
Right (0, 5, 14, 4)
Save to S[5, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 4]
case2_case2 = q[5]
case3_case3 D[14, 14]
new Round C'
Right (0, 4, 14, 4)
Save to S[4, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 4]
case2_case2 = q[4]
case3_case3 D[14, 13]
new Round C'
Right (0, 3, 14, 4)
Save to S[3, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 4]
case2_case2 = q[3]
case3_case3 D[14, 12]
new Round C'
Right (0, 2, 14, 4)
Save to S[2, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 4]
case2_case2 = q[2]
case3_case3 D[14, 20]
new Round C'
Right (0, 1, 14, 4)
Save to S[1, 4]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 4]
case2_case2 = q[1]
case3_case3 D[14, 11]
new Round C'
Right (0, 0, 14, 4)
Save to S[0, 4]
case3 = 0
case1_case1 = s[1, 4]
case2_case2 = q[0]
case3_case3 D[14, 0]
save to D[13, 0] = S[0, 4]
Q[10] = S[10, 4]
Q[9] = S[9, 4]
Q[8] = S[8, 4]
Q[7] = S[7, 4]
Q[6] = S[6, 4]
Q[5] = S[5, 4]
Q[4] = S[4, 4]
Q[3] = S[3, 4]
Q[2] = S[2, 4]
Q[1] = S[1, 4]
Q[0] = S[0, 4]
T[14, 4] = S[0, 4]
new Round B'
updateFnArray(2, 3, 0)
fn[3] = fn[2] = 3
fn[2] = 3
updateFtArray(2, 3)
ft[3] = 2
ft[fn[3]] = 3
new Round C'
Right (0, 10, 13, 3)
Save to S[10, 3]
case3_case FcurrentForest - F(rF)
case1_case2 = t[13, 3]
case2_case2 = q[10]
case3_case3 D[13, 16]
Right (0, 10, 13, 2)
Save to S[10, 2]
case1_case2 t[13, 2]
case2_case3 s[10, 3]
case3_case d[21, 16]
case3_case3 t[13, 3]
new Round C'
Right (0, 9, 13, 3)
Save to S[9, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 3]
case2_case2 = q[9]
case3_case3 D[13, 17]
Right (0, 9, 13, 2)
Save to S[9, 2]
case1_case1 s[10, 2]
case2_case3 s[9, 3]
case3_case d[21, 17]
case3_case1 s[10, 3]
new Round C'
Right (0, 8, 13, 3)
Save to S[8, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 3]
case2_case2 = q[8]
case3_case3 D[13, 18]
Right (0, 8, 13, 2)
Save to S[8, 2]
case1_case1 s[9, 2]
case2_case3 s[8, 3]
case3_case d[21, 18]
case3_case1 s[9, 3]
new Round C'
Right (0, 7, 13, 3)
Save to S[7, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 3]
case2_case2 = q[7]
case3_case3 D[13, 19]
Right (0, 7, 13, 2)
Save to S[7, 2]
case1_case1 s[8, 2]
case2_case3 s[7, 3]
case3_case d[21, 19]
case3_case1 s[8, 3]
new Round C'
Right (0, 6, 13, 3)
Save to S[6, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 3]
case2_case2 = q[6]
case3_case3 D[13, 15]
Right (0, 6, 13, 2)
Save to S[6, 2]
case1_case1 s[7, 2]
case2_case3 s[6, 3]
case3_case d[21, 15]
case3_case3 t[13, 3]
new Round C'
Right (0, 5, 13, 3)
Save to S[5, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 3]
case2_case2 = q[5]
case3_case3 D[13, 14]
Right (0, 5, 13, 2)
Save to S[5, 2]
case1_case1 s[6, 2]
case2_case3 s[5, 3]
case3_case d[21, 14]
case3_case3 t[13, 3]
new Round C'
Right (0, 4, 13, 3)
Save to S[4, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 3]
case2_case2 = q[4]
case3_case3 D[13, 13]
Right (0, 4, 13, 2)
Save to S[4, 2]
case1_case1 s[5, 2]
case2_case3 s[4, 3]
case3_case d[21, 13]
case3_case3 t[13, 3]
new Round C'
Right (0, 3, 13, 3)
Save to S[3, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 3]
case2_case2 = q[3]
case3_case3 D[13, 12]
Right (0, 3, 13, 2)
Save to S[3, 2]
case1_case1 s[4, 2]
case2_case3 s[3, 3]
case3_case d[21, 12]
case3_case3 t[13, 3]
new Round C'
Right (0, 2, 13, 3)
Save to S[2, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 3]
case2_case2 = q[2]
case3_case3 D[13, 20]
Right (0, 2, 13, 2)
Save to S[2, 2]
case1_case1 s[3, 2]
case2_case3 s[2, 3]
case3_case d[21, 20]
case3_case1 s[3, 3]
new Round C'
Right (0, 1, 13, 3)
Save to S[1, 3]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 3]
case2_case2 = q[1]
case3_case3 D[13, 11]
Right (0, 1, 13, 2)
Save to S[1, 2]
case1_case1 s[2, 2]
case2_case3 s[1, 3]
case3_case d[21, 11]
case3_case3 t[13, 3]
new Round C'
Right (0, 0, 13, 3)
Save to S[0, 3]
case3 = 0
case1_case1 = s[1, 3]
case2_case2 = q[0]
case3_case3 D[13, 0]
Right (0, 0, 13, 2)
Save to S[0, 2]
case1_case1 s[1, 2]
case2_case3 s[0, 3]
case3_case d[21, 0]
case3_case2 GcurrentForestCost - G(rG) 
save to D[12, 0] = S[0, 2]
Q[10] = S[10, 2]
Q[9] = S[9, 2]
Q[8] = S[8, 2]
Q[7] = S[7, 2]
Q[6] = S[6, 2]
Q[5] = S[5, 2]
Q[4] = S[4, 2]
Q[3] = S[3, 2]
Q[2] = S[2, 2]
Q[1] = S[1, 2]
Q[0] = S[0, 2]
T[13, 3] = S[0, 3]
T[13, 2] = S[0, 2]
new Round B'
updateFnArray(-1, 1, 0)
O fn[1] = fn[23] = 1
O fn[23] = 1
updateFtArray(-1, 1)
ft[1] = -1
ft[fn[1]] = 1
new Round C'
Right (0, 10, 12, 1)
Save to S[10, 1]
case3_case FcurrentForest - F(rF)
case1_case2 = t[12, 1]
case2_case2 = q[10]
case3_case3 D[12, 16]
new Round C'
Right (0, 9, 12, 1)
Save to S[9, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 1]
case2_case2 = q[9]
case3_case3 D[12, 17]
new Round C'
Right (0, 8, 12, 1)
Save to S[8, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 1]
case2_case2 = q[8]
case3_case3 D[12, 18]
new Round C'
Right (0, 7, 12, 1)
Save to S[7, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 1]
case2_case2 = q[7]
case3_case3 D[12, 19]
new Round C'
Right (0, 6, 12, 1)
Save to S[6, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 1]
case2_case2 = q[6]
case3_case3 D[12, 15]
new Round C'
Right (0, 5, 12, 1)
Save to S[5, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 1]
case2_case2 = q[5]
case3_case3 D[12, 14]
new Round C'
Right (0, 4, 12, 1)
Save to S[4, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 1]
case2_case2 = q[4]
case3_case3 D[12, 13]
new Round C'
Right (0, 3, 12, 1)
Save to S[3, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 1]
case2_case2 = q[3]
case3_case3 D[12, 12]
new Round C'
Right (0, 2, 12, 1)
Save to S[2, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 1]
case2_case2 = q[2]
case3_case3 D[12, 20]
new Round C'
Right (0, 1, 12, 1)
Save to S[1, 1]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 1]
case2_case2 = q[1]
case3_case3 D[12, 11]
new Round C'
Right (0, 0, 12, 1)
Save to S[0, 1]
case3 = 0
case1_case1 = s[1, 1]
case2_case2 = q[0]
case3_case3 D[12, 0]
T[12, 1] = S[0, 1]
new Round B'
updateFnArray(10, 11, 0)
fn[11] = fn[10] = 11
fn[10] = 11
updateFtArray(10, 11)
ft[11] = 10
new Round C'
Right (0, 10, 11, 11)
Save to S[10, 11]
case3_case FcurrentForest - F(rF)
case1_case2 = t[11, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 16]
new Round C'
Right (0, 9, 11, 11)
Save to S[9, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 17]
new Round C'
Right (0, 8, 11, 11)
Save to S[8, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 18]
new Round C'
Right (0, 7, 11, 11)
Save to S[7, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 19]
new Round C'
Right (0, 6, 11, 11)
Save to S[6, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 15]
new Round C'
Right (0, 5, 11, 11)
Save to S[5, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 14]
new Round C'
Right (0, 4, 11, 11)
Save to S[4, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 13]
new Round C'
Right (0, 3, 11, 11)
Save to S[3, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 12]
new Round C'
Right (0, 2, 11, 11)
Save to S[2, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 20]
new Round C'
Right (0, 1, 11, 11)
Save to S[1, 11]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 11]
new Round C'
Right (0, 0, 11, 11)
Save to S[0, 11]
case3 = 0
case1_case1 = s[1, 11]
case2_case1 = FcurrentForestCost
case3_case3 D[11, 0]
T[11, 11] = S[0, 11]
new Round B'
updateFnArray(11, 16, 0)
fn[16] = fn[11] = 16
fn[11] = 16
updateFtArray(11, 16)
ft[16] = 11
new Round C'
Right (0, 10, 10, 16)
Save to S[10, 16]
case3_case FcurrentForest - F(rF)
case1_case2 = t[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 16]
new Round C'
Right (0, 9, 10, 16)
Save to S[9, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 17]
new Round C'
Right (0, 8, 10, 16)
Save to S[8, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 18]
new Round C'
Right (0, 7, 10, 16)
Save to S[7, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 19]
new Round C'
Right (0, 6, 10, 16)
Save to S[6, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 15]
new Round C'
Right (0, 5, 10, 16)
Save to S[5, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 14]
new Round C'
Right (0, 4, 10, 16)
Save to S[4, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 13]
new Round C'
Right (0, 3, 10, 16)
Save to S[3, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 12]
new Round C'
Right (0, 2, 10, 16)
Save to S[2, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 20]
new Round C'
Right (0, 1, 10, 16)
Save to S[1, 16]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 11]
new Round C'
Right (0, 0, 10, 16)
Save to S[0, 16]
case3 = 0
case1_case1 = s[1, 16]
case2_case1 = FcurrentForestCost
case3_case3 D[10, 0]
T[10, 16] = S[0, 16]
new Round B'
updateFnArray(16, 17, 0)
fn[17] = fn[16] = 17
fn[16] = 17
updateFtArray(16, 17)
ft[17] = 16
new Round C'
Right (0, 10, 9, 17)
Save to S[10, 17]
case3_case FcurrentForest - F(rF)
case1_case2 = t[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 16]
new Round C'
Right (0, 9, 9, 17)
Save to S[9, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 17]
new Round C'
Right (0, 8, 9, 17)
Save to S[8, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 18]
new Round C'
Right (0, 7, 9, 17)
Save to S[7, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 19]
new Round C'
Right (0, 6, 9, 17)
Save to S[6, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 15]
new Round C'
Right (0, 5, 9, 17)
Save to S[5, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 14]
new Round C'
Right (0, 4, 9, 17)
Save to S[4, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 13]
new Round C'
Right (0, 3, 9, 17)
Save to S[3, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 12]
new Round C'
Right (0, 2, 9, 17)
Save to S[2, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 20]
new Round C'
Right (0, 1, 9, 17)
Save to S[1, 17]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 11]
new Round C'
Right (0, 0, 9, 17)
Save to S[0, 17]
case3 = 0
case1_case1 = s[1, 17]
case2_case1 = FcurrentForestCost
case3_case3 D[9, 0]
T[9, 17] = S[0, 17]
new Round B'
updateFnArray(17, 18, 0)
fn[18] = fn[17] = 18
fn[17] = 18
updateFtArray(17, 18)
ft[18] = 17
new Round C'
Right (0, 10, 8, 18)
Save to S[10, 18]
case3_case FcurrentForest - F(rF)
case1_case2 = t[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 16]
new Round C'
Right (0, 9, 8, 18)
Save to S[9, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 17]
new Round C'
Right (0, 8, 8, 18)
Save to S[8, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 18]
new Round C'
Right (0, 7, 8, 18)
Save to S[7, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 19]
new Round C'
Right (0, 6, 8, 18)
Save to S[6, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 15]
new Round C'
Right (0, 5, 8, 18)
Save to S[5, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 14]
new Round C'
Right (0, 4, 8, 18)
Save to S[4, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 13]
new Round C'
Right (0, 3, 8, 18)
Save to S[3, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 12]
new Round C'
Right (0, 2, 8, 18)
Save to S[2, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 20]
new Round C'
Right (0, 1, 8, 18)
Save to S[1, 18]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 11]
new Round C'
Right (0, 0, 8, 18)
Save to S[0, 18]
case3 = 0
case1_case1 = s[1, 18]
case2_case1 = FcurrentForestCost
case3_case3 D[8, 0]
T[8, 18] = S[0, 18]
new Round B'
updateFnArray(18, 19, 0)
fn[19] = fn[18] = 19
fn[18] = 19
updateFtArray(18, 19)
ft[19] = 18
new Round C'
Right (0, 10, 7, 19)
Save to S[10, 19]
case3_case FcurrentForest - F(rF)
case1_case2 = t[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 16]
new Round C'
Right (0, 9, 7, 19)
Save to S[9, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 17]
new Round C'
Right (0, 8, 7, 19)
Save to S[8, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 18]
new Round C'
Right (0, 7, 7, 19)
Save to S[7, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 19]
new Round C'
Right (0, 6, 7, 19)
Save to S[6, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 15]
new Round C'
Right (0, 5, 7, 19)
Save to S[5, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 14]
new Round C'
Right (0, 4, 7, 19)
Save to S[4, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 13]
new Round C'
Right (0, 3, 7, 19)
Save to S[3, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 12]
new Round C'
Right (0, 2, 7, 19)
Save to S[2, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 20]
new Round C'
Right (0, 1, 7, 19)
Save to S[1, 19]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 11]
new Round C'
Right (0, 0, 7, 19)
Save to S[0, 19]
case3 = 0
case1_case1 = s[1, 19]
case2_case1 = FcurrentForestCost
case3_case3 D[7, 0]
T[7, 19] = S[0, 19]
new Round B'
updateFnArray(19, 20, 0)
fn[20] = fn[19] = 20
fn[19] = 20
updateFtArray(19, 20)
ft[20] = 19
new Round C'
Right (0, 10, 6, 20)
Save to S[10, 20]
case3_case FcurrentForest - F(rF)
case1_case2 = t[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 16]
Right (0, 10, 6, 19)
Save to S[10, 19]
case1_case2 t[6, 19]
case2_case3 s[10, 20]
case3_case d[7, 16]
case3_case3 t[6, 20]
Right (0, 10, 6, 18)
Save to S[10, 18]
case1_case2 t[6, 18]
case2_case3 s[10, 19]
case3_case d[8, 16]
case3_case3 t[6, 19]
Right (0, 10, 6, 17)
Save to S[10, 17]
case1_case2 t[6, 17]
case2_case3 s[10, 18]
case3_case d[9, 16]
case3_case3 t[6, 18]
Right (0, 10, 6, 16)
Save to S[10, 16]
case1_case2 t[6, 16]
case2_case3 s[10, 17]
case3_case d[10, 16]
case3_case3 t[6, 17]
new Round C'
Right (0, 9, 6, 20)
Save to S[9, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 17]
Right (0, 9, 6, 19)
Save to S[9, 19]
case1_case1 s[10, 19]
case2_case3 s[9, 20]
case3_case d[7, 17]
case3_case1 s[10, 20]
Right (0, 9, 6, 18)
Save to S[9, 18]
case1_case1 s[10, 18]
case2_case3 s[9, 19]
case3_case d[8, 17]
case3_case1 s[10, 19]
Right (0, 9, 6, 17)
Save to S[9, 17]
case1_case1 s[10, 17]
case2_case3 s[9, 18]
case3_case d[9, 17]
case3_case1 s[10, 18]
Right (0, 9, 6, 16)
Save to S[9, 16]
case1_case1 s[10, 16]
case2_case3 s[9, 17]
case3_case d[10, 17]
case3_case1 s[10, 17]
new Round C'
Right (0, 8, 6, 20)
Save to S[8, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 18]
Right (0, 8, 6, 19)
Save to S[8, 19]
case1_case1 s[9, 19]
case2_case3 s[8, 20]
case3_case d[7, 18]
case3_case1 s[9, 20]
Right (0, 8, 6, 18)
Save to S[8, 18]
case1_case1 s[9, 18]
case2_case3 s[8, 19]
case3_case d[8, 18]
case3_case1 s[9, 19]
Right (0, 8, 6, 17)
Save to S[8, 17]
case1_case1 s[9, 17]
case2_case3 s[8, 18]
case3_case d[9, 18]
case3_case1 s[9, 18]
Right (0, 8, 6, 16)
Save to S[8, 16]
case1_case1 s[9, 16]
case2_case3 s[8, 17]
case3_case d[10, 18]
case3_case1 s[9, 17]
new Round C'
Right (0, 7, 6, 20)
Save to S[7, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 19]
Right (0, 7, 6, 19)
Save to S[7, 19]
case1_case1 s[8, 19]
case2_case3 s[7, 20]
case3_case d[7, 19]
case3_case1 s[8, 20]
Right (0, 7, 6, 18)
Save to S[7, 18]
case1_case1 s[8, 18]
case2_case3 s[7, 19]
case3_case d[8, 19]
case3_case1 s[8, 19]
Right (0, 7, 6, 17)
Save to S[7, 17]
case1_case1 s[8, 17]
case2_case3 s[7, 18]
case3_case d[9, 19]
case3_case1 s[8, 18]
Right (0, 7, 6, 16)
Save to S[7, 16]
case1_case1 s[8, 16]
case2_case3 s[7, 17]
case3_case d[10, 19]
case3_case1 s[8, 17]
new Round C'
Right (0, 6, 6, 20)
Save to S[6, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 15]
Right (0, 6, 6, 19)
Save to S[6, 19]
case1_case1 s[7, 19]
case2_case3 s[6, 20]
case3_case d[7, 15]
case3_case3 t[6, 20]
Right (0, 6, 6, 18)
Save to S[6, 18]
case1_case1 s[7, 18]
case2_case3 s[6, 19]
case3_case d[8, 15]
case3_case3 t[6, 19]
Right (0, 6, 6, 17)
Save to S[6, 17]
case1_case1 s[7, 17]
case2_case3 s[6, 18]
case3_case d[9, 15]
case3_case3 t[6, 18]
Right (0, 6, 6, 16)
Save to S[6, 16]
case1_case1 s[7, 16]
case2_case3 s[6, 17]
case3_case d[10, 15]
case3_case3 t[6, 17]
new Round C'
Right (0, 5, 6, 20)
Save to S[5, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 14]
Right (0, 5, 6, 19)
Save to S[5, 19]
case1_case1 s[6, 19]
case2_case3 s[5, 20]
case3_case d[7, 14]
case3_case3 t[6, 20]
Right (0, 5, 6, 18)
Save to S[5, 18]
case1_case1 s[6, 18]
case2_case3 s[5, 19]
case3_case d[8, 14]
case3_case3 t[6, 19]
Right (0, 5, 6, 17)
Save to S[5, 17]
case1_case1 s[6, 17]
case2_case3 s[5, 18]
case3_case d[9, 14]
case3_case3 t[6, 18]
Right (0, 5, 6, 16)
Save to S[5, 16]
case1_case1 s[6, 16]
case2_case3 s[5, 17]
case3_case d[10, 14]
case3_case3 t[6, 17]
new Round C'
Right (0, 4, 6, 20)
Save to S[4, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 13]
Right (0, 4, 6, 19)
Save to S[4, 19]
case1_case1 s[5, 19]
case2_case3 s[4, 20]
case3_case d[7, 13]
case3_case3 t[6, 20]
Right (0, 4, 6, 18)
Save to S[4, 18]
case1_case1 s[5, 18]
case2_case3 s[4, 19]
case3_case d[8, 13]
case3_case3 t[6, 19]
Right (0, 4, 6, 17)
Save to S[4, 17]
case1_case1 s[5, 17]
case2_case3 s[4, 18]
case3_case d[9, 13]
case3_case3 t[6, 18]
Right (0, 4, 6, 16)
Save to S[4, 16]
case1_case1 s[5, 16]
case2_case3 s[4, 17]
case3_case d[10, 13]
case3_case3 t[6, 17]
new Round C'
Right (0, 3, 6, 20)
Save to S[3, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 12]
Right (0, 3, 6, 19)
Save to S[3, 19]
case1_case1 s[4, 19]
case2_case3 s[3, 20]
case3_case d[7, 12]
case3_case3 t[6, 20]
Right (0, 3, 6, 18)
Save to S[3, 18]
case1_case1 s[4, 18]
case2_case3 s[3, 19]
case3_case d[8, 12]
case3_case3 t[6, 19]
Right (0, 3, 6, 17)
Save to S[3, 17]
case1_case1 s[4, 17]
case2_case3 s[3, 18]
case3_case d[9, 12]
case3_case3 t[6, 18]
Right (0, 3, 6, 16)
Save to S[3, 16]
case1_case1 s[4, 16]
case2_case3 s[3, 17]
case3_case d[10, 12]
case3_case3 t[6, 17]
new Round C'
Right (0, 2, 6, 20)
Save to S[2, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 20]
Right (0, 2, 6, 19)
Save to S[2, 19]
case1_case1 s[3, 19]
case2_case3 s[2, 20]
case3_case d[7, 20]
case3_case1 s[3, 20]
Right (0, 2, 6, 18)
Save to S[2, 18]
case1_case1 s[3, 18]
case2_case3 s[2, 19]
case3_case d[8, 20]
case3_case1 s[3, 19]
Right (0, 2, 6, 17)
Save to S[2, 17]
case1_case1 s[3, 17]
case2_case3 s[2, 18]
case3_case d[9, 20]
case3_case1 s[3, 18]
Right (0, 2, 6, 16)
Save to S[2, 16]
case1_case1 s[3, 16]
case2_case3 s[2, 17]
case3_case d[10, 20]
case3_case1 s[3, 17]
new Round C'
Right (0, 1, 6, 20)
Save to S[1, 20]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 11]
Right (0, 1, 6, 19)
Save to S[1, 19]
case1_case1 s[2, 19]
case2_case3 s[1, 20]
case3_case d[7, 11]
case3_case3 t[6, 20]
Right (0, 1, 6, 18)
Save to S[1, 18]
case1_case1 s[2, 18]
case2_case3 s[1, 19]
case3_case d[8, 11]
case3_case3 t[6, 19]
Right (0, 1, 6, 17)
Save to S[1, 17]
case1_case1 s[2, 17]
case2_case3 s[1, 18]
case3_case d[9, 11]
case3_case3 t[6, 18]
Right (0, 1, 6, 16)
Save to S[1, 16]
case1_case1 s[2, 16]
case2_case3 s[1, 17]
case3_case d[10, 11]
case3_case3 t[6, 17]
new Round C'
Right (0, 0, 6, 20)
Save to S[0, 20]
case3 = 0
case1_case1 = s[1, 20]
case2_case1 = FcurrentForestCost
case3_case3 D[6, 0]
Right (0, 0, 6, 19)
Save to S[0, 19]
case1_case1 s[1, 19]
case2_case3 s[0, 20]
case3_case d[7, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 6, 18)
Save to S[0, 18]
case1_case1 s[1, 18]
case2_case3 s[0, 19]
case3_case d[8, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 6, 17)
Save to S[0, 17]
case1_case1 s[1, 17]
case2_case3 s[0, 18]
case3_case d[9, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 6, 16)
Save to S[0, 16]
case1_case1 s[1, 16]
case2_case3 s[0, 17]
case3_case d[10, 0]
case3_case2 GcurrentForestCost - G(rG) 
save to D[5, 0] = S[0, 16]
Q[10] = S[10, 16]
Q[9] = S[9, 16]
Q[8] = S[8, 16]
Q[7] = S[7, 16]
Q[6] = S[6, 16]
Q[5] = S[5, 16]
Q[4] = S[4, 16]
Q[3] = S[3, 16]
Q[2] = S[2, 16]
Q[1] = S[1, 16]
Q[0] = S[0, 16]
T[6, 20] = S[0, 20]
T[6, 19] = S[0, 19]
T[6, 18] = S[0, 18]
T[6, 17] = S[0, 17]
T[6, 16] = S[0, 16]
new Round B'
updateFnArray(11, 15, 0)
fn[15] = fn[11] = 15
fn[11] = 15
updateFtArray(11, 15)
ft[15] = 11
ft[fn[15]] = 15
new Round C'
Right (0, 10, 5, 15)
Save to S[10, 15]
case3_case FcurrentForest - F(rF)
case1_case2 = t[5, 15]
case2_case2 = q[10]
case3_case3 D[5, 16]
new Round C'
Right (0, 9, 5, 15)
Save to S[9, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 15]
case2_case2 = q[9]
case3_case3 D[5, 17]
new Round C'
Right (0, 8, 5, 15)
Save to S[8, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 15]
case2_case2 = q[8]
case3_case3 D[5, 18]
new Round C'
Right (0, 7, 5, 15)
Save to S[7, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 15]
case2_case2 = q[7]
case3_case3 D[5, 19]
new Round C'
Right (0, 6, 5, 15)
Save to S[6, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 15]
case2_case2 = q[6]
case3_case3 D[5, 15]
new Round C'
Right (0, 5, 5, 15)
Save to S[5, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 15]
case2_case2 = q[5]
case3_case3 D[5, 14]
new Round C'
Right (0, 4, 5, 15)
Save to S[4, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 15]
case2_case2 = q[4]
case3_case3 D[5, 13]
new Round C'
Right (0, 3, 5, 15)
Save to S[3, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 15]
case2_case2 = q[3]
case3_case3 D[5, 12]
new Round C'
Right (0, 2, 5, 15)
Save to S[2, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 15]
case2_case2 = q[2]
case3_case3 D[5, 20]
new Round C'
Right (0, 1, 5, 15)
Save to S[1, 15]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 15]
case2_case2 = q[1]
case3_case3 D[5, 11]
new Round C'
Right (0, 0, 5, 15)
Save to S[0, 15]
case3 = 0
case1_case1 = s[1, 15]
case2_case2 = q[0]
case3_case3 D[5, 0]
save to D[4, 0] = S[0, 15]
Q[10] = S[10, 15]
Q[9] = S[9, 15]
Q[8] = S[8, 15]
Q[7] = S[7, 15]
Q[6] = S[6, 15]
Q[5] = S[5, 15]
Q[4] = S[4, 15]
Q[3] = S[3, 15]
Q[2] = S[2, 15]
Q[1] = S[1, 15]
Q[0] = S[0, 15]
T[5, 15] = S[0, 15]
new Round B'
updateFnArray(11, 14, 0)
fn[14] = fn[11] = 14
fn[11] = 14
updateFtArray(11, 14)
ft[14] = 11
ft[fn[14]] = 14
new Round C'
Right (0, 10, 4, 14)
Save to S[10, 14]
case3_case FcurrentForest - F(rF)
case1_case2 = t[4, 14]
case2_case2 = q[10]
case3_case3 D[4, 16]
new Round C'
Right (0, 9, 4, 14)
Save to S[9, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 14]
case2_case2 = q[9]
case3_case3 D[4, 17]
new Round C'
Right (0, 8, 4, 14)
Save to S[8, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 14]
case2_case2 = q[8]
case3_case3 D[4, 18]
new Round C'
Right (0, 7, 4, 14)
Save to S[7, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 14]
case2_case2 = q[7]
case3_case3 D[4, 19]
new Round C'
Right (0, 6, 4, 14)
Save to S[6, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 14]
case2_case2 = q[6]
case3_case3 D[4, 15]
new Round C'
Right (0, 5, 4, 14)
Save to S[5, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 14]
case2_case2 = q[5]
case3_case3 D[4, 14]
new Round C'
Right (0, 4, 4, 14)
Save to S[4, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 14]
case2_case2 = q[4]
case3_case3 D[4, 13]
new Round C'
Right (0, 3, 4, 14)
Save to S[3, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 14]
case2_case2 = q[3]
case3_case3 D[4, 12]
new Round C'
Right (0, 2, 4, 14)
Save to S[2, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 14]
case2_case2 = q[2]
case3_case3 D[4, 20]
new Round C'
Right (0, 1, 4, 14)
Save to S[1, 14]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 14]
case2_case2 = q[1]
case3_case3 D[4, 11]
new Round C'
Right (0, 0, 4, 14)
Save to S[0, 14]
case3 = 0
case1_case1 = s[1, 14]
case2_case2 = q[0]
case3_case3 D[4, 0]
save to D[3, 0] = S[0, 14]
Q[10] = S[10, 14]
Q[9] = S[9, 14]
Q[8] = S[8, 14]
Q[7] = S[7, 14]
Q[6] = S[6, 14]
Q[5] = S[5, 14]
Q[4] = S[4, 14]
Q[3] = S[3, 14]
Q[2] = S[2, 14]
Q[1] = S[1, 14]
Q[0] = S[0, 14]
T[4, 14] = S[0, 14]
new Round B'
updateFnArray(11, 13, 0)
fn[13] = fn[11] = 13
fn[11] = 13
updateFtArray(11, 13)
ft[13] = 11
ft[fn[13]] = 13
new Round C'
Right (0, 10, 3, 13)
Save to S[10, 13]
case3_case FcurrentForest - F(rF)
case1_case2 = t[3, 13]
case2_case2 = q[10]
case3_case3 D[3, 16]
new Round C'
Right (0, 9, 3, 13)
Save to S[9, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 13]
case2_case2 = q[9]
case3_case3 D[3, 17]
new Round C'
Right (0, 8, 3, 13)
Save to S[8, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 13]
case2_case2 = q[8]
case3_case3 D[3, 18]
new Round C'
Right (0, 7, 3, 13)
Save to S[7, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 13]
case2_case2 = q[7]
case3_case3 D[3, 19]
new Round C'
Right (0, 6, 3, 13)
Save to S[6, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 13]
case2_case2 = q[6]
case3_case3 D[3, 15]
new Round C'
Right (0, 5, 3, 13)
Save to S[5, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 13]
case2_case2 = q[5]
case3_case3 D[3, 14]
new Round C'
Right (0, 4, 3, 13)
Save to S[4, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 13]
case2_case2 = q[4]
case3_case3 D[3, 13]
new Round C'
Right (0, 3, 3, 13)
Save to S[3, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 13]
case2_case2 = q[3]
case3_case3 D[3, 12]
new Round C'
Right (0, 2, 3, 13)
Save to S[2, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 13]
case2_case2 = q[2]
case3_case3 D[3, 20]
new Round C'
Right (0, 1, 3, 13)
Save to S[1, 13]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 13]
case2_case2 = q[1]
case3_case3 D[3, 11]
new Round C'
Right (0, 0, 3, 13)
Save to S[0, 13]
case3 = 0
case1_case1 = s[1, 13]
case2_case2 = q[0]
case3_case3 D[3, 0]
save to D[2, 0] = S[0, 13]
Q[10] = S[10, 13]
Q[9] = S[9, 13]
Q[8] = S[8, 13]
Q[7] = S[7, 13]
Q[6] = S[6, 13]
Q[5] = S[5, 13]
Q[4] = S[4, 13]
Q[3] = S[3, 13]
Q[2] = S[2, 13]
Q[1] = S[1, 13]
Q[0] = S[0, 13]
T[3, 13] = S[0, 13]
new Round B'
updateFnArray(11, 12, 0)
fn[12] = fn[11] = 12
fn[11] = 12
updateFtArray(11, 12)
ft[12] = 11
ft[fn[12]] = 12
new Round C'
Right (0, 10, 2, 12)
Save to S[10, 12]
case3_case FcurrentForest - F(rF)
case1_case2 = t[2, 12]
case2_case2 = q[10]
case3_case3 D[2, 16]
new Round C'
Right (0, 9, 2, 12)
Save to S[9, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 12]
case2_case2 = q[9]
case3_case3 D[2, 17]
new Round C'
Right (0, 8, 2, 12)
Save to S[8, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 12]
case2_case2 = q[8]
case3_case3 D[2, 18]
new Round C'
Right (0, 7, 2, 12)
Save to S[7, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 12]
case2_case2 = q[7]
case3_case3 D[2, 19]
new Round C'
Right (0, 6, 2, 12)
Save to S[6, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 12]
case2_case2 = q[6]
case3_case3 D[2, 15]
new Round C'
Right (0, 5, 2, 12)
Save to S[5, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 12]
case2_case2 = q[5]
case3_case3 D[2, 14]
new Round C'
Right (0, 4, 2, 12)
Save to S[4, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 12]
case2_case2 = q[4]
case3_case3 D[2, 13]
new Round C'
Right (0, 3, 2, 12)
Save to S[3, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 12]
case2_case2 = q[3]
case3_case3 D[2, 12]
new Round C'
Right (0, 2, 2, 12)
Save to S[2, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 12]
case2_case2 = q[2]
case3_case3 D[2, 20]
new Round C'
Right (0, 1, 2, 12)
Save to S[1, 12]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 12]
case2_case2 = q[1]
case3_case3 D[2, 11]
new Round C'
Right (0, 0, 2, 12)
Save to S[0, 12]
case3 = 0
case1_case1 = s[1, 12]
case2_case2 = q[0]
case3_case3 D[2, 0]
T[2, 12] = S[0, 12]
new Round B'
updateFnArray(20, 21, 0)
fn[21] = fn[20] = 21
fn[20] = 21
updateFtArray(20, 21)
ft[21] = 20
new Round C'
Right (0, 10, 1, 21)
Save to S[10, 21]
case3_case FcurrentForest - F(rF)
case1_case2 = t[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 16]
Right (0, 10, 1, 20)
Save to S[10, 20]
case1_case2 t[1, 20]
case2_case3 s[10, 21]
case3_case d[6, 16]
case3_case3 t[1, 21]
Right (0, 10, 1, 19)
Save to S[10, 19]
case1_case2 t[1, 19]
case2_case3 s[10, 20]
case3_case d[7, 16]
case3_case3 t[1, 20]
Right (0, 10, 1, 18)
Save to S[10, 18]
case1_case2 t[1, 18]
case2_case3 s[10, 19]
case3_case d[8, 16]
case3_case3 t[1, 19]
Right (0, 10, 1, 17)
Save to S[10, 17]
case1_case2 t[1, 17]
case2_case3 s[10, 18]
case3_case d[9, 16]
case3_case3 t[1, 18]
Right (0, 10, 1, 16)
Save to S[10, 16]
case1_case2 t[1, 16]
case2_case3 s[10, 17]
case3_case d[10, 16]
case3_case3 t[1, 17]
Right (0, 10, 1, 15)
Save to S[10, 15]
case1_case2 t[1, 15]
case2_case3 s[10, 16]
case3_case d[5, 16]
case3_case3 t[1, 21]
Right (0, 10, 1, 14)
Save to S[10, 14]
case1_case2 t[1, 14]
case2_case3 s[10, 15]
case3_case d[4, 16]
case3_case3 t[1, 21]
Right (0, 10, 1, 13)
Save to S[10, 13]
case1_case2 t[1, 13]
case2_case3 s[10, 14]
case3_case d[3, 16]
case3_case3 t[1, 21]
Right (0, 10, 1, 12)
Save to S[10, 12]
case1_case2 t[1, 12]
case2_case3 s[10, 13]
case3_case d[2, 16]
case3_case3 t[1, 21]
Right (0, 10, 1, 11)
Save to S[10, 11]
case1_case2 t[1, 11]
case2_case3 s[10, 12]
case3_case d[11, 16]
case3_case3 t[1, 12]
Right (0, 10, 1, 10)
Save to S[10, 10]
case1_case2 t[1, 10]
case2_case3 s[10, 11]
case3_case d[17, 16]
case3_case3 t[1, 11]
Right (0, 10, 1, 9)
Save to S[10, 9]
case1_case2 t[1, 9]
case2_case3 s[10, 10]
case3_case d[18, 16]
case3_case3 t[1, 10]
Right (0, 10, 1, 8)
Save to S[10, 8]
case1_case2 t[1, 8]
case2_case3 s[10, 9]
case3_case d[19, 16]
case3_case3 t[1, 9]
Right (0, 10, 1, 7)
Save to S[10, 7]
case1_case2 t[1, 7]
case2_case3 s[10, 8]
case3_case d[20, 16]
case3_case3 t[1, 8]
Right (0, 10, 1, 6)
Save to S[10, 6]
case1_case2 t[1, 6]
case2_case3 s[10, 7]
case3_case d[16, 16]
case3_case3 t[1, 11]
Right (0, 10, 1, 5)
Save to S[10, 5]
case1_case2 t[1, 5]
case2_case3 s[10, 6]
case3_case d[15, 16]
case3_case3 t[1, 11]
Right (0, 10, 1, 4)
Save to S[10, 4]
case1_case2 t[1, 4]
case2_case3 s[10, 5]
case3_case d[14, 16]
case3_case3 t[1, 11]
Right (0, 10, 1, 3)
Save to S[10, 3]
case1_case2 t[1, 3]
case2_case3 s[10, 4]
case3_case d[13, 16]
case3_case3 t[1, 11]
Right (0, 10, 1, 2)
Save to S[10, 2]
case1_case2 t[1, 2]
case2_case3 s[10, 3]
case3_case d[21, 16]
case3_case3 t[1, 3]
Right (0, 10, 1, 1)
Save to S[10, 1]
case1_case2 t[1, 1]
case2_case3 s[10, 2]
case3_case d[12, 16]
case3_case3 t[1, 11]
new Round C'
Right (0, 9, 1, 21)
Save to S[9, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 17]
Right (0, 9, 1, 20)
Save to S[9, 20]
case1_case1 s[10, 20]
case2_case3 s[9, 21]
case3_case d[6, 17]
case3_case1 s[10, 21]
Right (0, 9, 1, 19)
Save to S[9, 19]
case1_case1 s[10, 19]
case2_case3 s[9, 20]
case3_case d[7, 17]
case3_case1 s[10, 20]
Right (0, 9, 1, 18)
Save to S[9, 18]
case1_case1 s[10, 18]
case2_case3 s[9, 19]
case3_case d[8, 17]
case3_case1 s[10, 19]
Right (0, 9, 1, 17)
Save to S[9, 17]
case1_case1 s[10, 17]
case2_case3 s[9, 18]
case3_case d[9, 17]
case3_case1 s[10, 18]
Right (0, 9, 1, 16)
Save to S[9, 16]
case1_case1 s[10, 16]
case2_case3 s[9, 17]
case3_case d[10, 17]
case3_case1 s[10, 17]
Right (0, 9, 1, 15)
Save to S[9, 15]
case1_case1 s[10, 15]
case2_case3 s[9, 16]
case3_case d[5, 17]
case3_case1 s[10, 21]
Right (0, 9, 1, 14)
Save to S[9, 14]
case1_case1 s[10, 14]
case2_case3 s[9, 15]
case3_case d[4, 17]
case3_case1 s[10, 21]
Right (0, 9, 1, 13)
Save to S[9, 13]
case1_case1 s[10, 13]
case2_case3 s[9, 14]
case3_case d[3, 17]
case3_case1 s[10, 21]
Right (0, 9, 1, 12)
Save to S[9, 12]
case1_case1 s[10, 12]
case2_case3 s[9, 13]
case3_case d[2, 17]
case3_case1 s[10, 21]
Right (0, 9, 1, 11)
Save to S[9, 11]
case1_case1 s[10, 11]
case2_case3 s[9, 12]
case3_case d[11, 17]
case3_case1 s[10, 12]
Right (0, 9, 1, 10)
Save to S[9, 10]
case1_case1 s[10, 10]
case2_case3 s[9, 11]
case3_case d[17, 17]
case3_case1 s[10, 11]
Right (0, 9, 1, 9)
Save to S[9, 9]
case1_case1 s[10, 9]
case2_case3 s[9, 10]
case3_case d[18, 17]
case3_case1 s[10, 10]
Right (0, 9, 1, 8)
Save to S[9, 8]
case1_case1 s[10, 8]
case2_case3 s[9, 9]
case3_case d[19, 17]
case3_case1 s[10, 9]
Right (0, 9, 1, 7)
Save to S[9, 7]
case1_case1 s[10, 7]
case2_case3 s[9, 8]
case3_case d[20, 17]
case3_case1 s[10, 8]
Right (0, 9, 1, 6)
Save to S[9, 6]
case1_case1 s[10, 6]
case2_case3 s[9, 7]
case3_case d[16, 17]
case3_case1 s[10, 11]
Right (0, 9, 1, 5)
Save to S[9, 5]
case1_case1 s[10, 5]
case2_case3 s[9, 6]
case3_case d[15, 17]
case3_case1 s[10, 11]
Right (0, 9, 1, 4)
Save to S[9, 4]
case1_case1 s[10, 4]
case2_case3 s[9, 5]
case3_case d[14, 17]
case3_case1 s[10, 11]
Right (0, 9, 1, 3)
Save to S[9, 3]
case1_case1 s[10, 3]
case2_case3 s[9, 4]
case3_case d[13, 17]
case3_case1 s[10, 11]
Right (0, 9, 1, 2)
Save to S[9, 2]
case1_case1 s[10, 2]
case2_case3 s[9, 3]
case3_case d[21, 17]
case3_case1 s[10, 3]
Right (0, 9, 1, 1)
Save to S[9, 1]
case1_case1 s[10, 1]
case2_case3 s[9, 2]
case3_case d[12, 17]
case3_case1 s[10, 11]
new Round C'
Right (0, 8, 1, 21)
Save to S[8, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 18]
Right (0, 8, 1, 20)
Save to S[8, 20]
case1_case1 s[9, 20]
case2_case3 s[8, 21]
case3_case d[6, 18]
case3_case1 s[9, 21]
Right (0, 8, 1, 19)
Save to S[8, 19]
case1_case1 s[9, 19]
case2_case3 s[8, 20]
case3_case d[7, 18]
case3_case1 s[9, 20]
Right (0, 8, 1, 18)
Save to S[8, 18]
case1_case1 s[9, 18]
case2_case3 s[8, 19]
case3_case d[8, 18]
case3_case1 s[9, 19]
Right (0, 8, 1, 17)
Save to S[8, 17]
case1_case1 s[9, 17]
case2_case3 s[8, 18]
case3_case d[9, 18]
case3_case1 s[9, 18]
Right (0, 8, 1, 16)
Save to S[8, 16]
case1_case1 s[9, 16]
case2_case3 s[8, 17]
case3_case d[10, 18]
case3_case1 s[9, 17]
Right (0, 8, 1, 15)
Save to S[8, 15]
case1_case1 s[9, 15]
case2_case3 s[8, 16]
case3_case d[5, 18]
case3_case1 s[9, 21]
Right (0, 8, 1, 14)
Save to S[8, 14]
case1_case1 s[9, 14]
case2_case3 s[8, 15]
case3_case d[4, 18]
case3_case1 s[9, 21]
Right (0, 8, 1, 13)
Save to S[8, 13]
case1_case1 s[9, 13]
case2_case3 s[8, 14]
case3_case d[3, 18]
case3_case1 s[9, 21]
Right (0, 8, 1, 12)
Save to S[8, 12]
case1_case1 s[9, 12]
case2_case3 s[8, 13]
case3_case d[2, 18]
case3_case1 s[9, 21]
Right (0, 8, 1, 11)
Save to S[8, 11]
case1_case1 s[9, 11]
case2_case3 s[8, 12]
case3_case d[11, 18]
case3_case1 s[9, 12]
Right (0, 8, 1, 10)
Save to S[8, 10]
case1_case1 s[9, 10]
case2_case3 s[8, 11]
case3_case d[17, 18]
case3_case1 s[9, 11]
Right (0, 8, 1, 9)
Save to S[8, 9]
case1_case1 s[9, 9]
case2_case3 s[8, 10]
case3_case d[18, 18]
case3_case1 s[9, 10]
Right (0, 8, 1, 8)
Save to S[8, 8]
case1_case1 s[9, 8]
case2_case3 s[8, 9]
case3_case d[19, 18]
case3_case1 s[9, 9]
Right (0, 8, 1, 7)
Save to S[8, 7]
case1_case1 s[9, 7]
case2_case3 s[8, 8]
case3_case d[20, 18]
case3_case1 s[9, 8]
Right (0, 8, 1, 6)
Save to S[8, 6]
case1_case1 s[9, 6]
case2_case3 s[8, 7]
case3_case d[16, 18]
case3_case1 s[9, 11]
Right (0, 8, 1, 5)
Save to S[8, 5]
case1_case1 s[9, 5]
case2_case3 s[8, 6]
case3_case d[15, 18]
case3_case1 s[9, 11]
Right (0, 8, 1, 4)
Save to S[8, 4]
case1_case1 s[9, 4]
case2_case3 s[8, 5]
case3_case d[14, 18]
case3_case1 s[9, 11]
Right (0, 8, 1, 3)
Save to S[8, 3]
case1_case1 s[9, 3]
case2_case3 s[8, 4]
case3_case d[13, 18]
case3_case1 s[9, 11]
Right (0, 8, 1, 2)
Save to S[8, 2]
case1_case1 s[9, 2]
case2_case3 s[8, 3]
case3_case d[21, 18]
case3_case1 s[9, 3]
Right (0, 8, 1, 1)
Save to S[8, 1]
case1_case1 s[9, 1]
case2_case3 s[8, 2]
case3_case d[12, 18]
case3_case1 s[9, 11]
new Round C'
Right (0, 7, 1, 21)
Save to S[7, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 19]
Right (0, 7, 1, 20)
Save to S[7, 20]
case1_case1 s[8, 20]
case2_case3 s[7, 21]
case3_case d[6, 19]
case3_case1 s[8, 21]
Right (0, 7, 1, 19)
Save to S[7, 19]
case1_case1 s[8, 19]
case2_case3 s[7, 20]
case3_case d[7, 19]
case3_case1 s[8, 20]
Right (0, 7, 1, 18)
Save to S[7, 18]
case1_case1 s[8, 18]
case2_case3 s[7, 19]
case3_case d[8, 19]
case3_case1 s[8, 19]
Right (0, 7, 1, 17)
Save to S[7, 17]
case1_case1 s[8, 17]
case2_case3 s[7, 18]
case3_case d[9, 19]
case3_case1 s[8, 18]
Right (0, 7, 1, 16)
Save to S[7, 16]
case1_case1 s[8, 16]
case2_case3 s[7, 17]
case3_case d[10, 19]
case3_case1 s[8, 17]
Right (0, 7, 1, 15)
Save to S[7, 15]
case1_case1 s[8, 15]
case2_case3 s[7, 16]
case3_case d[5, 19]
case3_case1 s[8, 21]
Right (0, 7, 1, 14)
Save to S[7, 14]
case1_case1 s[8, 14]
case2_case3 s[7, 15]
case3_case d[4, 19]
case3_case1 s[8, 21]
Right (0, 7, 1, 13)
Save to S[7, 13]
case1_case1 s[8, 13]
case2_case3 s[7, 14]
case3_case d[3, 19]
case3_case1 s[8, 21]
Right (0, 7, 1, 12)
Save to S[7, 12]
case1_case1 s[8, 12]
case2_case3 s[7, 13]
case3_case d[2, 19]
case3_case1 s[8, 21]
Right (0, 7, 1, 11)
Save to S[7, 11]
case1_case1 s[8, 11]
case2_case3 s[7, 12]
case3_case d[11, 19]
case3_case1 s[8, 12]
Right (0, 7, 1, 10)
Save to S[7, 10]
case1_case1 s[8, 10]
case2_case3 s[7, 11]
case3_case d[17, 19]
case3_case1 s[8, 11]
Right (0, 7, 1, 9)
Save to S[7, 9]
case1_case1 s[8, 9]
case2_case3 s[7, 10]
case3_case d[18, 19]
case3_case1 s[8, 10]
Right (0, 7, 1, 8)
Save to S[7, 8]
case1_case1 s[8, 8]
case2_case3 s[7, 9]
case3_case d[19, 19]
case3_case1 s[8, 9]
Right (0, 7, 1, 7)
Save to S[7, 7]
case1_case1 s[8, 7]
case2_case3 s[7, 8]
case3_case d[20, 19]
case3_case1 s[8, 8]
Right (0, 7, 1, 6)
Save to S[7, 6]
case1_case1 s[8, 6]
case2_case3 s[7, 7]
case3_case d[16, 19]
case3_case1 s[8, 11]
Right (0, 7, 1, 5)
Save to S[7, 5]
case1_case1 s[8, 5]
case2_case3 s[7, 6]
case3_case d[15, 19]
case3_case1 s[8, 11]
Right (0, 7, 1, 4)
Save to S[7, 4]
case1_case1 s[8, 4]
case2_case3 s[7, 5]
case3_case d[14, 19]
case3_case1 s[8, 11]
Right (0, 7, 1, 3)
Save to S[7, 3]
case1_case1 s[8, 3]
case2_case3 s[7, 4]
case3_case d[13, 19]
case3_case1 s[8, 11]
Right (0, 7, 1, 2)
Save to S[7, 2]
case1_case1 s[8, 2]
case2_case3 s[7, 3]
case3_case d[21, 19]
case3_case1 s[8, 3]
Right (0, 7, 1, 1)
Save to S[7, 1]
case1_case1 s[8, 1]
case2_case3 s[7, 2]
case3_case d[12, 19]
case3_case1 s[8, 11]
new Round C'
Right (0, 6, 1, 21)
Save to S[6, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 15]
Right (0, 6, 1, 20)
Save to S[6, 20]
case1_case1 s[7, 20]
case2_case3 s[6, 21]
case3_case d[6, 15]
case3_case3 t[1, 21]
Right (0, 6, 1, 19)
Save to S[6, 19]
case1_case1 s[7, 19]
case2_case3 s[6, 20]
case3_case d[7, 15]
case3_case3 t[1, 20]
Right (0, 6, 1, 18)
Save to S[6, 18]
case1_case1 s[7, 18]
case2_case3 s[6, 19]
case3_case d[8, 15]
case3_case3 t[1, 19]
Right (0, 6, 1, 17)
Save to S[6, 17]
case1_case1 s[7, 17]
case2_case3 s[6, 18]
case3_case d[9, 15]
case3_case3 t[1, 18]
Right (0, 6, 1, 16)
Save to S[6, 16]
case1_case1 s[7, 16]
case2_case3 s[6, 17]
case3_case d[10, 15]
case3_case3 t[1, 17]
Right (0, 6, 1, 15)
Save to S[6, 15]
case1_case1 s[7, 15]
case2_case3 s[6, 16]
case3_case d[5, 15]
case3_case3 t[1, 21]
Right (0, 6, 1, 14)
Save to S[6, 14]
case1_case1 s[7, 14]
case2_case3 s[6, 15]
case3_case d[4, 15]
case3_case3 t[1, 21]
Right (0, 6, 1, 13)
Save to S[6, 13]
case1_case1 s[7, 13]
case2_case3 s[6, 14]
case3_case d[3, 15]
case3_case3 t[1, 21]
Right (0, 6, 1, 12)
Save to S[6, 12]
case1_case1 s[7, 12]
case2_case3 s[6, 13]
case3_case d[2, 15]
case3_case3 t[1, 21]
Right (0, 6, 1, 11)
Save to S[6, 11]
case1_case1 s[7, 11]
case2_case3 s[6, 12]
case3_case d[11, 15]
case3_case3 t[1, 12]
Right (0, 6, 1, 10)
Save to S[6, 10]
case1_case1 s[7, 10]
case2_case3 s[6, 11]
case3_case d[17, 15]
case3_case3 t[1, 11]
Right (0, 6, 1, 9)
Save to S[6, 9]
case1_case1 s[7, 9]
case2_case3 s[6, 10]
case3_case d[18, 15]
case3_case3 t[1, 10]
Right (0, 6, 1, 8)
Save to S[6, 8]
case1_case1 s[7, 8]
case2_case3 s[6, 9]
case3_case d[19, 15]
case3_case3 t[1, 9]
Right (0, 6, 1, 7)
Save to S[6, 7]
case1_case1 s[7, 7]
case2_case3 s[6, 8]
case3_case d[20, 15]
case3_case3 t[1, 8]
Right (0, 6, 1, 6)
Save to S[6, 6]
case1_case1 s[7, 6]
case2_case3 s[6, 7]
case3_case d[16, 15]
case3_case3 t[1, 11]
Right (0, 6, 1, 5)
Save to S[6, 5]
case1_case1 s[7, 5]
case2_case3 s[6, 6]
case3_case d[15, 15]
case3_case3 t[1, 11]
Right (0, 6, 1, 4)
Save to S[6, 4]
case1_case1 s[7, 4]
case2_case3 s[6, 5]
case3_case d[14, 15]
case3_case3 t[1, 11]
Right (0, 6, 1, 3)
Save to S[6, 3]
case1_case1 s[7, 3]
case2_case3 s[6, 4]
case3_case d[13, 15]
case3_case3 t[1, 11]
Right (0, 6, 1, 2)
Save to S[6, 2]
case1_case1 s[7, 2]
case2_case3 s[6, 3]
case3_case d[21, 15]
case3_case3 t[1, 3]
Right (0, 6, 1, 1)
Save to S[6, 1]
case1_case1 s[7, 1]
case2_case3 s[6, 2]
case3_case d[12, 15]
case3_case3 t[1, 11]
new Round C'
Right (0, 5, 1, 21)
Save to S[5, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 14]
Right (0, 5, 1, 20)
Save to S[5, 20]
case1_case1 s[6, 20]
case2_case3 s[5, 21]
case3_case d[6, 14]
case3_case3 t[1, 21]
Right (0, 5, 1, 19)
Save to S[5, 19]
case1_case1 s[6, 19]
case2_case3 s[5, 20]
case3_case d[7, 14]
case3_case3 t[1, 20]
Right (0, 5, 1, 18)
Save to S[5, 18]
case1_case1 s[6, 18]
case2_case3 s[5, 19]
case3_case d[8, 14]
case3_case3 t[1, 19]
Right (0, 5, 1, 17)
Save to S[5, 17]
case1_case1 s[6, 17]
case2_case3 s[5, 18]
case3_case d[9, 14]
case3_case3 t[1, 18]
Right (0, 5, 1, 16)
Save to S[5, 16]
case1_case1 s[6, 16]
case2_case3 s[5, 17]
case3_case d[10, 14]
case3_case3 t[1, 17]
Right (0, 5, 1, 15)
Save to S[5, 15]
case1_case1 s[6, 15]
case2_case3 s[5, 16]
case3_case d[5, 14]
case3_case3 t[1, 21]
Right (0, 5, 1, 14)
Save to S[5, 14]
case1_case1 s[6, 14]
case2_case3 s[5, 15]
case3_case d[4, 14]
case3_case3 t[1, 21]
Right (0, 5, 1, 13)
Save to S[5, 13]
case1_case1 s[6, 13]
case2_case3 s[5, 14]
case3_case d[3, 14]
case3_case3 t[1, 21]
Right (0, 5, 1, 12)
Save to S[5, 12]
case1_case1 s[6, 12]
case2_case3 s[5, 13]
case3_case d[2, 14]
case3_case3 t[1, 21]
Right (0, 5, 1, 11)
Save to S[5, 11]
case1_case1 s[6, 11]
case2_case3 s[5, 12]
case3_case d[11, 14]
case3_case3 t[1, 12]
Right (0, 5, 1, 10)
Save to S[5, 10]
case1_case1 s[6, 10]
case2_case3 s[5, 11]
case3_case d[17, 14]
case3_case3 t[1, 11]
Right (0, 5, 1, 9)
Save to S[5, 9]
case1_case1 s[6, 9]
case2_case3 s[5, 10]
case3_case d[18, 14]
case3_case3 t[1, 10]
Right (0, 5, 1, 8)
Save to S[5, 8]
case1_case1 s[6, 8]
case2_case3 s[5, 9]
case3_case d[19, 14]
case3_case3 t[1, 9]
Right (0, 5, 1, 7)
Save to S[5, 7]
case1_case1 s[6, 7]
case2_case3 s[5, 8]
case3_case d[20, 14]
case3_case3 t[1, 8]
Right (0, 5, 1, 6)
Save to S[5, 6]
case1_case1 s[6, 6]
case2_case3 s[5, 7]
case3_case d[16, 14]
case3_case3 t[1, 11]
Right (0, 5, 1, 5)
Save to S[5, 5]
case1_case1 s[6, 5]
case2_case3 s[5, 6]
case3_case d[15, 14]
case3_case3 t[1, 11]
Right (0, 5, 1, 4)
Save to S[5, 4]
case1_case1 s[6, 4]
case2_case3 s[5, 5]
case3_case d[14, 14]
case3_case3 t[1, 11]
Right (0, 5, 1, 3)
Save to S[5, 3]
case1_case1 s[6, 3]
case2_case3 s[5, 4]
case3_case d[13, 14]
case3_case3 t[1, 11]
Right (0, 5, 1, 2)
Save to S[5, 2]
case1_case1 s[6, 2]
case2_case3 s[5, 3]
case3_case d[21, 14]
case3_case3 t[1, 3]
Right (0, 5, 1, 1)
Save to S[5, 1]
case1_case1 s[6, 1]
case2_case3 s[5, 2]
case3_case d[12, 14]
case3_case3 t[1, 11]
new Round C'
Right (0, 4, 1, 21)
Save to S[4, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 13]
Right (0, 4, 1, 20)
Save to S[4, 20]
case1_case1 s[5, 20]
case2_case3 s[4, 21]
case3_case d[6, 13]
case3_case3 t[1, 21]
Right (0, 4, 1, 19)
Save to S[4, 19]
case1_case1 s[5, 19]
case2_case3 s[4, 20]
case3_case d[7, 13]
case3_case3 t[1, 20]
Right (0, 4, 1, 18)
Save to S[4, 18]
case1_case1 s[5, 18]
case2_case3 s[4, 19]
case3_case d[8, 13]
case3_case3 t[1, 19]
Right (0, 4, 1, 17)
Save to S[4, 17]
case1_case1 s[5, 17]
case2_case3 s[4, 18]
case3_case d[9, 13]
case3_case3 t[1, 18]
Right (0, 4, 1, 16)
Save to S[4, 16]
case1_case1 s[5, 16]
case2_case3 s[4, 17]
case3_case d[10, 13]
case3_case3 t[1, 17]
Right (0, 4, 1, 15)
Save to S[4, 15]
case1_case1 s[5, 15]
case2_case3 s[4, 16]
case3_case d[5, 13]
case3_case3 t[1, 21]
Right (0, 4, 1, 14)
Save to S[4, 14]
case1_case1 s[5, 14]
case2_case3 s[4, 15]
case3_case d[4, 13]
case3_case3 t[1, 21]
Right (0, 4, 1, 13)
Save to S[4, 13]
case1_case1 s[5, 13]
case2_case3 s[4, 14]
case3_case d[3, 13]
case3_case3 t[1, 21]
Right (0, 4, 1, 12)
Save to S[4, 12]
case1_case1 s[5, 12]
case2_case3 s[4, 13]
case3_case d[2, 13]
case3_case3 t[1, 21]
Right (0, 4, 1, 11)
Save to S[4, 11]
case1_case1 s[5, 11]
case2_case3 s[4, 12]
case3_case d[11, 13]
case3_case3 t[1, 12]
Right (0, 4, 1, 10)
Save to S[4, 10]
case1_case1 s[5, 10]
case2_case3 s[4, 11]
case3_case d[17, 13]
case3_case3 t[1, 11]
Right (0, 4, 1, 9)
Save to S[4, 9]
case1_case1 s[5, 9]
case2_case3 s[4, 10]
case3_case d[18, 13]
case3_case3 t[1, 10]
Right (0, 4, 1, 8)
Save to S[4, 8]
case1_case1 s[5, 8]
case2_case3 s[4, 9]
case3_case d[19, 13]
case3_case3 t[1, 9]
Right (0, 4, 1, 7)
Save to S[4, 7]
case1_case1 s[5, 7]
case2_case3 s[4, 8]
case3_case d[20, 13]
case3_case3 t[1, 8]
Right (0, 4, 1, 6)
Save to S[4, 6]
case1_case1 s[5, 6]
case2_case3 s[4, 7]
case3_case d[16, 13]
case3_case3 t[1, 11]
Right (0, 4, 1, 5)
Save to S[4, 5]
case1_case1 s[5, 5]
case2_case3 s[4, 6]
case3_case d[15, 13]
case3_case3 t[1, 11]
Right (0, 4, 1, 4)
Save to S[4, 4]
case1_case1 s[5, 4]
case2_case3 s[4, 5]
case3_case d[14, 13]
case3_case3 t[1, 11]
Right (0, 4, 1, 3)
Save to S[4, 3]
case1_case1 s[5, 3]
case2_case3 s[4, 4]
case3_case d[13, 13]
case3_case3 t[1, 11]
Right (0, 4, 1, 2)
Save to S[4, 2]
case1_case1 s[5, 2]
case2_case3 s[4, 3]
case3_case d[21, 13]
case3_case3 t[1, 3]
Right (0, 4, 1, 1)
Save to S[4, 1]
case1_case1 s[5, 1]
case2_case3 s[4, 2]
case3_case d[12, 13]
case3_case3 t[1, 11]
new Round C'
Right (0, 3, 1, 21)
Save to S[3, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 12]
Right (0, 3, 1, 20)
Save to S[3, 20]
case1_case1 s[4, 20]
case2_case3 s[3, 21]
case3_case d[6, 12]
case3_case3 t[1, 21]
Right (0, 3, 1, 19)
Save to S[3, 19]
case1_case1 s[4, 19]
case2_case3 s[3, 20]
case3_case d[7, 12]
case3_case3 t[1, 20]
Right (0, 3, 1, 18)
Save to S[3, 18]
case1_case1 s[4, 18]
case2_case3 s[3, 19]
case3_case d[8, 12]
case3_case3 t[1, 19]
Right (0, 3, 1, 17)
Save to S[3, 17]
case1_case1 s[4, 17]
case2_case3 s[3, 18]
case3_case d[9, 12]
case3_case3 t[1, 18]
Right (0, 3, 1, 16)
Save to S[3, 16]
case1_case1 s[4, 16]
case2_case3 s[3, 17]
case3_case d[10, 12]
case3_case3 t[1, 17]
Right (0, 3, 1, 15)
Save to S[3, 15]
case1_case1 s[4, 15]
case2_case3 s[3, 16]
case3_case d[5, 12]
case3_case3 t[1, 21]
Right (0, 3, 1, 14)
Save to S[3, 14]
case1_case1 s[4, 14]
case2_case3 s[3, 15]
case3_case d[4, 12]
case3_case3 t[1, 21]
Right (0, 3, 1, 13)
Save to S[3, 13]
case1_case1 s[4, 13]
case2_case3 s[3, 14]
case3_case d[3, 12]
case3_case3 t[1, 21]
Right (0, 3, 1, 12)
Save to S[3, 12]
case1_case1 s[4, 12]
case2_case3 s[3, 13]
case3_case d[2, 12]
case3_case3 t[1, 21]
Right (0, 3, 1, 11)
Save to S[3, 11]
case1_case1 s[4, 11]
case2_case3 s[3, 12]
case3_case d[11, 12]
case3_case3 t[1, 12]
Right (0, 3, 1, 10)
Save to S[3, 10]
case1_case1 s[4, 10]
case2_case3 s[3, 11]
case3_case d[17, 12]
case3_case3 t[1, 11]
Right (0, 3, 1, 9)
Save to S[3, 9]
case1_case1 s[4, 9]
case2_case3 s[3, 10]
case3_case d[18, 12]
case3_case3 t[1, 10]
Right (0, 3, 1, 8)
Save to S[3, 8]
case1_case1 s[4, 8]
case2_case3 s[3, 9]
case3_case d[19, 12]
case3_case3 t[1, 9]
Right (0, 3, 1, 7)
Save to S[3, 7]
case1_case1 s[4, 7]
case2_case3 s[3, 8]
case3_case d[20, 12]
case3_case3 t[1, 8]
Right (0, 3, 1, 6)
Save to S[3, 6]
case1_case1 s[4, 6]
case2_case3 s[3, 7]
case3_case d[16, 12]
case3_case3 t[1, 11]
Right (0, 3, 1, 5)
Save to S[3, 5]
case1_case1 s[4, 5]
case2_case3 s[3, 6]
case3_case d[15, 12]
case3_case3 t[1, 11]
Right (0, 3, 1, 4)
Save to S[3, 4]
case1_case1 s[4, 4]
case2_case3 s[3, 5]
case3_case d[14, 12]
case3_case3 t[1, 11]
Right (0, 3, 1, 3)
Save to S[3, 3]
case1_case1 s[4, 3]
case2_case3 s[3, 4]
case3_case d[13, 12]
case3_case3 t[1, 11]
Right (0, 3, 1, 2)
Save to S[3, 2]
case1_case1 s[4, 2]
case2_case3 s[3, 3]
case3_case d[21, 12]
case3_case3 t[1, 3]
Right (0, 3, 1, 1)
Save to S[3, 1]
case1_case1 s[4, 1]
case2_case3 s[3, 2]
case3_case d[12, 12]
case3_case3 t[1, 11]
new Round C'
Right (0, 2, 1, 21)
Save to S[2, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 20]
Right (0, 2, 1, 20)
Save to S[2, 20]
case1_case1 s[3, 20]
case2_case3 s[2, 21]
case3_case d[6, 20]
case3_case1 s[3, 21]
Right (0, 2, 1, 19)
Save to S[2, 19]
case1_case1 s[3, 19]
case2_case3 s[2, 20]
case3_case d[7, 20]
case3_case1 s[3, 20]
Right (0, 2, 1, 18)
Save to S[2, 18]
case1_case1 s[3, 18]
case2_case3 s[2, 19]
case3_case d[8, 20]
case3_case1 s[3, 19]
Right (0, 2, 1, 17)
Save to S[2, 17]
case1_case1 s[3, 17]
case2_case3 s[2, 18]
case3_case d[9, 20]
case3_case1 s[3, 18]
Right (0, 2, 1, 16)
Save to S[2, 16]
case1_case1 s[3, 16]
case2_case3 s[2, 17]
case3_case d[10, 20]
case3_case1 s[3, 17]
Right (0, 2, 1, 15)
Save to S[2, 15]
case1_case1 s[3, 15]
case2_case3 s[2, 16]
case3_case d[5, 20]
case3_case1 s[3, 21]
Right (0, 2, 1, 14)
Save to S[2, 14]
case1_case1 s[3, 14]
case2_case3 s[2, 15]
case3_case d[4, 20]
case3_case1 s[3, 21]
Right (0, 2, 1, 13)
Save to S[2, 13]
case1_case1 s[3, 13]
case2_case3 s[2, 14]
case3_case d[3, 20]
case3_case1 s[3, 21]
Right (0, 2, 1, 12)
Save to S[2, 12]
case1_case1 s[3, 12]
case2_case3 s[2, 13]
case3_case d[2, 20]
case3_case1 s[3, 21]
Right (0, 2, 1, 11)
Save to S[2, 11]
case1_case1 s[3, 11]
case2_case3 s[2, 12]
case3_case d[11, 20]
case3_case1 s[3, 12]
Right (0, 2, 1, 10)
Save to S[2, 10]
case1_case1 s[3, 10]
case2_case3 s[2, 11]
case3_case d[17, 20]
case3_case1 s[3, 11]
Right (0, 2, 1, 9)
Save to S[2, 9]
case1_case1 s[3, 9]
case2_case3 s[2, 10]
case3_case d[18, 20]
case3_case1 s[3, 10]
Right (0, 2, 1, 8)
Save to S[2, 8]
case1_case1 s[3, 8]
case2_case3 s[2, 9]
case3_case d[19, 20]
case3_case1 s[3, 9]
Right (0, 2, 1, 7)
Save to S[2, 7]
case1_case1 s[3, 7]
case2_case3 s[2, 8]
case3_case d[20, 20]
case3_case1 s[3, 8]
Right (0, 2, 1, 6)
Save to S[2, 6]
case1_case1 s[3, 6]
case2_case3 s[2, 7]
case3_case d[16, 20]
case3_case1 s[3, 11]
Right (0, 2, 1, 5)
Save to S[2, 5]
case1_case1 s[3, 5]
case2_case3 s[2, 6]
case3_case d[15, 20]
case3_case1 s[3, 11]
Right (0, 2, 1, 4)
Save to S[2, 4]
case1_case1 s[3, 4]
case2_case3 s[2, 5]
case3_case d[14, 20]
case3_case1 s[3, 11]
Right (0, 2, 1, 3)
Save to S[2, 3]
case1_case1 s[3, 3]
case2_case3 s[2, 4]
case3_case d[13, 20]
case3_case1 s[3, 11]
Right (0, 2, 1, 2)
Save to S[2, 2]
case1_case1 s[3, 2]
case2_case3 s[2, 3]
case3_case d[21, 20]
case3_case1 s[3, 3]
Right (0, 2, 1, 1)
Save to S[2, 1]
case1_case1 s[3, 1]
case2_case3 s[2, 2]
case3_case d[12, 20]
case3_case1 s[3, 11]
new Round C'
Right (0, 1, 1, 21)
Save to S[1, 21]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 11]
Right (0, 1, 1, 20)
Save to S[1, 20]
case1_case1 s[2, 20]
case2_case3 s[1, 21]
case3_case d[6, 11]
case3_case3 t[1, 21]
Right (0, 1, 1, 19)
Save to S[1, 19]
case1_case1 s[2, 19]
case2_case3 s[1, 20]
case3_case d[7, 11]
case3_case3 t[1, 20]
Right (0, 1, 1, 18)
Save to S[1, 18]
case1_case1 s[2, 18]
case2_case3 s[1, 19]
case3_case d[8, 11]
case3_case3 t[1, 19]
Right (0, 1, 1, 17)
Save to S[1, 17]
case1_case1 s[2, 17]
case2_case3 s[1, 18]
case3_case d[9, 11]
case3_case3 t[1, 18]
Right (0, 1, 1, 16)
Save to S[1, 16]
case1_case1 s[2, 16]
case2_case3 s[1, 17]
case3_case d[10, 11]
case3_case3 t[1, 17]
Right (0, 1, 1, 15)
Save to S[1, 15]
case1_case1 s[2, 15]
case2_case3 s[1, 16]
case3_case d[5, 11]
case3_case3 t[1, 21]
Right (0, 1, 1, 14)
Save to S[1, 14]
case1_case1 s[2, 14]
case2_case3 s[1, 15]
case3_case d[4, 11]
case3_case3 t[1, 21]
Right (0, 1, 1, 13)
Save to S[1, 13]
case1_case1 s[2, 13]
case2_case3 s[1, 14]
case3_case d[3, 11]
case3_case3 t[1, 21]
Right (0, 1, 1, 12)
Save to S[1, 12]
case1_case1 s[2, 12]
case2_case3 s[1, 13]
case3_case d[2, 11]
case3_case3 t[1, 21]
Right (0, 1, 1, 11)
Save to S[1, 11]
case1_case1 s[2, 11]
case2_case3 s[1, 12]
case3_case d[11, 11]
case3_case3 t[1, 12]
Right (0, 1, 1, 10)
Save to S[1, 10]
case1_case1 s[2, 10]
case2_case3 s[1, 11]
case3_case d[17, 11]
case3_case3 t[1, 11]
Right (0, 1, 1, 9)
Save to S[1, 9]
case1_case1 s[2, 9]
case2_case3 s[1, 10]
case3_case d[18, 11]
case3_case3 t[1, 10]
Right (0, 1, 1, 8)
Save to S[1, 8]
case1_case1 s[2, 8]
case2_case3 s[1, 9]
case3_case d[19, 11]
case3_case3 t[1, 9]
Right (0, 1, 1, 7)
Save to S[1, 7]
case1_case1 s[2, 7]
case2_case3 s[1, 8]
case3_case d[20, 11]
case3_case3 t[1, 8]
Right (0, 1, 1, 6)
Save to S[1, 6]
case1_case1 s[2, 6]
case2_case3 s[1, 7]
case3_case d[16, 11]
case3_case3 t[1, 11]
Right (0, 1, 1, 5)
Save to S[1, 5]
case1_case1 s[2, 5]
case2_case3 s[1, 6]
case3_case d[15, 11]
case3_case3 t[1, 11]
Right (0, 1, 1, 4)
Save to S[1, 4]
case1_case1 s[2, 4]
case2_case3 s[1, 5]
case3_case d[14, 11]
case3_case3 t[1, 11]
Right (0, 1, 1, 3)
Save to S[1, 3]
case1_case1 s[2, 3]
case2_case3 s[1, 4]
case3_case d[13, 11]
case3_case3 t[1, 11]
Right (0, 1, 1, 2)
Save to S[1, 2]
case1_case1 s[2, 2]
case2_case3 s[1, 3]
case3_case d[21, 11]
case3_case3 t[1, 3]
Right (0, 1, 1, 1)
Save to S[1, 1]
case1_case1 s[2, 1]
case2_case3 s[1, 2]
case3_case d[12, 11]
case3_case3 t[1, 11]
new Round C'
Right (0, 0, 1, 21)
Save to S[0, 21]
case3 = 0
case1_case1 = s[1, 21]
case2_case1 = FcurrentForestCost
case3_case3 D[1, 0]
Right (0, 0, 1, 20)
Save to S[0, 20]
case1_case1 s[1, 20]
case2_case3 s[0, 21]
case3_case d[6, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 19)
Save to S[0, 19]
case1_case1 s[1, 19]
case2_case3 s[0, 20]
case3_case d[7, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 18)
Save to S[0, 18]
case1_case1 s[1, 18]
case2_case3 s[0, 19]
case3_case d[8, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 17)
Save to S[0, 17]
case1_case1 s[1, 17]
case2_case3 s[0, 18]
case3_case d[9, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 16)
Save to S[0, 16]
case1_case1 s[1, 16]
case2_case3 s[0, 17]
case3_case d[10, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 15)
Save to S[0, 15]
case1_case1 s[1, 15]
case2_case3 s[0, 16]
case3_case d[5, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 14)
Save to S[0, 14]
case1_case1 s[1, 14]
case2_case3 s[0, 15]
case3_case d[4, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 13)
Save to S[0, 13]
case1_case1 s[1, 13]
case2_case3 s[0, 14]
case3_case d[3, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 12)
Save to S[0, 12]
case1_case1 s[1, 12]
case2_case3 s[0, 13]
case3_case d[2, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 11)
Save to S[0, 11]
case1_case1 s[1, 11]
case2_case3 s[0, 12]
case3_case d[11, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 10)
Save to S[0, 10]
case1_case1 s[1, 10]
case2_case3 s[0, 11]
case3_case d[17, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 9)
Save to S[0, 9]
case1_case1 s[1, 9]
case2_case3 s[0, 10]
case3_case d[18, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 8)
Save to S[0, 8]
case1_case1 s[1, 8]
case2_case3 s[0, 9]
case3_case d[19, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 7)
Save to S[0, 7]
case1_case1 s[1, 7]
case2_case3 s[0, 8]
case3_case d[20, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 6)
Save to S[0, 6]
case1_case1 s[1, 6]
case2_case3 s[0, 7]
case3_case d[16, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 5)
Save to S[0, 5]
case1_case1 s[1, 5]
case2_case3 s[0, 6]
case3_case d[15, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 4)
Save to S[0, 4]
case1_case1 s[1, 4]
case2_case3 s[0, 5]
case3_case d[14, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 3)
Save to S[0, 3]
case1_case1 s[1, 3]
case2_case3 s[0, 4]
case3_case d[13, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 2)
Save to S[0, 2]
case1_case1 s[1, 2]
case2_case3 s[0, 3]
case3_case d[21, 0]
case3_case2 GcurrentForestCost - G(rG) 
Right (0, 0, 1, 1)
Save to S[0, 1]
case1_case1 s[1, 1]
case2_case3 s[0, 2]
case3_case d[12, 0]
case3_case2 GcurrentForestCost - G(rG) 
save to D[0, 0] = S[0, 1]
Q[10] = S[10, 1]
Q[9] = S[9, 1]
Q[8] = S[8, 1]
Q[7] = S[7, 1]
Q[6] = S[6, 1]
Q[5] = S[5, 1]
Q[4] = S[4, 1]
Q[3] = S[3, 1]
Q[2] = S[2, 1]
Q[1] = S[1, 1]
Q[0] = S[0, 1]
T[1, 21] = S[0, 21]
T[1, 20] = S[0, 20]
T[1, 19] = S[0, 19]
T[1, 18] = S[0, 18]
T[1, 17] = S[0, 17]
T[1, 16] = S[0, 16]
T[1, 15] = S[0, 15]
T[1, 14] = S[0, 14]
T[1, 13] = S[0, 13]
T[1, 12] = S[0, 12]
T[1, 11] = S[0, 11]
T[1, 10] = S[0, 10]
T[1, 9] = S[0, 9]
T[1, 8] = S[0, 8]
T[1, 7] = S[0, 7]
T[1, 6] = S[0, 6]
T[1, 5] = S[0, 5]
T[1, 4] = S[0, 4]
T[1, 3] = S[0, 3]
T[1, 2] = S[0, 2]
T[1, 1] = S[0, 1]
new Round B'
updateFnArray(-1, 0, 0)
O fn[0] = fn[23] = 0
O fn[23] = 0
updateFtArray(-1, 0)
ft[0] = -1
ft[fn[0]] = 0
new Round C'
Right (0, 10, 0, 0)
Save to S[10, 0]
case3_case FcurrentForest - F(rF)
case1_case2 = t[0, 0]
case2_case2 = q[10]
case3_case3 D[0, 16]
new Round C'
Right (0, 9, 0, 0)
Save to S[9, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[10, 0]
case2_case2 = q[9]
case3_case3 D[0, 17]
new Round C'
Right (0, 8, 0, 0)
Save to S[8, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[9, 0]
case2_case2 = q[8]
case3_case3 D[0, 18]
new Round C'
Right (0, 7, 0, 0)
Save to S[7, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[8, 0]
case2_case2 = q[7]
case3_case3 D[0, 19]
new Round C'
Right (0, 6, 0, 0)
Save to S[6, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[7, 0]
case2_case2 = q[6]
case3_case3 D[0, 15]
new Round C'
Right (0, 5, 0, 0)
Save to S[5, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[6, 0]
case2_case2 = q[5]
case3_case3 D[0, 14]
new Round C'
Right (0, 4, 0, 0)
Save to S[4, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[5, 0]
case2_case2 = q[4]
case3_case3 D[0, 13]
new Round C'
Right (0, 3, 0, 0)
Save to S[3, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[4, 0]
case2_case2 = q[3]
case3_case3 D[0, 12]
new Round C'
Right (0, 2, 0, 0)
Save to S[2, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[3, 0]
case2_case2 = q[2]
case3_case3 D[0, 20]
new Round C'
Right (0, 1, 0, 0)
Save to S[1, 0]
case3_case FcurrentForest - F(rF)
case1_case1 = s[2, 0]
case2_case2 = q[1]
case3_case3 D[0, 11]
new Round C'
Right (0, 0, 0, 0)
Save to S[0, 0]
case3 = 0
case1_case1 = s[1, 0]
case2_case2 = q[0]
case3_case3 D[0, 0]
T[0, 0] = S[0, 0]
